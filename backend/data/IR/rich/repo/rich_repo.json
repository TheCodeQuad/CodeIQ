{
  "repo": "rich",
  "path": "C:\\CODEIQNEW\\backend\\data\\rich",
  "files": [
    {
      "path": "setup.py",
      "file_ir": "files\\setup.json",
      "functions": []
    },
    {
      "path": "benchmarks\\benchmarks.py",
      "file_ir": "files\\benchmarks__benchmarks.json",
      "functions": [
        "setup",
        "time_wrapping",
        "time_indent_guides",
        "time_fit",
        "time_split",
        "time_divide",
        "time_align_center",
        "time_render",
        "time_wrapping_unicode_heavy",
        "time_fit_unicode_heavy",
        "time_split_unicode_heavy",
        "time_divide_unicode_heavy",
        "time_align_center_unicode_heavy",
        "time_render_unicode_heavy",
        "setup",
        "time_wrapping_unicode_heavy_warm_cache",
        "setup",
        "time_text_thin_terminal_heavy_wrapping",
        "time_text_thin_terminal_medium_wrapping",
        "time_text_wide_terminal_no_wrapping",
        "_print_with_width",
        "time_table_no_wrapping",
        "time_table_heavy_wrapping",
        "_print_table",
        "setup",
        "time_pretty",
        "time_pretty_indent_guides",
        "time_pretty_justify_center",
        "setup",
        "time_parse_ansi",
        "time_parse_hex",
        "time_parse_mixed_complex_style",
        "time_style_add",
        "setup",
        "time_downgrade_to_eight_bit",
        "time_downgrade_to_standard",
        "time_downgrade_to_windows",
        "setup",
        "time_downgrade_to_eight_bit",
        "time_downgrade_to_standard",
        "time_downgrade_to_windows",
        "setup",
        "test_divide_complex"
      ]
    },
    {
      "path": "benchmarks\\snippets.py",
      "file_ir": "files\\benchmarks__snippets.json",
      "functions": []
    },
    {
      "path": "benchmarks\\__init__.py",
      "file_ir": "files\\benchmarks____init__.json",
      "functions": []
    },
    {
      "path": "docs\\source\\conf.py",
      "file_ir": "files\\docs__source__conf.json",
      "functions": []
    },
    {
      "path": "examples\\attrs.py",
      "file_ir": "files\\examples__attrs.json",
      "functions": []
    },
    {
      "path": "examples\\bars.py",
      "file_ir": "files\\examples__bars.json",
      "functions": []
    },
    {
      "path": "examples\\columns.py",
      "file_ir": "files\\examples__columns.json",
      "functions": [
        "get_content"
      ]
    },
    {
      "path": "examples\\cp_progress.py",
      "file_ir": "files\\examples__cp_progress.json",
      "functions": []
    },
    {
      "path": "examples\\downloader.py",
      "file_ir": "files\\examples__downloader.json",
      "functions": [
        "handle_sigint",
        "copy_url",
        "download"
      ]
    },
    {
      "path": "examples\\dynamic_progress.py",
      "file_ir": "files\\examples__dynamic_progress.json",
      "functions": [
        "run_steps"
      ]
    },
    {
      "path": "examples\\exception.py",
      "file_ir": "files\\examples__exception.json",
      "functions": [
        "divide_by",
        "divide_all"
      ]
    },
    {
      "path": "examples\\export.py",
      "file_ir": "files\\examples__export.json",
      "functions": [
        "print_table"
      ]
    },
    {
      "path": "examples\\file_progress.py",
      "file_ir": "files\\examples__file_progress.json",
      "functions": []
    },
    {
      "path": "examples\\fullscreen.py",
      "file_ir": "files\\examples__fullscreen.json",
      "functions": [
        "make_layout",
        "make_sponsor_message",
        "__rich__",
        "make_syntax"
      ]
    },
    {
      "path": "examples\\group.py",
      "file_ir": "files\\examples__group.json",
      "functions": []
    },
    {
      "path": "examples\\group2.py",
      "file_ir": "files\\examples__group2.json",
      "functions": [
        "get_panels"
      ]
    },
    {
      "path": "examples\\highlighter.py",
      "file_ir": "files\\examples__highlighter.json",
      "functions": []
    },
    {
      "path": "examples\\jobs.py",
      "file_ir": "files\\examples__jobs.json",
      "functions": []
    },
    {
      "path": "examples\\justify.py",
      "file_ir": "files\\examples__justify.json",
      "functions": []
    },
    {
      "path": "examples\\justify2.py",
      "file_ir": "files\\examples__justify2.json",
      "functions": []
    },
    {
      "path": "examples\\layout.py",
      "file_ir": "files\\examples__layout.json",
      "functions": [
        "__rich__"
      ]
    },
    {
      "path": "examples\\link.py",
      "file_ir": "files\\examples__link.json",
      "functions": []
    },
    {
      "path": "examples\\listdir.py",
      "file_ir": "files\\examples__listdir.json",
      "functions": [
        "make_filename_text"
      ]
    },
    {
      "path": "examples\\live_progress.py",
      "file_ir": "files\\examples__live_progress.json",
      "functions": []
    },
    {
      "path": "examples\\log.py",
      "file_ir": "files\\examples__log.json",
      "functions": [
        "test_locals"
      ]
    },
    {
      "path": "examples\\overflow.py",
      "file_ir": "files\\examples__overflow.json",
      "functions": []
    },
    {
      "path": "examples\\padding.py",
      "file_ir": "files\\examples__padding.json",
      "functions": []
    },
    {
      "path": "examples\\print_calendar.py",
      "file_ir": "files\\examples__print_calendar.json",
      "functions": [
        "print_calendar"
      ]
    },
    {
      "path": "examples\\rainbow.py",
      "file_ir": "files\\examples__rainbow.json",
      "functions": [
        "highlight"
      ]
    },
    {
      "path": "examples\\recursive_error.py",
      "file_ir": "files\\examples__recursive_error.json",
      "functions": [
        "foo",
        "bar"
      ]
    },
    {
      "path": "examples\\repr.py",
      "file_ir": "files\\examples__repr.json",
      "functions": [
        "__init__"
      ]
    },
    {
      "path": "examples\\save_table_svg.py",
      "file_ir": "files\\examples__save_table_svg.json",
      "functions": []
    },
    {
      "path": "examples\\screen.py",
      "file_ir": "files\\examples__screen.json",
      "functions": []
    },
    {
      "path": "examples\\spinners.py",
      "file_ir": "files\\examples__spinners.json",
      "functions": []
    },
    {
      "path": "examples\\status.py",
      "file_ir": "files\\examples__status.json",
      "functions": []
    },
    {
      "path": "examples\\suppress.py",
      "file_ir": "files\\examples__suppress.json",
      "functions": [
        "hello"
      ]
    },
    {
      "path": "examples\\table.py",
      "file_ir": "files\\examples__table.json",
      "functions": []
    },
    {
      "path": "examples\\table_movie.py",
      "file_ir": "files\\examples__table_movie.json",
      "functions": [
        "beat"
      ]
    },
    {
      "path": "examples\\top_lite_simulator.py",
      "file_ir": "files\\examples__top_lite_simulator.json",
      "functions": [
        "memory_str",
        "time_str",
        "generate_process",
        "create_process_table"
      ]
    },
    {
      "path": "examples\\tree.py",
      "file_ir": "files\\examples__tree.json",
      "functions": [
        "walk_directory"
      ]
    },
    {
      "path": "rich\\abc.py",
      "file_ir": "files\\rich__abc.json",
      "functions": [
        "__subclasshook__"
      ]
    },
    {
      "path": "rich\\align.py",
      "file_ir": "files\\rich__align.json",
      "functions": [
        "__init__",
        "__repr__",
        "left",
        "center",
        "right",
        "__rich_console__",
        "generate_segments",
        "blank_lines",
        "__rich_measure__",
        "__init__",
        "__repr__",
        "__rich_console__",
        "blank_lines",
        "__rich_measure__"
      ]
    },
    {
      "path": "rich\\ansi.py",
      "file_ir": "files\\rich__ansi.json",
      "functions": [
        "_ansi_tokenize",
        "__init__",
        "decode",
        "decode_line",
        "read"
      ]
    },
    {
      "path": "rich\\bar.py",
      "file_ir": "files\\rich__bar.json",
      "functions": [
        "__init__",
        "__repr__",
        "__rich_console__",
        "__rich_measure__"
      ]
    },
    {
      "path": "rich\\box.py",
      "file_ir": "files\\rich__box.json",
      "functions": [
        "__init__",
        "__repr__",
        "__str__",
        "substitute",
        "get_plain_headed_box",
        "get_top",
        "get_row",
        "get_bottom"
      ]
    },
    {
      "path": "rich\\cells.py",
      "file_ir": "files\\rich__cells.json",
      "functions": [
        "cached_cell_len",
        "cell_len",
        "get_character_cell_size",
        "set_cell_size",
        "chop_cells"
      ]
    },
    {
      "path": "rich\\color.py",
      "file_ir": "files\\rich__color.json",
      "functions": [
        "__repr__",
        "__str__",
        "__repr__",
        "__rich__",
        "__rich_repr__",
        "system",
        "is_system_defined",
        "is_default",
        "get_truecolor",
        "from_ansi",
        "from_triplet",
        "from_rgb",
        "default",
        "parse",
        "get_ansi_codes",
        "downgrade",
        "parse_rgb_hex",
        "blend_rgb"
      ]
    },
    {
      "path": "rich\\color_triplet.py",
      "file_ir": "files\\rich__color_triplet.json",
      "functions": [
        "hex",
        "rgb",
        "normalized"
      ]
    },
    {
      "path": "rich\\columns.py",
      "file_ir": "files\\rich__columns.json",
      "functions": [
        "__init__",
        "add_renderable",
        "__rich_console__",
        "iter_renderables"
      ]
    },
    {
      "path": "rich\\console.py",
      "file_ir": "files\\rich__console.json",
      "functions": [
        "ascii_only",
        "copy",
        "update",
        "update_width",
        "update_height",
        "reset_height",
        "update_dimensions",
        "__rich__",
        "__rich_console__",
        "__init__",
        "__rich_console__",
        "__init__",
        "__rich_console__",
        "__init__",
        "__enter__",
        "__exit__",
        "get",
        "__init__",
        "__enter__",
        "__exit__",
        "__init__",
        "__enter__",
        "__exit__",
        "__init__",
        "update",
        "__enter__",
        "__exit__",
        "__init__",
        "renderables",
        "__rich_measure__",
        "__rich_console__",
        "group",
        "decorator",
        "_replace",
        "_is_jupyter",
        "process_renderables",
        "get_windows_console_features",
        "detect_legacy_windows",
        "__init__",
        "__repr__",
        "file",
        "file",
        "_buffer",
        "_buffer_index",
        "_buffer_index",
        "_theme_stack",
        "_detect_color_system",
        "_enter_buffer",
        "_exit_buffer",
        "set_live",
        "clear_live",
        "push_render_hook",
        "pop_render_hook",
        "__enter__",
        "__exit__",
        "begin_capture",
        "end_capture",
        "push_theme",
        "pop_theme",
        "use_theme",
        "color_system",
        "encoding",
        "is_terminal",
        "is_dumb_terminal",
        "options",
        "size",
        "size",
        "width",
        "width",
        "height",
        "height",
        "bell",
        "capture",
        "pager",
        "line",
        "clear",
        "status",
        "show_cursor",
        "set_alt_screen",
        "is_alt_screen",
        "set_window_title",
        "screen",
        "measure",
        "render",
        "render_lines",
        "render_str",
        "get_style",
        "_collect_renderables",
        "align_append",
        "check_text",
        "rule",
        "control",
        "out",
        "print",
        "print_json",
        "update_screen",
        "update_screen_lines",
        "print_exception",
        "_caller_frame_info",
        "log",
        "on_broken_pipe",
        "_check_buffer",
        "_write_buffer",
        "_render_buffer",
        "input",
        "export_text",
        "save_text",
        "export_html",
        "save_html",
        "export_svg",
        "get_svg_style",
        "escape_text",
        "make_tag",
        "stringify",
        "save_svg",
        "_svg_hash"
      ]
    },
    {
      "path": "rich\\constrain.py",
      "file_ir": "files\\rich__constrain.json",
      "functions": [
        "__init__",
        "__rich_console__",
        "__rich_measure__"
      ]
    },
    {
      "path": "rich\\containers.py",
      "file_ir": "files\\rich__containers.json",
      "functions": [
        "__init__",
        "__rich_console__",
        "__rich_measure__",
        "append",
        "__iter__",
        "__init__",
        "__repr__",
        "__iter__",
        "__getitem__",
        "__getitem__",
        "__getitem__",
        "__setitem__",
        "__len__",
        "__rich_console__",
        "append",
        "extend",
        "pop",
        "justify"
      ]
    },
    {
      "path": "rich\\control.py",
      "file_ir": "files\\rich__control.json",
      "functions": [
        "__init__",
        "bell",
        "home",
        "move",
        "get_codes",
        "move_to_column",
        "move_to",
        "clear",
        "show_cursor",
        "alt_screen",
        "title",
        "__str__",
        "__rich_console__",
        "strip_control_codes",
        "escape_control_codes"
      ]
    },
    {
      "path": "rich\\default_styles.py",
      "file_ir": "files\\rich__default_styles.json",
      "functions": []
    },
    {
      "path": "rich\\diagnose.py",
      "file_ir": "files\\rich__diagnose.json",
      "functions": [
        "report"
      ]
    },
    {
      "path": "rich\\emoji.py",
      "file_ir": "files\\rich__emoji.json",
      "functions": [
        "__init__",
        "replace",
        "__repr__",
        "__str__",
        "__rich_console__"
      ]
    },
    {
      "path": "rich\\errors.py",
      "file_ir": "files\\rich__errors.json",
      "functions": []
    },
    {
      "path": "rich\\filesize.py",
      "file_ir": "files\\rich__filesize.json",
      "functions": [
        "_to_str",
        "pick_unit_and_suffix",
        "decimal"
      ]
    },
    {
      "path": "rich\\file_proxy.py",
      "file_ir": "files\\rich__file_proxy.json",
      "functions": [
        "__init__",
        "rich_proxied_file",
        "__getattr__",
        "write",
        "flush",
        "fileno"
      ]
    },
    {
      "path": "rich\\highlighter.py",
      "file_ir": "files\\rich__highlighter.json",
      "functions": [
        "_combine_regex",
        "__call__",
        "highlight",
        "highlight",
        "highlight",
        "highlight"
      ]
    },
    {
      "path": "rich\\json.py",
      "file_ir": "files\\rich__json.json",
      "functions": [
        "__init__",
        "from_data",
        "__rich__"
      ]
    },
    {
      "path": "rich\\jupyter.py",
      "file_ir": "files\\rich__jupyter.json",
      "functions": [
        "__init__",
        "_repr_mimebundle_",
        "_repr_mimebundle_",
        "_render_segments",
        "escape",
        "display",
        "print"
      ]
    },
    {
      "path": "rich\\layout.py",
      "file_ir": "files\\rich__layout.json",
      "functions": [
        "__init__",
        "__rich_console__",
        "get_tree_icon",
        "divide",
        "get_tree_icon",
        "divide",
        "get_tree_icon",
        "divide",
        "__init__",
        "__rich_repr__",
        "renderable",
        "children",
        "map",
        "get",
        "__getitem__",
        "tree",
        "summary",
        "recurse",
        "split",
        "add_split",
        "split_row",
        "split_column",
        "unsplit",
        "update",
        "refresh_screen",
        "_make_region_map",
        "render",
        "__rich_console__"
      ]
    },
    {
      "path": "rich\\live.py",
      "file_ir": "files\\rich__live.json",
      "functions": [
        "__init__",
        "stop",
        "run",
        "__init__",
        "is_started",
        "get_renderable",
        "start",
        "stop",
        "__enter__",
        "__exit__",
        "_enable_redirect_io",
        "_disable_redirect_io",
        "renderable",
        "update",
        "refresh",
        "process_renderables"
      ]
    },
    {
      "path": "rich\\live_render.py",
      "file_ir": "files\\rich__live_render.json",
      "functions": [
        "__init__",
        "set_renderable",
        "position_cursor",
        "restore_cursor",
        "__rich_console__"
      ]
    },
    {
      "path": "rich\\logging.py",
      "file_ir": "files\\rich__logging.json",
      "functions": [
        "__init__",
        "get_level_text",
        "emit",
        "render_message",
        "render",
        "divide"
      ]
    },
    {
      "path": "rich\\markdown.py",
      "file_ir": "files\\rich__markdown.json",
      "functions": [
        "create",
        "on_enter",
        "on_text",
        "on_leave",
        "on_child_close",
        "__rich_console__",
        "on_enter",
        "on_text",
        "on_leave",
        "create",
        "__init__",
        "__rich_console__",
        "create",
        "on_enter",
        "__init__",
        "__rich_console__",
        "create",
        "__init__",
        "__rich_console__",
        "__init__",
        "on_child_close",
        "__rich_console__",
        "__rich_console__",
        "__init__",
        "on_child_close",
        "__rich_console__",
        "__init__",
        "on_child_close",
        "__init__",
        "on_child_close",
        "__init__",
        "on_child_close",
        "create",
        "__init__",
        "on_text",
        "create",
        "__init__",
        "on_child_close",
        "__rich_console__",
        "__init__",
        "on_child_close",
        "render_bullet",
        "render_number",
        "create",
        "__init__",
        "create",
        "__init__",
        "on_enter",
        "__rich_console__",
        "__init__",
        "current_style",
        "on_text",
        "enter_style",
        "leave_style",
        "__init__",
        "_flatten_tokens",
        "__rich_console__"
      ]
    },
    {
      "path": "rich\\markup.py",
      "file_ir": "files\\rich__markup.json",
      "functions": [
        "__str__",
        "markup",
        "escape",
        "escape_backslashes",
        "_parse",
        "render",
        "pop_style"
      ]
    },
    {
      "path": "rich\\measure.py",
      "file_ir": "files\\rich__measure.json",
      "functions": [
        "span",
        "normalize",
        "with_maximum",
        "with_minimum",
        "clamp",
        "get",
        "measure_renderables"
      ]
    },
    {
      "path": "rich\\padding.py",
      "file_ir": "files\\rich__padding.json",
      "functions": [
        "__init__",
        "indent",
        "unpack",
        "__repr__",
        "__rich_console__",
        "__rich_measure__"
      ]
    },
    {
      "path": "rich\\pager.py",
      "file_ir": "files\\rich__pager.json",
      "functions": [
        "show",
        "_pager",
        "show"
      ]
    },
    {
      "path": "rich\\palette.py",
      "file_ir": "files\\rich__palette.json",
      "functions": [
        "__init__",
        "__getitem__",
        "__rich__",
        "match",
        "get_color_distance",
        "__rich_console__"
      ]
    },
    {
      "path": "rich\\panel.py",
      "file_ir": "files\\rich__panel.json",
      "functions": [
        "__init__",
        "fit",
        "_title",
        "_subtitle",
        "__rich_console__",
        "align_text",
        "__rich_measure__"
      ]
    },
    {
      "path": "rich\\pretty.py",
      "file_ir": "files\\rich__pretty.json",
      "functions": [
        "_is_attr_object",
        "_get_attr_fields",
        "_is_dataclass_repr",
        "_has_default_namedtuple_repr",
        "_ipy_display_hook",
        "_safe_isinstance",
        "install",
        "display_hook",
        "__call__",
        "__init__",
        "__rich_console__",
        "__rich_measure__",
        "_get_braces_for_defaultdict",
        "_get_braces_for_deque",
        "_get_braces_for_array",
        "is_expandable",
        "iter_tokens",
        "check_length",
        "__str__",
        "render",
        "expandable",
        "check_length",
        "expand",
        "__str__",
        "_is_namedtuple",
        "traverse",
        "to_repr",
        "_traverse",
        "iter_rich_args",
        "iter_attrs",
        "pretty_repr",
        "pprint",
        "__repr__",
        "__repr__"
      ]
    },
    {
      "path": "rich\\progress.py",
      "file_ir": "files\\rich__progress.json",
      "functions": [
        "__init__",
        "run",
        "__enter__",
        "__exit__",
        "track",
        "__init__",
        "__enter__",
        "__exit__",
        "__iter__",
        "__next__",
        "closed",
        "fileno",
        "isatty",
        "mode",
        "name",
        "readable",
        "seekable",
        "writable",
        "read",
        "readinto",
        "readline",
        "readlines",
        "close",
        "seek",
        "tell",
        "write",
        "writelines",
        "__init__",
        "__enter__",
        "__exit__",
        "wrap_file",
        "open",
        "open",
        "open",
        "__init__",
        "get_table_column",
        "__call__",
        "render",
        "__init__",
        "render",
        "__init__",
        "set_spinner",
        "render",
        "__init__",
        "render",
        "__init__",
        "render",
        "render",
        "__init__",
        "render_speed",
        "render",
        "__init__",
        "render",
        "render",
        "render",
        "__init__",
        "render",
        "__init__",
        "render",
        "render",
        "get_time",
        "started",
        "remaining",
        "elapsed",
        "finished",
        "percentage",
        "speed",
        "time_remaining",
        "_reset",
        "__init__",
        "get_default_columns",
        "console",
        "tasks",
        "task_ids",
        "finished",
        "start",
        "stop",
        "__enter__",
        "__exit__",
        "track",
        "wrap_file",
        "open",
        "open",
        "open",
        "start_task",
        "stop_task",
        "update",
        "reset",
        "advance",
        "refresh",
        "get_renderable",
        "get_renderables",
        "make_tasks_table",
        "__rich__",
        "add_task",
        "remove_task"
      ]
    },
    {
      "path": "rich\\progress_bar.py",
      "file_ir": "files\\rich__progress_bar.json",
      "functions": [
        "__init__",
        "__repr__",
        "percentage_completed",
        "_get_pulse_segments",
        "update",
        "_render_pulse",
        "__rich_console__",
        "__rich_measure__"
      ]
    },
    {
      "path": "rich\\prompt.py",
      "file_ir": "files\\rich__prompt.json",
      "functions": [
        "__init__",
        "__rich__",
        "__init__",
        "ask",
        "ask",
        "ask",
        "render_default",
        "make_prompt",
        "get_input",
        "check_choice",
        "process_response",
        "on_validate_error",
        "pre_prompt",
        "__call__",
        "__call__",
        "__call__",
        "render_default",
        "process_response"
      ]
    },
    {
      "path": "rich\\protocol.py",
      "file_ir": "files\\rich__protocol.json",
      "functions": [
        "is_renderable",
        "rich_cast"
      ]
    },
    {
      "path": "rich\\region.py",
      "file_ir": "files\\rich__region.json",
      "functions": []
    },
    {
      "path": "rich\\repr.py",
      "file_ir": "files\\rich__repr.json",
      "functions": [
        "auto",
        "auto",
        "auto",
        "do_replace",
        "auto_repr",
        "auto_rich_repr",
        "rich_repr",
        "rich_repr",
        "rich_repr",
        "__rich_repr__"
      ]
    },
    {
      "path": "rich\\rule.py",
      "file_ir": "files\\rich__rule.json",
      "functions": [
        "__init__",
        "__repr__",
        "__rich_console__",
        "_rule_line",
        "__rich_measure__"
      ]
    },
    {
      "path": "rich\\scope.py",
      "file_ir": "files\\rich__scope.json",
      "functions": [
        "render_scope",
        "sort_items",
        "test"
      ]
    },
    {
      "path": "rich\\screen.py",
      "file_ir": "files\\rich__screen.json",
      "functions": [
        "__init__",
        "__rich_console__"
      ]
    },
    {
      "path": "rich\\segment.py",
      "file_ir": "files\\rich__segment.json",
      "functions": [
        "cell_length",
        "__rich_repr__",
        "__bool__",
        "is_control",
        "_split_cells",
        "split_cells",
        "line",
        "apply_style",
        "filter_control",
        "split_lines",
        "split_and_crop_lines",
        "adjust_line_length",
        "get_line_length",
        "get_shape",
        "set_shape",
        "align_top",
        "align_bottom",
        "align_middle",
        "simplify",
        "strip_links",
        "strip_styles",
        "remove_color",
        "divide",
        "__init__",
        "__rich_console__",
        "__init__",
        "__rich_console__"
      ]
    },
    {
      "path": "rich\\spinner.py",
      "file_ir": "files\\rich__spinner.json",
      "functions": [
        "__init__",
        "__rich_console__",
        "__rich_measure__",
        "render",
        "update"
      ]
    },
    {
      "path": "rich\\status.py",
      "file_ir": "files\\rich__status.json",
      "functions": [
        "__init__",
        "renderable",
        "console",
        "update",
        "start",
        "stop",
        "__rich__",
        "__enter__",
        "__exit__"
      ]
    },
    {
      "path": "rich\\style.py",
      "file_ir": "files\\rich__style.json",
      "functions": [
        "__init__",
        "__get__",
        "__init__",
        "_make_color",
        "null",
        "from_color",
        "from_meta",
        "on",
        "link_id",
        "__str__",
        "__bool__",
        "_make_ansi_codes",
        "normalize",
        "pick_first",
        "__rich_repr__",
        "__eq__",
        "__ne__",
        "__hash__",
        "color",
        "bgcolor",
        "link",
        "transparent_background",
        "background_style",
        "meta",
        "without_color",
        "parse",
        "get_html_style",
        "combine",
        "chain",
        "copy",
        "clear_meta_and_links",
        "update_link",
        "render",
        "test",
        "_add",
        "__add__",
        "__init__",
        "__repr__",
        "current",
        "push",
        "pop"
      ]
    },
    {
      "path": "rich\\styled.py",
      "file_ir": "files\\rich__styled.json",
      "functions": [
        "__init__",
        "__rich_console__",
        "__rich_measure__"
      ]
    },
    {
      "path": "rich\\syntax.py",
      "file_ir": "files\\rich__syntax.json",
      "functions": [
        "get_style_for_token",
        "get_background_style",
        "__init__",
        "get_style_for_token",
        "get_background_style",
        "__init__",
        "get_style_for_token",
        "get_background_style",
        "__get__",
        "__set__",
        "get_theme",
        "__init__",
        "from_path",
        "guess_lexer",
        "_get_base_style",
        "_get_token_color",
        "lexer",
        "default_lexer",
        "highlight",
        "line_tokenize",
        "tokens_to_spans",
        "stylize_range",
        "_get_line_numbers_color",
        "_numbers_column_width",
        "_get_number_styles",
        "__rich_measure__",
        "__rich_console__",
        "_get_syntax",
        "_apply_stylized_ranges",
        "_process_code",
        "_get_code_index_for_syntax_position"
      ]
    },
    {
      "path": "rich\\table.py",
      "file_ir": "files\\rich__table.json",
      "functions": [
        "copy",
        "cells",
        "flexible",
        "__init__",
        "grid",
        "expand",
        "expand",
        "_extra_width",
        "row_count",
        "get_row_style",
        "__rich_measure__",
        "padding",
        "padding",
        "add_column",
        "add_row",
        "add_cell",
        "add_section",
        "__rich_console__",
        "render_annotation",
        "_calculate_column_widths",
        "_collapse_widths",
        "_get_cells",
        "get_padding",
        "_get_padding_width",
        "_measure_column",
        "_render",
        "align_cell",
        "header"
      ]
    },
    {
      "path": "rich\\terminal_theme.py",
      "file_ir": "files\\rich__terminal_theme.json",
      "functions": [
        "__init__"
      ]
    },
    {
      "path": "rich\\text.py",
      "file_ir": "files\\rich__text.json",
      "functions": [
        "__repr__",
        "__bool__",
        "split",
        "move",
        "right_crop",
        "extend",
        "__init__",
        "__len__",
        "__bool__",
        "__str__",
        "__repr__",
        "__add__",
        "__eq__",
        "__contains__",
        "__getitem__",
        "get_text_at",
        "cell_len",
        "markup",
        "from_markup",
        "from_ansi",
        "styled",
        "assemble",
        "plain",
        "plain",
        "spans",
        "spans",
        "blank_copy",
        "copy",
        "stylize",
        "stylize_before",
        "apply_meta",
        "on",
        "remove_suffix",
        "get_style_at_offset",
        "extend_style",
        "highlight_regex",
        "highlight_words",
        "rstrip",
        "rstrip_end",
        "set_length",
        "__rich_console__",
        "__rich_measure__",
        "render",
        "get_current_style",
        "join",
        "iter_text",
        "expand_tabs",
        "truncate",
        "_trim_spans",
        "pad",
        "pad_left",
        "pad_right",
        "align",
        "append",
        "append_text",
        "append_tokens",
        "copy_styles",
        "split",
        "flatten_spans",
        "divide",
        "right_crop",
        "wrap",
        "fit",
        "detect_indentation",
        "with_indent_guides"
      ]
    },
    {
      "path": "rich\\theme.py",
      "file_ir": "files\\rich__theme.json",
      "functions": [
        "__init__",
        "config",
        "from_file",
        "read",
        "__init__",
        "push_theme",
        "pop_theme"
      ]
    },
    {
      "path": "rich\\themes.py",
      "file_ir": "files\\rich__themes.json",
      "functions": []
    },
    {
      "path": "rich\\traceback.py",
      "file_ir": "files\\rich__traceback.json",
      "functions": [
        "_iter_syntax_lines",
        "install",
        "excepthook",
        "ipy_excepthook_closure",
        "ipy_show_traceback",
        "ipy_display_traceback",
        "__init__",
        "from_exception",
        "extract",
        "safe_str",
        "get_locals",
        "__rich_console__",
        "render_stack",
        "_render_syntax_error",
        "_guess_lexer",
        "_render_stack",
        "render_locals",
        "bar",
        "foo",
        "error"
      ]
    },
    {
      "path": "rich\\tree.py",
      "file_ir": "files\\rich__tree.json",
      "functions": [
        "__init__",
        "add",
        "__rich_console__",
        "make_guide",
        "__rich_measure__"
      ]
    },
    {
      "path": "rich\\_cell_widths.py",
      "file_ir": "files\\rich___cell_widths.json",
      "functions": []
    },
    {
      "path": "rich\\_emoji_codes.py",
      "file_ir": "files\\rich___emoji_codes.json",
      "functions": []
    },
    {
      "path": "rich\\_emoji_replace.py",
      "file_ir": "files\\rich___emoji_replace.json",
      "functions": [
        "_emoji_replace",
        "do_replace"
      ]
    },
    {
      "path": "rich\\_export_format.py",
      "file_ir": "files\\rich___export_format.json",
      "functions": []
    },
    {
      "path": "rich\\_extension.py",
      "file_ir": "files\\rich___extension.json",
      "functions": [
        "load_ipython_extension"
      ]
    },
    {
      "path": "rich\\_fileno.py",
      "file_ir": "files\\rich___fileno.json",
      "functions": [
        "get_fileno"
      ]
    },
    {
      "path": "rich\\_inspect.py",
      "file_ir": "files\\rich___inspect.json",
      "functions": [
        "_first_paragraph",
        "__init__",
        "_make_title",
        "__rich__",
        "_get_signature",
        "_render",
        "sort_items",
        "safe_getattr",
        "_get_formatted_doc",
        "get_object_types_mro",
        "get_object_types_mro_as_strings",
        "is_object_one_of_types"
      ]
    },
    {
      "path": "rich\\_log_render.py",
      "file_ir": "files\\rich___log_render.json",
      "functions": [
        "__init__",
        "__call__"
      ]
    },
    {
      "path": "rich\\_loop.py",
      "file_ir": "files\\rich___loop.json",
      "functions": [
        "loop_first",
        "loop_last",
        "loop_first_last"
      ]
    },
    {
      "path": "rich\\_null_file.py",
      "file_ir": "files\\rich___null_file.json",
      "functions": [
        "close",
        "isatty",
        "read",
        "readable",
        "readline",
        "readlines",
        "seek",
        "seekable",
        "tell",
        "truncate",
        "writable",
        "writelines",
        "__next__",
        "__iter__",
        "__enter__",
        "__exit__",
        "write",
        "flush",
        "fileno"
      ]
    },
    {
      "path": "rich\\_palettes.py",
      "file_ir": "files\\rich___palettes.json",
      "functions": []
    },
    {
      "path": "rich\\_pick.py",
      "file_ir": "files\\rich___pick.json",
      "functions": [
        "pick_bool"
      ]
    },
    {
      "path": "rich\\_ratio.py",
      "file_ir": "files\\rich___ratio.json",
      "functions": [
        "ratio_resolve",
        "ratio_reduce",
        "ratio_distribute"
      ]
    },
    {
      "path": "rich\\_spinners.py",
      "file_ir": "files\\rich___spinners.json",
      "functions": []
    },
    {
      "path": "rich\\_stack.py",
      "file_ir": "files\\rich___stack.json",
      "functions": [
        "top",
        "push"
      ]
    },
    {
      "path": "rich\\_timer.py",
      "file_ir": "files\\rich___timer.json",
      "functions": [
        "timer"
      ]
    },
    {
      "path": "rich\\_win32_console.py",
      "file_ir": "files\\rich___win32_console.json",
      "functions": [
        "from_param",
        "GetStdHandle",
        "GetConsoleMode",
        "FillConsoleOutputCharacter",
        "FillConsoleOutputAttribute",
        "SetConsoleTextAttribute",
        "GetConsoleScreenBufferInfo",
        "SetConsoleCursorPosition",
        "GetConsoleCursorInfo",
        "SetConsoleCursorInfo",
        "SetConsoleTitle",
        "__init__",
        "cursor_position",
        "screen_size",
        "write_text",
        "write_styled",
        "move_cursor_to",
        "erase_line",
        "erase_end_of_line",
        "erase_start_of_line",
        "move_cursor_up",
        "move_cursor_down",
        "move_cursor_forward",
        "move_cursor_to_column",
        "move_cursor_backward",
        "hide_cursor",
        "show_cursor",
        "set_title",
        "_get_cursor_size"
      ]
    },
    {
      "path": "rich\\_windows.py",
      "file_ir": "files\\rich___windows.json",
      "functions": [
        "get_windows_console_features",
        "get_windows_console_features"
      ]
    },
    {
      "path": "rich\\_windows_renderer.py",
      "file_ir": "files\\rich___windows_renderer.json",
      "functions": [
        "legacy_windows_render"
      ]
    },
    {
      "path": "rich\\_wrap.py",
      "file_ir": "files\\rich___wrap.json",
      "functions": [
        "words",
        "divide_line"
      ]
    },
    {
      "path": "rich\\__init__.py",
      "file_ir": "files\\rich____init__.json",
      "functions": [
        "get_console",
        "reconfigure",
        "print",
        "print_json",
        "inspect"
      ]
    },
    {
      "path": "rich\\__main__.py",
      "file_ir": "files\\rich____main__.json",
      "functions": [
        "__rich_console__",
        "__rich_measure__",
        "make_test_card",
        "comparison"
      ]
    },
    {
      "path": "tests\\conftest.py",
      "file_ir": "files\\tests__conftest.json",
      "functions": [
        "reset_color_envvars"
      ]
    },
    {
      "path": "tests\\render.py",
      "file_ir": "files\\tests__render.json",
      "functions": [
        "replace_link_ids",
        "render"
      ]
    },
    {
      "path": "tests\\test_align.py",
      "file_ir": "files\\tests__test_align.json",
      "functions": [
        "test_bad_align_legal",
        "test_repr",
        "test_align_left",
        "test_align_center",
        "test_align_right",
        "test_align_top",
        "test_align_middle",
        "test_align_bottom",
        "test_align_center_middle",
        "test_align_fit",
        "test_align_right_style",
        "test_measure",
        "test_align_no_pad",
        "test_align_width",
        "test_shortcuts",
        "test_vertical_center"
      ]
    },
    {
      "path": "tests\\test_ansi.py",
      "file_ir": "files\\tests__test_ansi.json",
      "functions": [
        "test_decode",
        "test_decode_example",
        "test_decode_issue_2688",
        "test_strip_private_escape_sequences"
      ]
    },
    {
      "path": "tests\\test_bar.py",
      "file_ir": "files\\tests__test_bar.json",
      "functions": [
        "test_init",
        "test_update",
        "test_render",
        "test_measure",
        "test_zero_total",
        "test_pulse",
        "test_get_pulse_segments"
      ]
    },
    {
      "path": "tests\\test_block_bar.py",
      "file_ir": "files\\tests__test_block_bar.json",
      "functions": [
        "test_repr",
        "test_render",
        "test_measure",
        "test_zero_total"
      ]
    },
    {
      "path": "tests\\test_box.py",
      "file_ir": "files\\tests__test_box.json",
      "functions": [
        "test_str",
        "test_repr",
        "test_get_top",
        "test_get_row",
        "test_get_bottom",
        "test_box_substitute_for_same_box",
        "test_box_substitute_for_different_box_legacy_windows",
        "test_box_substitute_for_different_box_ascii_encoding"
      ]
    },
    {
      "path": "tests\\test_card.py",
      "file_ir": "files\\tests__test_card.json",
      "functions": [
        "replace_link_ids",
        "render",
        "test_card_render"
      ]
    },
    {
      "path": "tests\\test_cells.py",
      "file_ir": "files\\tests__test_cells.json",
      "functions": [
        "test_cell_len_long_string",
        "test_cell_len_short_string",
        "test_set_cell_size",
        "test_set_cell_size_infinite",
        "test_chop_cells",
        "test_chop_cells_double_width_boundary",
        "test_chop_cells_mixed_width",
        "test_is_single_cell_widths"
      ]
    },
    {
      "path": "tests\\test_color.py",
      "file_ir": "files\\tests__test_color.json",
      "functions": [
        "test_str",
        "test_repr",
        "test_color_system_repr",
        "test_rich",
        "test_system",
        "test_windows",
        "test_truecolor",
        "test_parse_success",
        "test_from_triplet",
        "test_from_rgb",
        "test_from_ansi",
        "test_default",
        "test_parse_error",
        "test_get_ansi_codes",
        "test_downgrade",
        "test_parse_rgb_hex",
        "test_blend_rgb"
      ]
    },
    {
      "path": "tests\\test_color_triplet.py",
      "file_ir": "files\\tests__test_color_triplet.json",
      "functions": [
        "test_hex",
        "test_rgb",
        "test_normalized"
      ]
    },
    {
      "path": "tests\\test_columns.py",
      "file_ir": "files\\tests__test_columns.json",
      "functions": [
        "render",
        "test_render"
      ]
    },
    {
      "path": "tests\\test_columns_align.py",
      "file_ir": "files\\tests__test_columns_align.json",
      "functions": [
        "render",
        "test_align"
      ]
    },
    {
      "path": "tests\\test_console.py",
      "file_ir": "files\\tests__test_console.json",
      "functions": [
        "test_dumb_terminal",
        "test_soft_wrap",
        "test_16color_terminal",
        "test_truecolor_terminal",
        "test_kitty_terminal",
        "test_console_options_update",
        "test_console_options_update_height",
        "test_init",
        "test_size",
        "test_size_can_fall_back_to_std_descriptors",
        "get_terminal_size_mock_impl",
        "test_repr",
        "test_print",
        "test_print_multiple",
        "test_print_text",
        "test_print_text_multiple",
        "test_print_json",
        "test_print_json_error",
        "test_print_json_data",
        "test_print_json_ensure_ascii",
        "test_print_json_with_default_ensure_ascii",
        "test_print_json_indent_none",
        "test_console_null_file",
        "test_log",
        "test_log_milliseconds",
        "time_formatter",
        "test_print_empty",
        "test_markup_highlight",
        "test_print_style",
        "test_show_cursor",
        "test_clear",
        "test_clear_no_terminal",
        "test_get_style",
        "test_get_style_default",
        "test_get_style_error",
        "test_render_error",
        "test_control",
        "test_capture",
        "test_input",
        "fake_input",
        "test_input_password",
        "fake_input",
        "test_status",
        "test_justify_none",
        "test_justify_left",
        "test_justify_center",
        "test_justify_right",
        "test_justify_renderable_none",
        "test_justify_renderable_left",
        "test_justify_renderable_center",
        "test_justify_renderable_right",
        "__rich_console__",
        "test_render_broken_renderable",
        "test_export_text",
        "test_export_html",
        "test_export_html_inline",
        "test_export_svg",
        "test_export_svg_specified_unique_id",
        "test_save_svg",
        "test_save_text",
        "test_save_html",
        "test_no_wrap",
        "test_soft_wrap",
        "test_unicode_error",
        "test_bell",
        "test_pager",
        "mock_pager",
        "test_out",
        "test_render_group",
        "renderable",
        "test_render_group_fit",
        "renderable",
        "test_get_time",
        "test_console_style",
        "test_no_color",
        "test_quiet",
        "test_screen",
        "test_screen_update",
        "test_height",
        "test_columns_env",
        "test_lines_env",
        "test_screen_update_class",
        "test_is_alt_screen",
        "test_set_console_title",
        "test_update_screen",
        "test_update_screen_lines",
        "test_update_options_markup",
        "test_print_width_zero",
        "test_size_properties",
        "test_print_newline_start",
        "test_is_terminal_broken_file",
        "_mock_isatty",
        "test_detect_color_system",
        "test_reset_height",
        "__rich_console__",
        "test_render_lines_height_minus_vertical_pad_is_negative",
        "test_recording_no_stdout_and_no_stderr_files",
        "test_capturing_no_stdout_and_no_stderr_files",
        "test_force_color",
        "test_force_color_jupyter",
        "test_force_color",
        "test_reenable_highlighting",
        "test_brokenpipeerror",
        "test_capture_and_record",
        "test_tty_interactive",
        "test_tty_compatible",
        "__init__",
        "isatty",
        "__init__",
        "isatty"
      ]
    },
    {
      "path": "tests\\test_constrain.py",
      "file_ir": "files\\tests__test_constrain.json",
      "functions": [
        "test_width_of_none"
      ]
    },
    {
      "path": "tests\\test_containers.py",
      "file_ir": "files\\tests__test_containers.json",
      "functions": [
        "test_renderables_measure",
        "test_renderables_empty",
        "test_lines_rich_console",
        "test_lines_justify"
      ]
    },
    {
      "path": "tests\\test_control.py",
      "file_ir": "files\\tests__test_control.json",
      "functions": [
        "test_control",
        "test_strip_control_codes",
        "test_escape_control_codes",
        "test_control_move_to",
        "test_control_move",
        "test_move_to_column",
        "test_title"
      ]
    },
    {
      "path": "tests\\test_emoji.py",
      "file_ir": "files\\tests__test_emoji.json",
      "functions": [
        "test_no_emoji",
        "test_str_repr",
        "test_replace",
        "test_render",
        "test_variant",
        "test_variant_non_default"
      ]
    },
    {
      "path": "tests\\test_filesize.py",
      "file_ir": "files\\tests__test_filesize.json",
      "functions": [
        "test_traditional",
        "test_pick_unit_and_suffix"
      ]
    },
    {
      "path": "tests\\test_file_proxy.py",
      "file_ir": "files\\tests__test_file_proxy.json",
      "functions": [
        "test_empty_bytes",
        "test_flush",
        "test_new_lines"
      ]
    },
    {
      "path": "tests\\test_getfileno.py",
      "file_ir": "files\\tests__test_getfileno.json",
      "functions": [
        "test_get_fileno",
        "fileno",
        "test_get_fileno_missing",
        "test_get_fileno_broken",
        "fileno"
      ]
    },
    {
      "path": "tests\\test_highlighter.py",
      "file_ir": "files\\tests__test_highlighter.json",
      "functions": [
        "test_wrong_type",
        "test_highlight_regex",
        "test_highlight_json_with_indent",
        "test_highlight_json_string_only",
        "test_highlight_json_empty_string_only",
        "test_highlight_json_no_indent",
        "test_highlight_iso8601_regex"
      ]
    },
    {
      "path": "tests\\test_inspect.py",
      "file_ir": "files\\tests__test_inspect.json",
      "functions": [
        "render",
        "__str__",
        "__init__",
        "broken",
        "method",
        "__dir__",
        "test_render",
        "test_inspect_text",
        "test_inspect_empty_dict",
        "test_inspect_builtin_function_except_python311",
        "test_inspect_builtin_function_only_python311",
        "test_inspect_coroutine",
        "coroutine",
        "test_inspect_integer",
        "test_inspect_integer_with_value",
        "test_inspect_integer_with_methods_python38_and_python39",
        "test_inspect_integer_with_methods_python310only",
        "test_inspect_integer_with_methods_python311",
        "test_broken_call_attr",
        "__repr__",
        "test_inspect_swig_edge_case",
        "__class__",
        "test_inspect_module_with_class",
        "function",
        "test_can_handle_special_characters_in_docstrings",
        "test_object_types_mro",
        "test_object_types_mro_as_strings",
        "test_object_is_one_of_types"
      ]
    },
    {
      "path": "tests\\test_json.py",
      "file_ir": "files\\tests__test_json.json",
      "functions": [
        "test_print_json_data_with_default"
      ]
    },
    {
      "path": "tests\\test_jupyter.py",
      "file_ir": "files\\tests__test_jupyter.json",
      "functions": [
        "test_jupyter",
        "test_jupyter_columns_env",
        "test_jupyter_lines_env"
      ]
    },
    {
      "path": "tests\\test_layout.py",
      "file_ir": "files\\tests__test_layout.json",
      "functions": [
        "test_no_layout",
        "test_add_split",
        "test_unsplit",
        "test_render",
        "test_tree",
        "test_refresh_screen"
      ]
    },
    {
      "path": "tests\\test_live.py",
      "file_ir": "files\\tests__test_live.json",
      "functions": [
        "create_capture_console",
        "test_live_state",
        "test_growing_display",
        "test_growing_display_transient",
        "test_growing_display_overflow_ellipsis",
        "test_growing_display_overflow_crop",
        "test_growing_display_overflow_visible",
        "test_growing_display_autorefresh",
        "test_growing_display_console_redirect",
        "test_growing_display_file_console",
        "test_live_screen"
      ]
    },
    {
      "path": "tests\\test_live_render.py",
      "file_ir": "files\\tests__test_live_render.json",
      "functions": [
        "live_render",
        "test_renderable",
        "test_position_cursor",
        "test_restore_cursor",
        "test_rich_console"
      ]
    },
    {
      "path": "tests\\test_log.py",
      "file_ir": "files\\tests__test_log.json",
      "functions": [
        "replace_link_ids",
        "render_log",
        "test_log",
        "test_log_caller_frame_info",
        "test_justify"
      ]
    },
    {
      "path": "tests\\test_logging.py",
      "file_ir": "files\\tests__test_logging.json",
      "functions": [
        "test_exception",
        "test_exception_with_extra_lines",
        "test_stderr_and_stdout_are_none",
        "mock_handle_error",
        "test_markup_and_highlight"
      ]
    },
    {
      "path": "tests\\test_markdown.py",
      "file_ir": "files\\tests__test_markdown.json",
      "functions": [
        "replace_link_ids",
        "render",
        "test_markdown_render",
        "test_inline_code",
        "test_markdown_table",
        "test_inline_styles_in_table",
        "test_inline_styles_with_justification",
        "test_partial_table",
        "test_table_with_empty_cells"
      ]
    },
    {
      "path": "tests\\test_markdown_no_hyperlinks.py",
      "file_ir": "files\\tests__test_markdown_no_hyperlinks.json",
      "functions": [
        "replace_link_ids",
        "render",
        "test_markdown_render"
      ]
    },
    {
      "path": "tests\\test_markup.py",
      "file_ir": "files\\tests__test_markup.json",
      "functions": [
        "test_re_no_match",
        "test_re_match",
        "test_escape",
        "test_escape_backslash_end",
        "test_render_escape",
        "test_parse",
        "test_parse_link",
        "test_render",
        "test_render_not_tags",
        "test_render_link",
        "test_render_combine",
        "test_render_overlap",
        "test_adjoint",
        "test_render_close",
        "test_render_close_ambiguous",
        "test_markup_error",
        "test_markup_escape",
        "test_escape_escape",
        "test_events",
        "test_events_broken",
        "test_render_meta"
      ]
    },
    {
      "path": "tests\\test_measure.py",
      "file_ir": "files\\tests__test_measure.json",
      "functions": [
        "test_span",
        "test_no_renderable",
        "test_measure_renderables",
        "test_clamp"
      ]
    },
    {
      "path": "tests\\test_null_file.py",
      "file_ir": "files\\tests__test_null_file.json",
      "functions": [
        "test_null_file"
      ]
    },
    {
      "path": "tests\\test_padding.py",
      "file_ir": "files\\tests__test_padding.json",
      "functions": [
        "test_repr",
        "test_indent",
        "test_unpack",
        "test_expand_false",
        "test_rich_console"
      ]
    },
    {
      "path": "tests\\test_palette.py",
      "file_ir": "files\\tests__test_palette.json",
      "functions": [
        "test_rich_cast"
      ]
    },
    {
      "path": "tests\\test_panel.py",
      "file_ir": "files\\tests__test_panel.json",
      "functions": [
        "render",
        "test_render_panel",
        "test_console_width",
        "test_fixed_width",
        "test_render_size",
        "test_title_text",
        "test_title_text_with_border_color",
        "test_title_text_with_panel_background"
      ]
    },
    {
      "path": "tests\\test_pick.py",
      "file_ir": "files\\tests__test_pick.json",
      "functions": [
        "test_pick_bool"
      ]
    },
    {
      "path": "tests\\test_pretty.py",
      "file_ir": "files\\tests__test_pretty.json",
      "functions": [
        "test_install",
        "test_install_max_depth",
        "test_ipy_display_hook__repr_html",
        "_repr_html_",
        "test_ipy_display_hook__multiple_special_reprs",
        "__repr__",
        "_repr_latex_",
        "_repr_html_",
        "test_ipy_display_hook__no_special_repr_methods",
        "__repr__",
        "test_ipy_display_hook__special_repr_raises_exception",
        "_repr_markdown_",
        "_repr_latex_",
        "_repr_html_",
        "__repr__",
        "test_ipy_display_hook__console_renderables_on_newline",
        "test_pretty",
        "test_pretty_dataclass",
        "test_empty_dataclass",
        "test_pretty_namedtuple",
        "test_pretty_namedtuple_length_one_no_trailing_comma",
        "test_pretty_namedtuple_empty",
        "test_pretty_namedtuple_custom_repr",
        "__repr__",
        "test_pretty_namedtuple_fields_invalid_type",
        "test_pretty_namedtuple_max_depth",
        "test_small_width",
        "test_ansi_in_pretty_repr",
        "__repr__",
        "test_broken_repr",
        "__repr__",
        "test_broken_getattr",
        "__getattr__",
        "__repr__",
        "test_reference_cycle_container",
        "test_reference_cycle_namedtuple",
        "test_reference_cycle_dataclass",
        "test_reference_cycle_attrs",
        "test_reference_cycle_custom_repr",
        "__init__",
        "__rich_repr__",
        "test_max_depth",
        "test_max_depth_rich_repr",
        "__init__",
        "__rich_repr__",
        "__init__",
        "__rich_repr__",
        "test_max_depth_attrs",
        "test_max_depth_dataclass",
        "test_defaultdict",
        "test_deque",
        "test_array",
        "test_tuple_of_one",
        "test_node",
        "test_indent_lines",
        "test_pprint",
        "test_pprint_max_values",
        "test_pprint_max_items",
        "test_pprint_max_string",
        "test_tuples",
        "test_newline",
        "test_empty_repr",
        "__repr__",
        "test_attrs",
        "test_attrs_empty",
        "test_attrs_broken",
        "test_attrs_broken_310",
        "test_user_dict",
        "__repr__",
        "test_lying_attribute",
        "__getattr__",
        "test_measure_pretty",
        "test_tuple_rich_repr",
        "__rich_repr__",
        "test_tuple_rich_repr_default",
        "__rich_repr__",
        "test_dataclass_no_attribute"
      ]
    },
    {
      "path": "tests\\test_progress.py",
      "file_ir": "files\\tests__test_progress.json",
      "functions": [
        "__init__",
        "__call__",
        "tick",
        "test_bar_columns",
        "test_text_column",
        "test_time_elapsed_column",
        "test_time_remaining_column",
        "test_compact_time_remaining_column",
        "test_time_remaining_column_elapsed_when_finished",
        "test_renderable_column",
        "test_spinner_column",
        "get_time",
        "test_download_progress_uses_decimal_units",
        "test_download_progress_uses_binary_units",
        "test_task_ids",
        "test_finished",
        "make_progress",
        "fake_time",
        "render_progress",
        "test_expand_bar",
        "test_progress_with_none_total_renders_a_pulsing_bar",
        "test_render",
        "test_track",
        "test_progress_track",
        "test_columns",
        "test_using_default_columns",
        "test_task_create",
        "test_task_start",
        "get_time",
        "test_task_zero_total",
        "test_progress_create",
        "test_track_thread",
        "test_reset",
        "test_progress_max_refresh",
        "get_time",
        "test_live_is_started_if_progress_is_enabled",
        "test_live_is_not_started_if_progress_is_disabled",
        "test_no_output_if_progress_is_disabled",
        "test_open",
        "test_open_text_mode",
        "test_wrap_file",
        "test_wrap_file_task_total",
        "test_task_progress_column_speed"
      ]
    },
    {
      "path": "tests\\test_prompt.py",
      "file_ir": "files\\tests__test_prompt.json",
      "functions": [
        "test_prompt_str",
        "test_prompt_str_case_insensitive",
        "test_prompt_str_default",
        "test_prompt_int",
        "test_prompt_confirm_no",
        "test_prompt_confirm_yes",
        "test_prompt_confirm_default"
      ]
    },
    {
      "path": "tests\\test_protocol.py",
      "file_ir": "files\\tests__test_protocol.json",
      "functions": [
        "__rich__",
        "test_rich_cast",
        "__getattr__",
        "__repr__",
        "test_rich_cast_fake",
        "test_rich_cast_container",
        "test_abc",
        "test_cast_deep",
        "__rich__",
        "__rich__",
        "test_cast_recursive",
        "__rich__",
        "__repr__",
        "__rich__",
        "__repr__"
      ]
    },
    {
      "path": "tests\\test_ratio.py",
      "file_ir": "files\\tests__test_ratio.json",
      "functions": [
        "test_ratio_reduce",
        "test_ratio_resolve"
      ]
    },
    {
      "path": "tests\\test_repr.py",
      "file_ir": "files\\tests__test_repr.json",
      "functions": [
        "__init__",
        "__rich_repr__",
        "__init__",
        "__init__",
        "__init__",
        "__rich_repr__",
        "__init__",
        "__eq__",
        "__ne__",
        "__init__",
        "test_rich_repr",
        "test_rich_repr_positional_only",
        "test_rich_angular",
        "test_rich_repr_auto",
        "test_rich_repr_auto_angular",
        "test_broken_egg",
        "test_rich_pretty",
        "test_rich_pretty_angular"
      ]
    },
    {
      "path": "tests\\test_rich_print.py",
      "file_ir": "files\\tests__test_rich_print.json",
      "functions": [
        "test_get_console",
        "test_reconfigure_console",
        "test_rich_print",
        "test_rich_print_json",
        "test_rich_print_json_round_trip",
        "test_rich_print_json_no_truncation",
        "test_rich_print_X"
      ]
    },
    {
      "path": "tests\\test_rule.py",
      "file_ir": "files\\tests__test_rule.json",
      "functions": [
        "test_rule",
        "test_rule_error",
        "test_rule_align",
        "test_rule_cjk",
        "test_rule_not_enough_space_for_title_text",
        "test_rule_center_aligned_title_not_enough_space_for_rule",
        "test_rule_side_aligned_not_enough_space_for_rule",
        "test_rule_just_enough_width_available_for_title",
        "test_characters",
        "test_repr",
        "test_error"
      ]
    },
    {
      "path": "tests\\test_rule_in_table.py",
      "file_ir": "files\\tests__test_rule_in_table.json",
      "functions": [
        "test_rule_in_unexpanded_table",
        "test_rule_in_expanded_table",
        "test_rule_in_ratio_table"
      ]
    },
    {
      "path": "tests\\test_screen.py",
      "file_ir": "files\\tests__test_screen.json",
      "functions": [
        "test_screen"
      ]
    },
    {
      "path": "tests\\test_segment.py",
      "file_ir": "files\\tests__test_segment.json",
      "functions": [
        "test_repr",
        "test_line",
        "test_apply_style",
        "test_split_lines",
        "test_split_and_crop_lines",
        "test_adjust_line_length",
        "test_get_line_length",
        "test_get_shape",
        "test_set_shape",
        "test_simplify",
        "test_filter_control",
        "test_strip_styles",
        "test_strip_links",
        "test_remove_color",
        "test_is_control",
        "test_segments_renderable",
        "test_divide",
        "test_divide_complex",
        "test_divide_emoji",
        "test_divide_edge",
        "test_divide_edge_2",
        "test_split_cells_emoji",
        "test_split_cells_mixed",
        "test_split_cells_doubles",
        "test_split_cells_single",
        "test_segment_lines_renderable",
        "test_align_top",
        "test_align_middle",
        "test_align_bottom"
      ]
    },
    {
      "path": "tests\\test_spinner.py",
      "file_ir": "files\\tests__test_spinner.json",
      "functions": [
        "test_spinner_create",
        "test_spinner_render",
        "get_time",
        "test_spinner_update",
        "get_time",
        "test_rich_measure",
        "test_spinner_markup"
      ]
    },
    {
      "path": "tests\\test_stack.py",
      "file_ir": "files\\tests__test_stack.json",
      "functions": [
        "test_stack"
      ]
    },
    {
      "path": "tests\\test_status.py",
      "file_ir": "files\\tests__test_status.json",
      "functions": [
        "test_status",
        "test_renderable"
      ]
    },
    {
      "path": "tests\\test_style.py",
      "file_ir": "files\\tests__test_style.json",
      "functions": [
        "test_str",
        "test_ansi_codes",
        "test_repr",
        "test_eq",
        "test_hash",
        "test_empty",
        "test_bool",
        "test_color_property",
        "test_bgcolor_property",
        "test_parse",
        "test_link_id",
        "test_get_html_style",
        "test_chain",
        "test_copy",
        "test_render",
        "test_test",
        "test_add",
        "test_iadd",
        "test_style_stack",
        "test_pick_first",
        "test_background_style",
        "test_without_color",
        "test_meta",
        "test_from_meta",
        "test_on",
        "test_clear_meta_and_links",
        "test_clear_meta_and_links_clears_hash"
      ]
    },
    {
      "path": "tests\\test_styled.py",
      "file_ir": "files\\tests__test_styled.json",
      "functions": [
        "test_styled"
      ]
    },
    {
      "path": "tests\\test_syntax.py",
      "file_ir": "files\\tests__test_syntax.json",
      "functions": [
        "test_blank_lines",
        "test_python_render",
        "test_python_render_simple",
        "test_python_render_simple_passing_lexer_instance",
        "test_python_render_simple_indent_guides",
        "test_python_render_line_range_indent_guides",
        "test_python_render_indent_guides",
        "test_pygments_syntax_theme_non_str",
        "test_pygments_syntax_theme",
        "test_get_line_color_none",
        "test_highlight_background_color",
        "test_get_number_styles",
        "test_get_style_for_token",
        "test_option_no_wrap",
        "test_syntax_highlight_ranges",
        "test_ansi_theme",
        "test_from_path",
        "test_from_path_unknown_lexer",
        "test_from_path_lexer_override",
        "test_from_path_lexer_override_invalid_lexer",
        "test_syntax_guess_lexer",
        "test_syntax_padding",
        "test_syntax_measure",
        "test_background_color_override_includes_padding",
        "test_padding_plus_wrap"
      ]
    },
    {
      "path": "tests\\test_table.py",
      "file_ir": "files\\tests__test_table.json",
      "functions": [
        "render_tables",
        "test_render_table",
        "test_not_renderable",
        "test_init_append_column",
        "test_rich_measure",
        "test_min_width",
        "test_no_columns",
        "test_get_row_style",
        "test_vertical_align_top",
        "make_table",
        "test_table_show_header_false_substitution",
        "test_section",
        "test_placement_table_box_elements",
        "test_columns_highlight_added_by_add_row"
      ]
    },
    {
      "path": "tests\\test_text.py",
      "file_ir": "files\\tests__test_text.json",
      "functions": [
        "test_span",
        "test_span_split",
        "test_span_move",
        "test_span_right_crop",
        "test_len",
        "test_cell_len",
        "test_bool",
        "test_str",
        "test_repr",
        "test_add",
        "test_eq",
        "test_contain",
        "test_plain_property",
        "test_plain_property_setter",
        "test_from_markup",
        "test_from_ansi",
        "test_copy",
        "test_rstrip",
        "test_rstrip_end",
        "test_stylize",
        "test_stylize_before",
        "test_stylize_negative_index",
        "test_highlight_regex",
        "test_highlight_regex_callable",
        "get_style",
        "test_highlight_words",
        "test_set_length",
        "test_console_width",
        "test_join",
        "test_trim_spans",
        "test_pad_left",
        "test_pad_right",
        "test_append",
        "test_append_text",
        "test_end",
        "test_split",
        "test_split_spans",
        "test_divide",
        "test_right_crop",
        "test_wrap_3",
        "test_wrap_4",
        "test_wrap_wrapped_word_length_greater_than_available_width",
        "test_wrap_cjk",
        "test_wrap_cjk_width_mid_character",
        "test_wrap_cjk_mixed",
        "test_wrap_long",
        "test_wrap_overflow",
        "test_wrap_overflow_long",
        "test_wrap_long_words",
        "test_wrap_long_words_2",
        "test_wrap_long_words_followed_by_other_words",
        "test_wrap_long_word_preceeded_by_word_of_full_line_length",
        "test_wrap_multiple_consecutive_spaces",
        "test_wrap_long_words_justify_left",
        "test_wrap_leading_and_trailing_whitespace",
        "test_no_wrap_no_crop",
        "test_fit",
        "test_wrap_tabs",
        "test_render",
        "test_render_simple",
        "test_print",
        "test_print_sep_end",
        "test_tabs_to_spaces",
        "test_tabs_to_spaces_spans",
        "test_markup_switch",
        "test_emoji",
        "test_emoji_switch",
        "test_assemble",
        "test_assemble_meta",
        "test_styled",
        "test_strip_control_codes",
        "test_get_style_at_offset",
        "test_truncate_ellipsis",
        "test_truncate_ellipsis_pad",
        "test_pad",
        "test_align_left",
        "test_align_right",
        "test_align_center",
        "test_detect_indentation",
        "test_indentation_guides",
        "test_slice",
        "test_wrap_invalid_style",
        "test_apply_meta",
        "test_on",
        "test_markup_property",
        "test_extend_style",
        "test_append_tokens",
        "test_append_loop_regression"
      ]
    },
    {
      "path": "tests\\test_theme.py",
      "file_ir": "files\\tests__test_theme.json",
      "functions": [
        "test_inherit",
        "test_config",
        "test_from_file",
        "test_read",
        "test_theme_stack"
      ]
    },
    {
      "path": "tests\\test_tools.py",
      "file_ir": "files\\tests__test_tools.json",
      "functions": [
        "test_loop_first",
        "test_loop_last",
        "test_loop_first_last",
        "test_ratio_distribute"
      ]
    },
    {
      "path": "tests\\test_traceback.py",
      "file_ir": "files\\tests__test_traceback.json",
      "functions": [
        "test_handler",
        "level1",
        "level2",
        "test_capture",
        "test_no_exception",
        "get_exception",
        "bar",
        "foo",
        "test_print_exception",
        "test_print_exception_no_msg",
        "test_print_exception_locals",
        "test_syntax_error",
        "test_nested_exception",
        "test_caused_exception",
        "test_filename_with_bracket",
        "test_filename_not_a_file",
        "test_traceback_console_theme_applies",
        "test_broken_str",
        "__str__",
        "test_guess_lexer",
        "test_guess_lexer_yaml_j2",
        "test_recursive",
        "foo",
        "bar",
        "test_suppress",
        "test_rich_traceback_omit_optional_local_flag",
        "level1",
        "level2",
        "level3",
        "test_traceback_finely_grained_missing",
        "test_traceback_finely_grained",
        "test_notes",
        "test_recursive_exception",
        "foo",
        "bar"
      ]
    },
    {
      "path": "tests\\test_tree.py",
      "file_ir": "files\\tests__test_tree.json",
      "functions": [
        "test_render_single_node",
        "test_render_single_branch",
        "test_render_double_branch",
        "test_render_ascii",
        "encoding",
        "test_render_tree_non_win32",
        "test_render_tree_win32",
        "test_render_tree_hide_root_non_win32",
        "test_render_tree_hide_root_win32",
        "test_tree_measure"
      ]
    },
    {
      "path": "tests\\test_win32_console.py",
      "file_ir": "files\\tests__test_win32_console.json",
      "functions": [
        "test_windows_coordinates_to_ctype",
        "win32_handle",
        "win32_console_getters",
        "stub_console_cursor_info",
        "test_cursor_position",
        "test_screen_size",
        "test_write_text",
        "test_write_styled",
        "test_write_styled_bold",
        "test_write_styled_reverse",
        "test_write_styled_reverse",
        "test_write_styled_no_foreground_color",
        "test_write_styled_no_background_color",
        "test_erase_line",
        "test_erase_end_of_line",
        "test_erase_start_of_line",
        "test_move_cursor_to",
        "test_move_cursor_to_out_of_bounds_row",
        "test_move_cursor_to_out_of_bounds_col",
        "test_move_cursor_up",
        "test_move_cursor_down",
        "test_move_cursor_forward",
        "test_move_cursor_forward_newline_wrap",
        "test_move_cursor_to_column",
        "test_move_cursor_backward",
        "test_move_cursor_backward_prev_line_wrap",
        "test_hide_cursor",
        "test_show_cursor",
        "test_set_title",
        "test_set_title_too_long"
      ]
    },
    {
      "path": "tests\\test_windows_renderer.py",
      "file_ir": "files\\tests__test_windows_renderer.json",
      "functions": [
        "legacy_term_mock",
        "test_text_only",
        "test_text_multiple_segments",
        "test_text_with_style",
        "test_control_cursor_move_to",
        "test_control_carriage_return",
        "test_control_home",
        "test_control_cursor_single_cell_movement",
        "test_control_erase_line",
        "test_control_show_cursor",
        "test_control_hide_cursor",
        "test_control_cursor_move_to_column",
        "test_control_set_terminal_window_title"
      ]
    },
    {
      "path": "tests\\_card_render.py",
      "file_ir": "files\\tests___card_render.json",
      "functions": []
    },
    {
      "path": "tests\\__init__.py",
      "file_ir": "files\\tests____init__.json",
      "functions": []
    },
    {
      "path": "tools\\make_emoji.py",
      "file_ir": "files\\tools__make_emoji.json",
      "functions": []
    },
    {
      "path": "tools\\make_terminal_widths.py",
      "file_ir": "files\\tools__make_terminal_widths.json",
      "functions": [
        "make_widths_table",
        "get_cell_size",
        "test",
        "run"
      ]
    },
    {
      "path": "tools\\profile_divide.py",
      "file_ir": "files\\tools__profile_divide.json",
      "functions": []
    },
    {
      "path": "tools\\profile_pretty.py",
      "file_ir": "files\\tools__profile_pretty.json",
      "functions": []
    },
    {
      "path": "tools\\stress_test_pretty.py",
      "file_ir": "files\\tools__stress_test_pretty.json",
      "functions": []
    }
  ],
  "dependencies": [
    "import setuptools",
    "from io import StringIO",
    "from benchmarks import snippets",
    "from rich.color import Color, ColorSystem",
    "from rich.console import Console",
    "from rich.pretty import Pretty",
    "from rich.segment import Segment",
    "from rich.style import Style",
    "from rich.syntax import Syntax",
    "from rich.table import Table",
    "from rich.text import Text",
    "import sphinx_rtd_theme",
    "from importlib.metadata import Distribution",
    "from typing import List",
    "import attr",
    "from rich.console import Console",
    "from rich.pretty import Pretty",
    "from rich.table import Column, Table",
    "from rich.text import Text",
    "import math",
    "from rich.align import Align",
    "from rich.bar import Bar",
    "from rich.color import Color",
    "from rich import print",
    "import json",
    "from urllib.request import urlopen",
    "from rich.console import Console",
    "from rich.columns import Columns",
    "from rich.panel import Panel",
    "import os",
    "import shutil",
    "import sys",
    "from rich.progress import Progress",
    "import os.path",
    "import sys",
    "from concurrent.futures import ThreadPoolExecutor",
    "import signal",
    "from functools import partial",
    "from threading import Event",
    "from typing import Iterable",
    "from urllib.request import urlopen",
    "from rich.progress import (\n    BarColumn,\n    DownloadColumn,\n    Progress,\n    TaskID,\n    TextColumn,\n    TimeRemainingColumn,\n    TransferSpeedColumn,\n)",
    "import time",
    "from rich.console import Group",
    "from rich.panel import Panel",
    "from rich.live import Live",
    "from rich.progress import (\n    BarColumn,\n    Progress,\n    SpinnerColumn,\n    TextColumn,\n    TimeElapsedColumn,\n)",
    "from typing import List, Tuple",
    "from rich.console import Console",
    "from rich.console import Console",
    "from rich.table import Table",
    "from time import sleep",
    "from urllib.request import urlopen",
    "from rich.progress import wrap_file",
    "from datetime import datetime",
    "from rich import box",
    "from rich.align import Align",
    "from rich.console import Console, Group",
    "from rich.layout import Layout",
    "from rich.panel import Panel",
    "from rich.progress import BarColumn, Progress, SpinnerColumn, TextColumn",
    "from rich.syntax import Syntax",
    "from rich.table import Table",
    "from time import sleep",
    "from rich.live import Live",
    "from rich import print",
    "from rich.console import Group",
    "from rich.panel import Panel",
    "from rich import print",
    "from rich.console import group",
    "from rich.panel import Panel",
    "from rich.console import Console",
    "from rich.highlighter import RegexHighlighter",
    "from rich.theme import Theme",
    "from time import sleep",
    "from rich.panel import Panel",
    "from rich.progress import Progress",
    "from rich.console import Console",
    "from rich.console import Console",
    "from rich.panel import Panel",
    "from datetime import datetime",
    "from time import sleep",
    "from rich.align import Align",
    "from rich.console import Console",
    "from rich.layout import Layout",
    "from rich.live import Live",
    "from rich.text import Text",
    "from rich import print",
    "import os",
    "import sys",
    "from rich import print",
    "from rich.columns import Columns",
    "from rich.text import Text",
    "from time import sleep",
    "from rich.live import Live",
    "from rich.panel import Panel",
    "from rich.progress import Progress, SpinnerColumn, BarColumn, TextColumn",
    "from rich.table import Table",
    "import time",
    "from rich.console import Console",
    "from rich.style import Style",
    "from rich.theme import Theme",
    "from rich.highlighter import RegexHighlighter",
    "from typing import List",
    "from rich.console import Console, OverflowMethod",
    "from rich import print",
    "from rich.padding import Padding",
    "import argparse",
    "import calendar",
    "from datetime import datetime",
    "from rich.align import Align",
    "from rich import box",
    "from rich.columns import Columns",
    "from rich.console import Console",
    "from rich.table import Table",
    "from rich.text import Text",
    "from random import randint",
    "from rich import print",
    "from rich.highlighter import Highlighter",
    "from rich.console import Console",
    "import rich.repr",
    "from rich import print",
    "from rich.console import Console",
    "from rich.table import Table",
    "import os",
    "import webbrowser",
    "from time import sleep",
    "from rich.align import Align",
    "from rich.console import Console",
    "from rich.panel import Panel",
    "from time import sleep",
    "from rich.columns import Columns",
    "from rich.panel import Panel",
    "from rich.live import Live",
    "from rich.text import Text",
    "from rich.spinner import Spinner, SPINNERS",
    "from time import sleep",
    "from rich.console import Console",
    "import click",
    "from rich.traceback import install",
    "from rich.console import Console",
    "from rich.table import Table",
    "import time",
    "from contextlib import contextmanager",
    "from rich import box",
    "from rich.align import Align",
    "from rich.console import Console",
    "from rich.live import Live",
    "from rich.table import Table",
    "from rich.text import Text",
    "import datetime",
    "import random",
    "import time",
    "from dataclasses import dataclass",
    "from rich import box",
    "from rich.console import Console",
    "from rich.live import Live",
    "from rich.table import Table",
    "from typing import Literal",
    "import os",
    "import pathlib",
    "import sys",
    "from rich import print",
    "from rich.filesize import decimal",
    "from rich.markup import escape",
    "from rich.text import Text",
    "from rich.tree import Tree",
    "from abc import ABC",
    "from rich.text import Text",
    "from itertools import chain",
    "from typing import TYPE_CHECKING, Iterable, Optional, Literal",
    "from .constrain import Constrain",
    "from .jupyter import JupyterMixin",
    "from .measure import Measurement",
    "from .segment import Segment",
    "from .style import StyleType",
    "from .console import Console, ConsoleOptions, RenderableType, RenderResult",
    "from rich.console import Console, Group",
    "from rich.highlighter import ReprHighlighter",
    "from rich.panel import Panel",
    "import re",
    "import sys",
    "from contextlib import suppress",
    "from typing import Iterable, NamedTuple, Optional",
    "from .color import Color",
    "from .style import Style",
    "from .text import Text",
    "import io",
    "import os",
    "import pty",
    "import sys",
    "from .console import Console",
    "from typing import Optional, Union",
    "from .color import Color",
    "from .console import Console, ConsoleOptions, RenderResult",
    "from .jupyter import JupyterMixin",
    "from .measure import Measurement",
    "from .segment import Segment",
    "from .style import Style",
    "from typing import TYPE_CHECKING, Iterable, List, Literal",
    "from ._loop import loop_last",
    "from rich.console import ConsoleOptions",
    "from rich.columns import Columns",
    "from rich.panel import Panel",
    "from . import box as box",
    "from .console import Console",
    "from .table import Table",
    "from .text import Text",
    "from functools import lru_cache",
    "from typing import Callable",
    "from ._cell_widths import CELL_WIDTHS",
    "import re",
    "import sys",
    "from colorsys import rgb_to_hls",
    "from enum import IntEnum",
    "from functools import lru_cache",
    "from typing import TYPE_CHECKING, NamedTuple, Optional, Tuple",
    "from ._palettes import EIGHT_BIT_PALETTE, STANDARD_PALETTE, WINDOWS_PALETTE",
    "from .color_triplet import ColorTriplet",
    "from .repr import Result, rich_repr",
    "from .terminal_theme import DEFAULT_TERMINAL_THEME",
    "from .terminal_theme import TerminalTheme",
    "from .text import Text",
    "from .style import Style",
    "from .text import Text",
    "from .console import Console",
    "from .table import Table",
    "from .text import Text",
    "from typing import NamedTuple, Tuple",
    "from collections import defaultdict",
    "from itertools import chain",
    "from operator import itemgetter",
    "from typing import Dict, Iterable, List, Optional, Tuple",
    "from .align import Align, AlignMethod",
    "from .console import Console, ConsoleOptions, RenderableType, RenderResult",
    "from .constrain import Constrain",
    "from .measure import Measurement",
    "from .padding import Padding, PaddingDimensions",
    "from .table import Table",
    "from .text import TextType",
    "from .jupyter import JupyterMixin",
    "import os",
    "import inspect",
    "import os",
    "import sys",
    "import threading",
    "import zlib",
    "from abc import ABC, abstractmethod",
    "from dataclasses import dataclass, field",
    "from datetime import datetime",
    "from functools import wraps",
    "from getpass import getpass",
    "from html import escape",
    "from inspect import isclass",
    "from itertools import islice",
    "from math import ceil",
    "from time import monotonic",
    "from types import FrameType, ModuleType, TracebackType",
    "from typing import (\n    IO,\n    TYPE_CHECKING,\n    Any,\n    Callable,\n    Dict,\n    Iterable,\n    List,\n    Literal,\n    Mapping,\n    NamedTuple,\n    Optional,\n    Protocol,\n    TextIO,\n    Tuple,\n    Type,\n    Union,\n    cast,\n    runtime_checkable,\n)",
    "from rich._null_file import NULL_FILE",
    "from . import errors, themes",
    "from ._emoji_replace import _emoji_replace",
    "from ._export_format import CONSOLE_HTML_FORMAT, CONSOLE_SVG_FORMAT",
    "from ._fileno import get_fileno",
    "from ._log_render import FormatTimeCallable, LogRender",
    "from .align import Align, AlignMethod",
    "from .color import ColorSystem, blend_rgb",
    "from .control import Control",
    "from .emoji import EmojiVariant",
    "from .highlighter import NullHighlighter, ReprHighlighter",
    "from .markup import render as render_markup",
    "from .measure import Measurement, measure_renderables",
    "from .pager import Pager, SystemPager",
    "from .pretty import Pretty, is_expandable",
    "from .protocol import rich_cast",
    "from .region import Region",
    "from .scope import render_scope",
    "from .screen import Screen",
    "from .segment import Segment",
    "from .style import Style, StyleType",
    "from .styled import Styled",
    "from .terminal_theme import DEFAULT_TERMINAL_THEME, SVG_EXPORT_THEME, TerminalTheme",
    "from .text import Text, TextType",
    "from .theme import Theme, ThemeStack",
    "from ._windows import WindowsConsoleFeatures",
    "from .live import Live",
    "from .status import Status",
    "from ._windows import get_windows_console_features",
    "from .status import Status",
    "from .rule import Rule",
    "from rich.json import JSON",
    "from .traceback import Traceback",
    "from .jupyter import display",
    "from rich._win32_console import LegacyWindowsTerm",
    "from rich._windows_renderer import legacy_windows_render",
    "from rich.cells import cell_len",
    "from typing import Optional, TYPE_CHECKING",
    "from .jupyter import JupyterMixin",
    "from .measure import Measurement",
    "from .console import Console, ConsoleOptions, RenderableType, RenderResult",
    "from itertools import zip_longest",
    "from typing import (\n    TYPE_CHECKING,\n    Iterable,\n    Iterator,\n    List,\n    Optional,\n    TypeVar,\n    Union,\n    overload,\n)",
    "from .console import (\n        Console,\n        ConsoleOptions,\n        JustifyMethod,\n        OverflowMethod,\n        RenderResult,\n        RenderableType,\n    )",
    "from .text import Text",
    "from .cells import cell_len",
    "from .measure import Measurement",
    "from .text import Text",
    "import time",
    "from typing import TYPE_CHECKING, Callable, Dict, Iterable, List, Union, Final",
    "from .segment import ControlCode, ControlType, Segment",
    "from .console import Console, ConsoleOptions, RenderResult",
    "from rich.console import Console",
    "from typing import Dict",
    "from .style import Style",
    "import argparse",
    "import io",
    "from rich.console import Console",
    "from rich.table import Table",
    "from rich.text import Text",
    "import os",
    "import platform",
    "from rich import inspect",
    "from rich.console import Console, get_windows_console_features",
    "from rich.panel import Panel",
    "from rich.pretty import Pretty",
    "import sys",
    "from typing import TYPE_CHECKING, Optional, Union, Literal",
    "from .jupyter import JupyterMixin",
    "from .segment import Segment",
    "from .style import Style",
    "from ._emoji_codes import EMOJI",
    "from ._emoji_replace import _emoji_replace",
    "from .console import Console, ConsoleOptions, RenderResult",
    "import sys",
    "from rich.columns import Columns",
    "from rich.console import Console",
    "from typing import Iterable, List, Optional, Tuple",
    "import io",
    "from typing import IO, TYPE_CHECKING, Any, List",
    "from .ansi import AnsiDecoder",
    "from .text import Text",
    "from .console import Console",
    "import re",
    "from abc import ABC, abstractmethod",
    "from typing import List, Union",
    "from .text import Span, Text",
    "from .console import Console",
    "import json",
    "from pathlib import Path",
    "from json import loads, dumps",
    "from typing import Any, Callable, Optional, Union",
    "from .text import Text",
    "from .highlighter import JSONHighlighter, NullHighlighter",
    "import argparse",
    "import sys",
    "from rich.console import Console",
    "from typing import TYPE_CHECKING, Any, Dict, Iterable, List, Sequence",
    "from rich.console import ConsoleRenderable",
    "from . import get_console",
    "from .segment import Segment",
    "from .terminal_theme import DEFAULT_TERMINAL_THEME",
    "from rich.console import ConsoleRenderable",
    "from IPython.display import display as ipython_display",
    "from abc import ABC, abstractmethod",
    "from itertools import islice",
    "from operator import itemgetter",
    "from threading import RLock",
    "from typing import (\n    TYPE_CHECKING,\n    Dict,\n    Iterable,\n    List,\n    NamedTuple,\n    Optional,\n    Sequence,\n    Tuple,\n    Union,\n)",
    "from ._ratio import ratio_resolve",
    "from .align import Align",
    "from .console import Console, ConsoleOptions, RenderableType, RenderResult",
    "from .highlighter import ReprHighlighter",
    "from .panel import Panel",
    "from .pretty import Pretty",
    "from .region import Region",
    "from .repr import Result, rich_repr",
    "from .segment import Segment",
    "from .style import StyleType",
    "from rich.tree import Tree",
    "from rich.styled import Styled",
    "from rich.table import Table",
    "from rich.tree import Tree",
    "from rich.console import Console",
    "import sys",
    "from threading import Event, RLock, Thread",
    "from types import TracebackType",
    "from typing import IO, TYPE_CHECKING, Any, Callable, List, Optional, TextIO, Type, cast",
    "from . import get_console",
    "from .console import Console, ConsoleRenderable, Group, RenderableType, RenderHook",
    "from .control import Control",
    "from .file_proxy import FileProxy",
    "from .jupyter import JupyterMixin",
    "from .live_render import LiveRender, VerticalOverflowMethod",
    "from .screen import Screen",
    "from .text import Text",
    "from typing_extensions import Self",
    "from IPython.display import display",
    "from ipywidgets import Output",
    "import warnings",
    "import random",
    "import time",
    "from itertools import cycle",
    "from typing import Dict, List, Tuple",
    "from .align import Align",
    "from .console import Console",
    "from .live import Live as Live",
    "from .panel import Panel",
    "from .rule import Rule",
    "from .syntax import Syntax",
    "from .table import Table",
    "from typing import Optional, Tuple, Literal",
    "from ._loop import loop_last",
    "from .console import Console, ConsoleOptions, RenderableType, RenderResult",
    "from .control import Control",
    "from .segment import ControlType, Segment",
    "from .style import StyleType",
    "from .text import Text",
    "import logging",
    "from datetime import datetime",
    "from logging import Handler, LogRecord",
    "from pathlib import Path",
    "from types import ModuleType",
    "from typing import ClassVar, Iterable, List, Optional, Type, Union",
    "from rich._null_file import NullFile",
    "from . import get_console",
    "from ._log_render import FormatTimeCallable, LogRender",
    "from .console import Console, ConsoleRenderable",
    "from .highlighter import Highlighter, ReprHighlighter",
    "from .text import Text",
    "from .traceback import Traceback",
    "from time import sleep",
    "import sys",
    "from typing import ClassVar, Iterable, get_args",
    "from markdown_it import MarkdownIt",
    "from markdown_it.token import Token",
    "from rich.table import Table",
    "from . import box",
    "from ._loop import loop_first",
    "from ._stack import Stack",
    "from .console import Console, ConsoleOptions, JustifyMethod, RenderResult",
    "from .containers import Renderables",
    "from .jupyter import JupyterMixin",
    "from .panel import Panel",
    "from .rule import Rule",
    "from .segment import Segment",
    "from .style import Style, StyleStack",
    "from .syntax import Syntax",
    "from .text import Text, TextType",
    "import argparse",
    "import sys",
    "from rich.console import Console",
    "import io",
    "import pydoc",
    "import re",
    "from ast import literal_eval",
    "from operator import attrgetter",
    "from typing import Callable, Iterable, List, Match, NamedTuple, Optional, Tuple, Union",
    "from ._emoji_replace import _emoji_replace",
    "from .emoji import EmojiVariant",
    "from .errors import MarkupError",
    "from .style import Style",
    "from .text import Span, Text",
    "from rich import print",
    "from rich.table import Table",
    "from operator import itemgetter",
    "from typing import TYPE_CHECKING, Callable, NamedTuple, Optional, Sequence",
    "from . import errors",
    "from .protocol import is_renderable, rich_cast",
    "from .console import Console, ConsoleOptions, RenderableType",
    "from typing import TYPE_CHECKING, List, Optional, Tuple, Union",
    "from .console import (\n        Console,\n        ConsoleOptions,\n        RenderableType,\n        RenderResult,\n    )",
    "from .jupyter import JupyterMixin",
    "from .measure import Measurement",
    "from .segment import Segment",
    "from .style import Style",
    "from rich import print",
    "from abc import ABC, abstractmethod",
    "from typing import Any",
    "from .__main__ import make_test_card",
    "from .console import Console",
    "from math import sqrt",
    "from functools import lru_cache",
    "from typing import Sequence, Tuple, TYPE_CHECKING",
    "from .color_triplet import ColorTriplet",
    "from rich.table import Table",
    "from rich.color import Color",
    "from rich.style import Style",
    "from rich.text import Text",
    "from rich.table import Table",
    "import colorsys",
    "from typing import Iterable",
    "from rich.color import Color",
    "from rich.console import Console, ConsoleOptions",
    "from rich.segment import Segment",
    "from rich.style import Style",
    "from typing import TYPE_CHECKING, Optional",
    "from .align import AlignMethod",
    "from .box import ROUNDED, Box",
    "from .cells import cell_len",
    "from .jupyter import JupyterMixin",
    "from .measure import Measurement, measure_renderables",
    "from .padding import Padding, PaddingDimensions",
    "from .segment import Segment",
    "from .style import Style, StyleType",
    "from .text import Text, TextType",
    "from .console import Console, ConsoleOptions, RenderableType, RenderResult",
    "from .console import Console",
    "from .box import DOUBLE, ROUNDED",
    "from .padding import Padding",
    "import builtins",
    "import collections",
    "import dataclasses",
    "import inspect",
    "import os",
    "import reprlib",
    "import sys",
    "from array import array",
    "from collections import Counter, UserDict, UserList, defaultdict, deque",
    "from dataclasses import dataclass, fields, is_dataclass",
    "from inspect import isclass",
    "from itertools import islice",
    "from types import MappingProxyType",
    "from typing import (\n    TYPE_CHECKING,\n    Any,\n    Callable,\n    DefaultDict,\n    Deque,\n    Dict,\n    Iterable,\n    List,\n    Optional,\n    Sequence,\n    Set,\n    Tuple,\n    Union,\n)",
    "from rich.repr import RichReprResult",
    "import attr as _attr_module",
    "from . import get_console",
    "from ._loop import loop_last",
    "from ._pick import pick_bool",
    "from .abc import RichRenderable",
    "from .cells import cell_len",
    "from .highlighter import ReprHighlighter",
    "from .jupyter import JupyterMixin, JupyterRenderable",
    "from .measure import Measurement",
    "from .text import Text",
    "from .console import (\n        Console,\n        ConsoleOptions,\n        HighlighterType,\n        JustifyMethod,\n        OverflowMethod,\n        RenderResult,\n    )",
    "from .console import ConsoleRenderable",
    "from rich import get_console",
    "from IPython.core.formatters import BaseFormatter",
    "from typing import NamedTuple",
    "from rich import print",
    "import io",
    "import typing",
    "import warnings",
    "from abc import ABC, abstractmethod",
    "from collections import deque",
    "from dataclasses import dataclass, field",
    "from datetime import timedelta",
    "from io import RawIOBase, UnsupportedOperation",
    "from math import ceil",
    "from mmap import mmap",
    "from operator import length_hint",
    "from os import PathLike, stat",
    "from threading import Event, RLock, Thread",
    "from types import TracebackType",
    "from typing import (\n    TYPE_CHECKING,\n    Any,\n    BinaryIO,\n    Callable,\n    ContextManager,\n    Deque,\n    Dict,\n    Generic,\n    Iterable,\n    List,\n    Literal,\n    NamedTuple,\n    NewType,\n    Optional,\n    TextIO,\n    Tuple,\n    Type,\n    TypeVar,\n    Union,\n)",
    "from typing_extensions import Self",
    "from . import filesize, get_console",
    "from .console import Console, Group, JustifyMethod, RenderableType",
    "from .highlighter import Highlighter",
    "from .jupyter import JupyterMixin",
    "from .live import Live",
    "from .progress_bar import ProgressBar",
    "from .spinner import Spinner",
    "from .style import StyleType",
    "from .table import Column, Table",
    "from .text import Text, TextType",
    "import random",
    "import time",
    "from .panel import Panel",
    "from .rule import Rule",
    "from .syntax import Syntax",
    "from .table import Table",
    "from itertools import cycle",
    "import math",
    "from functools import lru_cache",
    "from time import monotonic",
    "from typing import Iterable, List, Optional",
    "from .color import Color, blend_rgb",
    "from .color_triplet import ColorTriplet",
    "from .console import Console, ConsoleOptions, RenderResult",
    "from .jupyter import JupyterMixin",
    "from .measure import Measurement",
    "from .segment import Segment",
    "from .style import Style, StyleType",
    "import time",
    "from typing import Any, Generic, List, Optional, TextIO, TypeVar, Union, overload",
    "from . import get_console",
    "from .console import Console",
    "from .text import Text, TextType",
    "from rich import print",
    "from typing import Any, cast, Set, TYPE_CHECKING",
    "from inspect import isclass",
    "from rich.console import RenderableType",
    "from rich.console import RenderableType",
    "from typing import NamedTuple",
    "import inspect",
    "from functools import partial",
    "from typing import (\n    Any,\n    Callable,\n    Iterable,\n    List,\n    Optional,\n    Tuple,\n    Type,\n    TypeVar,\n    Union,\n    overload,\n)",
    "from rich.console import Console",
    "from typing import Union",
    "from .align import AlignMethod",
    "from .cells import cell_len, set_cell_size",
    "from .console import Console, ConsoleOptions, RenderResult",
    "from .jupyter import JupyterMixin",
    "from .measure import Measurement",
    "from .style import Style",
    "from .text import Text",
    "import sys",
    "from rich.console import Console",
    "from collections.abc import Mapping",
    "from typing import TYPE_CHECKING, Any, Optional, Tuple",
    "from .highlighter import ReprHighlighter",
    "from .panel import Panel",
    "from .pretty import Pretty",
    "from .table import Table",
    "from .text import Text, TextType",
    "from .console import ConsoleRenderable",
    "from rich import print",
    "from typing import Optional, TYPE_CHECKING",
    "from .segment import Segment",
    "from .style import StyleType",
    "from ._loop import loop_last",
    "from .console import (\n        Console,\n        ConsoleOptions,\n        RenderResult,\n        RenderableType,\n        Group,\n    )",
    "from rich.console import Group",
    "from enum import IntEnum",
    "from functools import lru_cache",
    "from itertools import filterfalse",
    "from logging import getLogger",
    "from operator import attrgetter",
    "from typing import (\n    TYPE_CHECKING,\n    Dict,\n    Iterable,\n    List,\n    NamedTuple,\n    Optional,\n    Sequence,\n    Tuple,\n    Type,\n    Union,\n)",
    "from .cells import (\n    _is_single_cell_widths,\n    cached_cell_len,\n    cell_len,\n    get_character_cell_size,\n    set_cell_size,\n)",
    "from .repr import Result, rich_repr",
    "from .style import Style",
    "from .console import Console, ConsoleOptions, RenderResult",
    "from rich.console import Console",
    "from rich.syntax import Syntax",
    "from rich.text import Text",
    "from typing import TYPE_CHECKING, List, Optional, Union, cast",
    "from ._spinners import SPINNERS",
    "from .measure import Measurement",
    "from .table import Table",
    "from .text import Text",
    "from .console import Console, ConsoleOptions, RenderableType, RenderResult",
    "from .style import StyleType",
    "from time import sleep",
    "from .console import Group",
    "from .live import Live",
    "from types import TracebackType",
    "from typing import Optional, Type",
    "from .console import Console, RenderableType",
    "from .jupyter import JupyterMixin",
    "from .live import Live",
    "from .spinner import Spinner",
    "from .style import StyleType",
    "from time import sleep",
    "from .console import Console",
    "import sys",
    "from functools import lru_cache",
    "from operator import attrgetter",
    "from pickle import dumps, loads",
    "from random import randint",
    "from typing import Any, Dict, Iterable, List, Optional, Type, Union, cast",
    "from . import errors",
    "from .color import Color, ColorParseError, ColorSystem, blend_rgb",
    "from .repr import Result, rich_repr",
    "from .terminal_theme import DEFAULT_TERMINAL_THEME, TerminalTheme",
    "from typing import TYPE_CHECKING",
    "from .measure import Measurement",
    "from .segment import Segment",
    "from .style import StyleType",
    "from .console import Console, ConsoleOptions, RenderResult, RenderableType",
    "from rich import print",
    "from rich.panel import Panel",
    "import os.path",
    "import re",
    "import sys",
    "import textwrap",
    "from abc import ABC, abstractmethod",
    "from pathlib import Path",
    "from typing import (\n    Any,\n    Dict,\n    Iterable,\n    List,\n    NamedTuple,\n    Optional,\n    Sequence,\n    Set,\n    Tuple,\n    Type,\n    Union,\n)",
    "from pygments.lexer import Lexer",
    "from pygments.lexers import get_lexer_by_name, guess_lexer_for_filename",
    "from pygments.style import Style as PygmentsStyle",
    "from pygments.styles import get_style_by_name",
    "from pygments.token import (\n    Comment,\n    Error,\n    Generic,\n    Keyword,\n    Name,\n    Number,\n    Operator,\n    String,\n    Token,\n    Whitespace,\n)",
    "from pygments.util import ClassNotFound",
    "from rich.containers import Lines",
    "from rich.padding import Padding, PaddingDimensions",
    "from ._loop import loop_first",
    "from .cells import cell_len",
    "from .color import Color, blend_rgb",
    "from .console import Console, ConsoleOptions, JustifyMethod, RenderResult",
    "from .jupyter import JupyterMixin",
    "from .measure import Measurement",
    "from .segment import Segment, Segments",
    "from .style import Style, StyleType",
    "from .text import Text",
    "import argparse",
    "import sys",
    "from rich.console import Console",
    "from dataclasses import dataclass, field, replace",
    "from typing import (\n    TYPE_CHECKING,\n    Dict,\n    Iterable,\n    List,\n    NamedTuple,\n    Optional,\n    Sequence,\n    Tuple,\n    Union,\n)",
    "from . import box, errors",
    "from ._loop import loop_first_last, loop_last",
    "from ._pick import pick_bool",
    "from ._ratio import ratio_distribute, ratio_reduce",
    "from .align import VerticalAlignMethod",
    "from .jupyter import JupyterMixin",
    "from .measure import Measurement",
    "from .padding import Padding, PaddingDimensions",
    "from .protocol import is_renderable",
    "from .segment import Segment",
    "from .style import Style, StyleType",
    "from .text import Text, TextType",
    "from .console import (\n        Console,\n        ConsoleOptions,\n        JustifyMethod,\n        OverflowMethod,\n        RenderableType,\n        RenderResult,\n    )",
    "from rich.console import Console",
    "from rich.highlighter import ReprHighlighter",
    "from ._timer import timer",
    "from typing import List, Optional, Tuple",
    "from .color_triplet import ColorTriplet",
    "from .palette import Palette",
    "import re",
    "from functools import partial, reduce",
    "from math import gcd",
    "from operator import itemgetter",
    "from typing import (\n    TYPE_CHECKING,\n    Any,\n    Callable,\n    Dict,\n    Iterable,\n    List,\n    NamedTuple,\n    Optional,\n    Pattern,\n    Tuple,\n    Union,\n)",
    "from ._loop import loop_last",
    "from ._pick import pick_bool",
    "from ._wrap import divide_line",
    "from .align import AlignMethod",
    "from .cells import cell_len, set_cell_size",
    "from .containers import Lines",
    "from .control import strip_control_codes",
    "from .emoji import EmojiVariant",
    "from .jupyter import JupyterMixin",
    "from .measure import Measurement",
    "from .segment import Segment",
    "from .style import Style, StyleType",
    "from .console import Console, ConsoleOptions, JustifyMethod, OverflowMethod",
    "from .markup import escape",
    "from .markup import render",
    "from .ansi import AnsiDecoder",
    "from rich.console import Console",
    "import configparser",
    "from typing import IO, Dict, List, Mapping, Optional",
    "from .default_styles import DEFAULT_STYLES",
    "from .style import Style, StyleType",
    "from .default_styles import DEFAULT_STYLES",
    "from .theme import Theme",
    "import inspect",
    "import linecache",
    "import os",
    "import sys",
    "from dataclasses import dataclass, field",
    "from itertools import islice",
    "from traceback import walk_tb",
    "from types import ModuleType, TracebackType",
    "from typing import (\n    Any,\n    Callable,\n    Dict,\n    Iterable,\n    List,\n    Optional,\n    Sequence,\n    Set,\n    Tuple,\n    Type,\n    Union,\n)",
    "from pygments.lexers import guess_lexer_for_filename",
    "from pygments.token import Comment, Keyword, Name, Number, Operator, String",
    "from pygments.token import Text as TextToken",
    "from pygments.token import Token",
    "from pygments.util import ClassNotFound",
    "from . import pretty",
    "from ._loop import loop_first_last, loop_last",
    "from .columns import Columns",
    "from .console import (\n    Console,\n    ConsoleOptions,\n    ConsoleRenderable,\n    Group,\n    RenderResult,\n    group,\n)",
    "from .constrain import Constrain",
    "from .highlighter import RegexHighlighter, ReprHighlighter",
    "from .panel import Panel",
    "from .scope import render_scope",
    "from .style import Style",
    "from .syntax import Syntax, SyntaxPosition",
    "from .text import Text",
    "from .theme import Theme",
    "from rich import _IMPORT_CWD",
    "import sys",
    "from typing import Iterator, List, Optional, Tuple",
    "from ._loop import loop_first, loop_last",
    "from .console import Console, ConsoleOptions, RenderableType, RenderResult",
    "from .jupyter import JupyterMixin",
    "from .measure import Measurement",
    "from .segment import Segment",
    "from .style import Style, StyleStack, StyleType",
    "from .styled import Styled",
    "from rich.console import Group",
    "from rich.markdown import Markdown",
    "from rich.panel import Panel",
    "from rich.syntax import Syntax",
    "from rich.table import Table",
    "from typing import Callable, Match, Optional",
    "import re",
    "from ._emoji_codes import EMOJI",
    "from typing import Any",
    "from rich.pretty import install",
    "from rich.traceback import install as tr_install",
    "from typing import IO, Callable",
    "import inspect",
    "from inspect import cleandoc, getdoc, getfile, isclass, ismodule, signature",
    "from typing import Any, Collection, Iterable, Optional, Tuple, Type, Union",
    "from .console import Group, RenderableType",
    "from .control import escape_control_codes",
    "from .highlighter import ReprHighlighter",
    "from .jupyter import JupyterMixin",
    "from .panel import Panel",
    "from .pretty import Pretty",
    "from .table import Table",
    "from .text import Text, TextType",
    "from datetime import datetime",
    "from typing import Iterable, List, Optional, TYPE_CHECKING, Union, Callable",
    "from .text import Text, TextType",
    "from .console import Console, ConsoleRenderable, RenderableType",
    "from .table import Table",
    "from .containers import Renderables",
    "from .table import Table",
    "from rich.console import Console",
    "from typing import Iterable, Tuple, TypeVar",
    "from types import TracebackType",
    "from typing import IO, Iterable, Iterator, List, Optional, Type",
    "from .palette import Palette",
    "from typing import Optional",
    "from fractions import Fraction",
    "from math import ceil",
    "from typing import cast, List, Optional, Sequence, Protocol",
    "from dataclasses import dataclass",
    "from typing import List, TypeVar",
    "from time import time",
    "import contextlib",
    "from typing import Generator",
    "import ctypes",
    "import sys",
    "from typing import Any",
    "import time",
    "from ctypes import Structure, byref, wintypes",
    "from typing import IO, NamedTuple, Type, cast",
    "from rich.color import ColorSystem",
    "from rich.style import Style",
    "from rich.console import Console",
    "import sys",
    "from dataclasses import dataclass",
    "import ctypes",
    "from ctypes import LibraryLoader",
    "from rich._win32_console import (\n        ENABLE_VIRTUAL_TERMINAL_PROCESSING,\n        GetConsoleMode,\n        GetStdHandle,\n        LegacyWindowsError,\n    )",
    "import platform",
    "from rich import print",
    "from typing import Iterable, Sequence, Tuple, cast",
    "from rich._win32_console import LegacyWindowsTerm, WindowsCoordinates",
    "from rich.segment import ControlCode, ControlType, Segment",
    "import re",
    "from typing import Iterable",
    "from ._loop import loop_last",
    "from .cells import cell_len, chop_cells",
    "from .console import Console",
    "import os",
    "from typing import IO, TYPE_CHECKING, Any, Callable, Optional, Union",
    "from ._extension import load_ipython_extension",
    "from .console import Console",
    "from .console import Console",
    "from rich.console import Console",
    "from .console import Console",
    "from rich._inspect import Inspect",
    "import colorsys",
    "import io",
    "from time import process_time",
    "from rich import box",
    "from rich.color import Color",
    "from rich.console import Console, ConsoleOptions, Group, RenderableType, RenderResult",
    "from rich.markdown import Markdown",
    "from rich.measure import Measurement",
    "from rich.pretty import Pretty",
    "from rich.segment import Segment",
    "from rich.style import Style",
    "from rich.syntax import Syntax",
    "from rich.table import Table",
    "from rich.text import Text",
    "from rich.panel import Panel",
    "import pytest",
    "import io",
    "import re",
    "from rich.console import Console, RenderableType",
    "import io",
    "import pytest",
    "from rich.console import Console",
    "from rich.align import Align, VerticalCenter",
    "from rich.measure import Measurement",
    "import pytest",
    "from rich.ansi import AnsiDecoder",
    "from rich.console import Console",
    "from rich.style import Style",
    "from rich.text import Span, Text",
    "from rich.console import Console",
    "from rich.progress_bar import ProgressBar",
    "from rich.segment import Segment",
    "from rich.style import Style",
    "from .render import render",
    "from rich.bar import Bar",
    "from rich.console import Console",
    "from .render import render",
    "import pytest",
    "from rich.console import ConsoleOptions, ConsoleDimensions",
    "from rich.box import (\n    ASCII,\n    DOUBLE,\n    ROUNDED,\n    HEAVY,\n    SQUARE,\n    MINIMAL_HEAVY_HEAD,\n    MINIMAL,\n    SIMPLE_HEAVY,\n    SIMPLE,\n    HEAVY_EDGE,\n    HEAVY_HEAD,\n)",
    "import io",
    "import re",
    "from rich.__main__ import make_test_card",
    "from rich.console import Console, RenderableType",
    "from ._card_render import expected",
    "import string",
    "from rich import cells",
    "from rich.cells import _is_single_cell_widths, chop_cells",
    "from rich.color import (\n    blend_rgb,\n    parse_rgb_hex,\n    Color,\n    ColorParseError,\n    ColorSystem,\n    ColorType,\n    ColorTriplet,\n)",
    "from rich.style import Style",
    "from rich.text import Text, Span",
    "import pytest",
    "from rich.color_triplet import ColorTriplet",
    "import io",
    "from rich.columns import Columns",
    "from rich.console import Console",
    "import io",
    "from rich import box",
    "from rich.columns import Columns",
    "from rich.console import Console",
    "from rich.panel import Panel",
    "import datetime",
    "import io",
    "import os",
    "import subprocess",
    "import sys",
    "import tempfile",
    "from typing import Optional, Tuple, Type, Union",
    "from unittest import mock",
    "import pytest",
    "from rich import errors",
    "from rich._null_file import NullFile",
    "from rich.color import ColorSystem",
    "from rich.console import (\n    CaptureError,\n    Console,\n    ConsoleDimensions,\n    ConsoleOptions,\n    ScreenUpdate,\n    group,\n)",
    "from rich.control import Control",
    "from rich.measure import measure_renderables",
    "from rich.padding import Padding",
    "from rich.pager import SystemPager",
    "from rich.panel import Panel",
    "from rich.region import Region",
    "from rich.segment import Segment",
    "from rich.status import Status",
    "from rich.style import Style",
    "from rich.text import Text",
    "import rich.console",
    "from rich.console import Console",
    "from rich.constrain import Constrain",
    "from rich.text import Text",
    "from rich.console import Console",
    "from rich.containers import Lines, Renderables",
    "from rich.text import Span, Text",
    "from rich.style import Style",
    "from rich.control import Control, escape_control_codes, strip_control_codes",
    "from rich.segment import ControlType, Segment",
    "import pytest",
    "from rich.emoji import Emoji, NoEmoji",
    "from .render import render",
    "from rich import filesize",
    "import io",
    "import sys",
    "import pytest",
    "from rich.console import Console",
    "from rich.file_proxy import FileProxy",
    "from rich._fileno import get_fileno",
    "import json",
    "from typing import List",
    "import pytest",
    "from rich.highlighter import (\n    ISO8601Highlighter,\n    JSONHighlighter,\n    NullHighlighter,\n    ReprHighlighter,\n)",
    "from rich.text import Span, Text",
    "import io",
    "import sys",
    "from types import ModuleType",
    "from typing import Sequence, Type",
    "import pytest",
    "from rich import inspect",
    "from rich._inspect import (\n    get_object_types_mro,\n    get_object_types_mro_as_strings,\n    is_object_one_of_types,\n)",
    "from rich.console import Console",
    "from rich.json import JSON",
    "import datetime",
    "from rich.console import Console",
    "import sys",
    "import pytest",
    "from rich.console import Console",
    "from rich.layout import Layout, NoSplitter",
    "from rich.panel import Panel",
    "import time",
    "from typing import Optional",
    "from rich.console import Console",
    "from rich.live import Live",
    "from rich.text import Text",
    "import pytest",
    "from rich.live_render import LiveRender",
    "from rich.console import Console, ConsoleDimensions, ConsoleOptions",
    "from rich.style import Style",
    "from rich.segment import Segment",
    "import io",
    "import re",
    "from rich.console import Console",
    "import io",
    "import os",
    "import logging",
    "from typing import Optional",
    "import pytest",
    "from rich.console import Console",
    "from rich.logging import RichHandler",
    "import io",
    "import re",
    "from rich.console import Console, RenderableType",
    "from rich.markdown import Markdown",
    "import io",
    "import re",
    "from rich.console import Console, RenderableType",
    "from rich.markdown import Markdown",
    "import pytest",
    "from rich.console import Console",
    "from rich.errors import MarkupError",
    "from rich.markup import RE_TAGS, Tag, _parse, escape, render",
    "from rich.text import Span, Text",
    "from rich.text import Text",
    "import pytest",
    "from rich.errors import NotRenderableError",
    "from rich.console import Console",
    "from rich.measure import Measurement, measure_renderables",
    "from rich._null_file import NullFile",
    "import pytest",
    "from rich.padding import Padding",
    "from rich.console import Console, ConsoleDimensions, ConsoleOptions",
    "from rich.style import Style",
    "from rich.segment import Segment",
    "from rich._palettes import STANDARD_PALETTE",
    "from rich.table import Table",
    "import io",
    "import pytest",
    "from rich.console import Console",
    "from rich.panel import Panel",
    "from rich.segment import Segment",
    "from rich.style import Style",
    "from rich.text import Text",
    "from rich._pick import pick_bool",
    "import collections",
    "import io",
    "import sys",
    "from array import array",
    "from collections import UserDict, defaultdict, deque",
    "from dataclasses import dataclass, field",
    "from typing import Any, List, NamedTuple",
    "import attr",
    "import pytest",
    "from rich.console import Console",
    "from rich.measure import Measurement",
    "from rich.pretty import Node, Pretty, _ipy_display_hook, install, pprint, pretty_repr",
    "from rich.text import Text",
    "from dataclasses import dataclass, field",
    "import io",
    "import os",
    "import tempfile",
    "from types import SimpleNamespace",
    "import pytest",
    "import rich.progress",
    "from rich.console import Console",
    "from rich.highlighter import NullHighlighter",
    "from rich.progress import (\n    BarColumn,\n    DownloadColumn,\n    FileSizeColumn,\n    MofNCompleteColumn,\n    Progress,\n    RenderableColumn,\n    SpinnerColumn,\n    Task,\n    TaskID,\n    TaskProgressColumn,\n    TextColumn,\n    TimeElapsedColumn,\n    TimeRemainingColumn,\n    TotalFileSizeColumn,\n    TransferSpeedColumn,\n    _TrackThread,\n    track,\n)",
    "from rich.progress_bar import ProgressBar",
    "from rich.text import Text",
    "from .render import replace_link_ids",
    "from time import sleep",
    "import io",
    "from rich.console import Console",
    "from rich.prompt import Confirm, IntPrompt, Prompt",
    "import io",
    "from rich.abc import RichRenderable",
    "from rich.console import Console",
    "from rich.panel import Panel",
    "from rich.text import Text",
    "import pytest",
    "from typing import NamedTuple, Optional",
    "from rich._ratio import ratio_reduce, ratio_resolve",
    "from typing import Optional",
    "import pytest",
    "import rich.repr",
    "from rich.console import Console",
    "from inspect import Parameter",
    "import io",
    "import json",
    "import rich",
    "from rich.console import Console",
    "import io",
    "import pytest",
    "from rich.console import Console",
    "from rich.rule import Rule",
    "from rich.text import Text",
    "import io",
    "from textwrap import dedent",
    "import pytest",
    "from rich import box",
    "from rich.console import Console",
    "from rich.rule import Rule",
    "from rich.table import Table",
    "from rich.console import Console",
    "from rich.screen import Screen",
    "from io import StringIO",
    "import pytest",
    "from rich.cells import cell_len",
    "from rich.segment import ControlType, Segment, SegmentLines, Segments",
    "from rich.style import Style",
    "from rich.console import Console",
    "from rich.text import Text",
    "import pytest",
    "from rich.console import Console",
    "from rich.measure import Measurement",
    "from rich.rule import Rule",
    "from rich.spinner import Spinner",
    "from rich.text import Text",
    "from rich._stack import Stack",
    "from time import sleep",
    "from rich.console import Console",
    "from rich.spinner import Spinner",
    "from rich.status import Status",
    "import pytest",
    "from rich import errors",
    "from rich.color import Color, ColorSystem, ColorType",
    "from rich.style import Style, StyleStack",
    "import io",
    "from rich.console import Console",
    "from rich.measure import Measurement",
    "from rich.styled import Styled",
    "import io",
    "import os",
    "import sys",
    "import tempfile",
    "from importlib.metadata import Distribution",
    "import pytest",
    "from pygments.lexers import PythonLexer",
    "from rich.measure import Measurement",
    "from rich.panel import Panel",
    "from rich.style import Style",
    "from rich.syntax import (\n    ANSISyntaxTheme,\n    Color,\n    Console,\n    PygmentsSyntaxTheme,\n    Syntax,\n    _SyntaxHighlightRange,\n)",
    "from .render import render",
    "from pygments.style import Style as PygmentsStyle",
    "from pygments.style import Token",
    "import io",
    "from textwrap import dedent",
    "import pytest",
    "from rich import box, errors",
    "from rich.console import Console",
    "from rich.measure import Measurement",
    "from rich.style import Style",
    "from rich.table import Column, Table",
    "from rich.text import Text",
    "import re",
    "from io import StringIO",
    "from typing import List",
    "import pytest",
    "from rich.console import Console, Group",
    "from rich.measure import Measurement",
    "from rich.style import Style",
    "from rich.text import Span, Text",
    "import io",
    "import os",
    "import tempfile",
    "import pytest",
    "from rich.style import Style",
    "from rich.theme import Theme, ThemeStack, ThemeStackError",
    "from rich._loop import loop_first, loop_last, loop_first_last",
    "from rich._ratio import ratio_distribute",
    "import io",
    "import re",
    "import sys",
    "from typing import List",
    "import pytest",
    "from rich.console import Console",
    "from rich.theme import Theme",
    "from rich.traceback import Traceback, install",
    "import sys",
    "import pytest",
    "from rich.console import Console",
    "from rich.measure import Measurement",
    "from rich.tree import Tree",
    "import dataclasses",
    "import sys",
    "from unittest import mock",
    "from unittest.mock import patch",
    "import pytest",
    "from rich.style import Style",
    "from rich import _win32_console",
    "from rich._win32_console import COORD, LegacyWindowsTerm, WindowsCoordinates",
    "import sys",
    "from unittest.mock import call, create_autospec",
    "import pytest",
    "from rich._win32_console import LegacyWindowsTerm, WindowsCoordinates",
    "from rich._windows_renderer import legacy_windows_render",
    "from rich.segment import ControlType, Segment",
    "from rich.style import Style",
    "import emoji",
    "from emoji.unicode_codes import EMOJI_ALIAS_UNICODE",
    "import subprocess",
    "from typing import List, Tuple",
    "import sys",
    "from rich.progress import Progress",
    "from wcwidth import wcwidth",
    "from rich.segment import Segment",
    "from time import perf_counter",
    "import json",
    "import io",
    "from time import time",
    "from rich.console import Console",
    "from rich.pretty import Pretty",
    "from rich.console import Console",
    "from rich.panel import Panel",
    "from rich.pretty import Pretty",
    "from rich._timer import timer"
  ],
  "entry_points": []
}