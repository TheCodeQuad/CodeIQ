{
  "repo_path": "C:\\CODEIQNEW\\backend\\data\\rich",
  "files": [
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\setup.py",
      "imports": [
        "import setuptools"
      ],
      "classes": [],
      "functions": [],
      "variables": []
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\benchmarks\\benchmarks.py",
      "imports": [
        "from io import StringIO",
        "from benchmarks import snippets",
        "from rich.color import Color, ColorSystem",
        "from rich.console import Console",
        "from rich.pretty import Pretty",
        "from rich.segment import Segment",
        "from rich.style import Style",
        "from rich.syntax import Syntax",
        "from rich.table import Table",
        "from rich.text import Text"
      ],
      "classes": [
        {
          "name": "TextSuite",
          "base_classes": null,
          "docstring": null,
          "methods": []
        },
        {
          "name": "TextHotCacheSuite",
          "base_classes": null,
          "docstring": null,
          "methods": []
        },
        {
          "name": "SyntaxWrappingSuite",
          "base_classes": null,
          "docstring": null,
          "methods": []
        },
        {
          "name": "TableSuite",
          "base_classes": null,
          "docstring": null,
          "methods": []
        },
        {
          "name": "PrettySuite",
          "base_classes": null,
          "docstring": null,
          "methods": []
        },
        {
          "name": "StyleSuite",
          "base_classes": null,
          "docstring": null,
          "methods": []
        },
        {
          "name": "ColorSuite",
          "base_classes": null,
          "docstring": null,
          "methods": []
        },
        {
          "name": "ColorSuiteCached",
          "base_classes": null,
          "docstring": null,
          "methods": []
        },
        {
          "name": "SegmentSuite",
          "base_classes": null,
          "docstring": null,
          "methods": []
        }
      ],
      "functions": [
        {
          "name": "setup",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Console",
            "StringIO",
            "len",
            "Text.from_markup"
          ],
          "variables": [],
          "start_line": 15,
          "end_line": 20
        },
        {
          "name": "time_wrapping",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "self.text.wrap"
          ],
          "variables": [],
          "start_line": 22,
          "end_line": 23
        },
        {
          "name": "time_indent_guides",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Text(snippets.PYTHON_SNIPPET).with_indent_guides",
            "Text"
          ],
          "variables": [],
          "start_line": 25,
          "end_line": 26
        },
        {
          "name": "time_fit",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Text(snippets.LOREM_IPSUM).fit",
            "Text"
          ],
          "variables": [],
          "start_line": 28,
          "end_line": 29
        },
        {
          "name": "time_split",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "self.text.split"
          ],
          "variables": [],
          "start_line": 31,
          "end_line": 32
        },
        {
          "name": "time_divide",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "range",
            "Text(snippets.LOREM_IPSUM).divide",
            "Text"
          ],
          "variables": [],
          "start_line": 34,
          "end_line": 35
        },
        {
          "name": "time_align_center",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Text(snippets.LOREM_IPSUM).align",
            "Text"
          ],
          "variables": [],
          "start_line": 37,
          "end_line": 38
        },
        {
          "name": "time_render",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "list",
            "self.text.render"
          ],
          "variables": [],
          "start_line": 40,
          "end_line": 41
        },
        {
          "name": "time_wrapping_unicode_heavy",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Text(snippets.UNICODE_HEAVY_TEXT).wrap",
            "Text"
          ],
          "variables": [],
          "start_line": 43,
          "end_line": 44
        },
        {
          "name": "time_fit_unicode_heavy",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Text(snippets.UNICODE_HEAVY_TEXT).fit",
            "Text"
          ],
          "variables": [],
          "start_line": 46,
          "end_line": 47
        },
        {
          "name": "time_split_unicode_heavy",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Text",
            "Text(snippets.UNICODE_HEAVY_TEXT).split"
          ],
          "variables": [],
          "start_line": 49,
          "end_line": 50
        },
        {
          "name": "time_divide_unicode_heavy",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "range",
            "self.text.divide"
          ],
          "variables": [],
          "start_line": 52,
          "end_line": 53
        },
        {
          "name": "time_align_center_unicode_heavy",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Text",
            "Text(snippets.UNICODE_HEAVY_TEXT).align"
          ],
          "variables": [],
          "start_line": 55,
          "end_line": 58
        },
        {
          "name": "time_render_unicode_heavy",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "list",
            "Text(snippets.UNICODE_HEAVY_TEXT).render",
            "Text"
          ],
          "variables": [],
          "start_line": 60,
          "end_line": 61
        },
        {
          "name": "setup",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Console",
            "StringIO"
          ],
          "variables": [],
          "start_line": 65,
          "end_line": 68
        },
        {
          "name": "time_wrapping_unicode_heavy_warm_cache",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "range",
            "Text(snippets.UNICODE_HEAVY_TEXT).wrap",
            "Text"
          ],
          "variables": [],
          "start_line": 70,
          "end_line": 72
        },
        {
          "name": "setup",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Console",
            "StringIO",
            "Syntax"
          ],
          "variables": [],
          "start_line": 76,
          "end_line": 82
        },
        {
          "name": "time_text_thin_terminal_heavy_wrapping",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "self._print_with_width"
          ],
          "variables": [],
          "start_line": 84,
          "end_line": 85
        },
        {
          "name": "time_text_thin_terminal_medium_wrapping",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "self._print_with_width"
          ],
          "variables": [],
          "start_line": 87,
          "end_line": 88
        },
        {
          "name": "time_text_wide_terminal_no_wrapping",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "self._print_with_width"
          ],
          "variables": [],
          "start_line": 90,
          "end_line": 91
        },
        {
          "name": "_print_with_width",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "width",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "self.console.print"
          ],
          "variables": [],
          "start_line": 93,
          "end_line": 94
        },
        {
          "name": "time_table_no_wrapping",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "self._print_table"
          ],
          "variables": [],
          "start_line": 98,
          "end_line": 99
        },
        {
          "name": "time_table_heavy_wrapping",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "self._print_table"
          ],
          "variables": [],
          "start_line": 101,
          "end_line": 102
        },
        {
          "name": "_print_table",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "width",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "StringIO",
            "console.print",
            "table.add_row",
            "Table",
            "Console",
            "table.add_column"
          ],
          "variables": [
            "table",
            "console"
          ],
          "start_line": 104,
          "end_line": 126
        },
        {
          "name": "setup",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Console",
            "StringIO"
          ],
          "variables": [],
          "start_line": 130,
          "end_line": 133
        },
        {
          "name": "time_pretty",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Pretty",
            "self.console.print"
          ],
          "variables": [
            "pretty"
          ],
          "start_line": 135,
          "end_line": 137
        },
        {
          "name": "time_pretty_indent_guides",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Pretty",
            "self.console.print"
          ],
          "variables": [
            "pretty"
          ],
          "start_line": 139,
          "end_line": 141
        },
        {
          "name": "time_pretty_justify_center",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Pretty",
            "self.console.print"
          ],
          "variables": [
            "pretty"
          ],
          "start_line": 143,
          "end_line": 145
        },
        {
          "name": "setup",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Console",
            "StringIO",
            "Style.parse"
          ],
          "variables": [],
          "start_line": 149,
          "end_line": 154
        },
        {
          "name": "time_parse_ansi",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Style.parse"
          ],
          "variables": [],
          "start_line": 156,
          "end_line": 157
        },
        {
          "name": "time_parse_hex",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Style.parse"
          ],
          "variables": [],
          "start_line": 159,
          "end_line": 160
        },
        {
          "name": "time_parse_mixed_complex_style",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Style.parse"
          ],
          "variables": [],
          "start_line": 162,
          "end_line": 163
        },
        {
          "name": "time_style_add",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 165,
          "end_line": 166
        },
        {
          "name": "setup",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Console",
            "StringIO",
            "Color.parse"
          ],
          "variables": [],
          "start_line": 170,
          "end_line": 174
        },
        {
          "name": "time_downgrade_to_eight_bit",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "self.color.downgrade"
          ],
          "variables": [],
          "start_line": 176,
          "end_line": 177
        },
        {
          "name": "time_downgrade_to_standard",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "self.color.downgrade"
          ],
          "variables": [],
          "start_line": 179,
          "end_line": 180
        },
        {
          "name": "time_downgrade_to_windows",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "self.color.downgrade"
          ],
          "variables": [],
          "start_line": 182,
          "end_line": 183
        },
        {
          "name": "setup",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Console",
            "StringIO",
            "Color.parse",
            "self.color.downgrade"
          ],
          "variables": [],
          "start_line": 187,
          "end_line": 195
        },
        {
          "name": "time_downgrade_to_eight_bit",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "self.color.downgrade"
          ],
          "variables": [],
          "start_line": 197,
          "end_line": 198
        },
        {
          "name": "time_downgrade_to_standard",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "self.color.downgrade"
          ],
          "variables": [],
          "start_line": 200,
          "end_line": 201
        },
        {
          "name": "time_downgrade_to_windows",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "self.color.downgrade"
          ],
          "variables": [],
          "start_line": 203,
          "end_line": 204
        },
        {
          "name": "setup",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Segment"
          ],
          "variables": [],
          "start_line": 208,
          "end_line": 215
        },
        {
          "name": "test_divide_complex",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "list",
            "Segment.divide"
          ],
          "variables": [],
          "start_line": 217,
          "end_line": 218
        }
      ],
      "variables": [
        "table",
        "console",
        "pretty",
        "pretty",
        "pretty"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\benchmarks\\snippets.py",
      "imports": [],
      "classes": [],
      "functions": [],
      "variables": [
        "PYTHON_SNIPPET",
        "PYTHON_DICT",
        "LOREM_IPSUM",
        "UNICODE_HEAVY_TEXT",
        "MARKUP"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\benchmarks\\__init__.py",
      "imports": [],
      "classes": [],
      "functions": [],
      "variables": []
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\docs\\source\\conf.py",
      "imports": [
        "import sphinx_rtd_theme",
        "from importlib.metadata import Distribution"
      ],
      "classes": [],
      "functions": [],
      "variables": [
        "html_theme",
        "html_theme_path",
        "project",
        "copyright",
        "author",
        "release",
        "extensions",
        "templates_path",
        "exclude_patterns",
        "html_static_path",
        "intersphinx_mapping",
        "autodoc_typehints",
        "html_css_files"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\examples\\attrs.py",
      "imports": [
        "from typing import List",
        "import attr",
        "from rich.console import Console",
        "from rich.pretty import Pretty",
        "from rich.table import Column, Table",
        "from rich.text import Text"
      ],
      "classes": [
        {
          "name": "Point3D",
          "base_classes": null,
          "docstring": null,
          "methods": []
        },
        {
          "name": "Triangle",
          "base_classes": null,
          "docstring": null,
          "methods": []
        },
        {
          "name": "Model",
          "base_classes": null,
          "docstring": null,
          "methods": []
        }
      ],
      "functions": [],
      "variables": [
        "x",
        "y",
        "z",
        "point1",
        "point2",
        "point3",
        "name",
        "triangles",
        "model",
        "console",
        "table"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\examples\\bars.py",
      "imports": [
        "import math",
        "from rich.align import Align",
        "from rich.bar import Bar",
        "from rich.color import Color",
        "from rich import print"
      ],
      "classes": [],
      "functions": [],
      "variables": [
        "SIZE",
        "y",
        "x",
        "color",
        "bar"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\examples\\columns.py",
      "imports": [
        "import json",
        "from urllib.request import urlopen",
        "from rich.console import Console",
        "from rich.columns import Columns",
        "from rich.panel import Panel"
      ],
      "classes": [],
      "functions": [
        {
          "name": "get_content",
          "parameters": [
            {
              "name": "user",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [],
          "variables": [
            "country",
            "name"
          ],
          "start_line": 15,
          "end_line": 19
        }
      ],
      "variables": [
        "country",
        "name",
        "console",
        "users",
        "user_renderables"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\examples\\cp_progress.py",
      "imports": [
        "import os",
        "import shutil",
        "import sys",
        "from rich.progress import Progress"
      ],
      "classes": [],
      "functions": [],
      "variables": [
        "desc"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\examples\\downloader.py",
      "imports": [
        "import os.path",
        "import sys",
        "from concurrent.futures import ThreadPoolExecutor",
        "import signal",
        "from functools import partial",
        "from threading import Event",
        "from typing import Iterable",
        "from urllib.request import urlopen",
        "from rich.progress import (\n    BarColumn,\n    DownloadColumn,\n    Progress,\n    TaskID,\n    TextColumn,\n    TimeRemainingColumn,\n    TransferSpeedColumn,\n)"
      ],
      "classes": [],
      "functions": [
        {
          "name": "handle_sigint",
          "parameters": [
            {
              "name": "signum",
              "type": null
            },
            {
              "name": "frame",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "done_event.set"
          ],
          "variables": [],
          "start_line": 40,
          "end_line": 41
        },
        {
          "name": "copy_url",
          "parameters": [
            {
              "name": null,
              "type": "TaskID"
            },
            {
              "name": null,
              "type": "str"
            },
            {
              "name": null,
              "type": "str"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "int",
            "len",
            "done_event.is_set",
            "iter",
            "partial",
            "progress.start_task",
            "progress.console.log",
            "progress.update",
            "urlopen",
            "open",
            "response.info",
            "dest_file.write"
          ],
          "variables": [
            "response"
          ],
          "start_line": 47,
          "end_line": 60
        },
        {
          "name": "download",
          "parameters": [
            {
              "name": null,
              "type": "Iterable[str]"
            },
            {
              "name": null,
              "type": "str"
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "progress.add_task",
            "pool.submit",
            "url.split",
            "ThreadPoolExecutor",
            "os.path.join"
          ],
          "variables": [
            "filename",
            "dest_path",
            "task_id"
          ],
          "start_line": 63,
          "end_line": 72
        }
      ],
      "variables": [
        "progress",
        "done_event",
        "response",
        "filename",
        "dest_path",
        "task_id"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\examples\\dynamic_progress.py",
      "imports": [
        "import time",
        "from rich.console import Group",
        "from rich.panel import Panel",
        "from rich.live import Live",
        "from rich.progress import (\n    BarColumn,\n    Progress,\n    SpinnerColumn,\n    TextColumn,\n    TimeElapsedColumn,\n)"
      ],
      "classes": [],
      "functions": [
        {
          "name": "run_steps",
          "parameters": [
            {
              "name": "name",
              "type": null
            },
            {
              "name": "step_times",
              "type": null
            },
            {
              "name": "app_steps_task_id",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "enumerate",
            "step_progress.add_task",
            "step_progress.stop_task",
            "app_steps_progress.update",
            "time.sleep",
            "range",
            "step_progress.update"
          ],
          "variables": [
            "action",
            "step_task_id"
          ],
          "start_line": 23,
          "end_line": 41
        }
      ],
      "variables": [
        "action",
        "step_task_id",
        "current_app_progress",
        "step_progress",
        "app_steps_progress",
        "overall_progress",
        "progress_group",
        "step_actions",
        "apps",
        "overall_task_id",
        "top_descr",
        "current_task_id",
        "app_steps_task_id"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\examples\\exception.py",
      "imports": [
        "from typing import List, Tuple",
        "from rich.console import Console"
      ],
      "classes": [],
      "functions": [
        {
          "name": "divide_by",
          "parameters": [
            {
              "name": null,
              "type": "float"
            },
            {
              "name": null,
              "type": "float"
            }
          ],
          "return_type": "float",
          "docstring": null,
          "calls": [],
          "variables": [
            "result"
          ],
          "start_line": 11,
          "end_line": 15
        },
        {
          "name": "divide_all",
          "parameters": [
            {
              "name": null,
              "type": "List[Tuple[float, float]]"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "console.print_exception",
            "divide_by",
            "console.print"
          ],
          "variables": [
            "result"
          ],
          "start_line": 18,
          "end_line": 28
        }
      ],
      "variables": [
        "console",
        "result",
        "result",
        "DIVIDES"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\examples\\export.py",
      "imports": [
        "from rich.console import Console",
        "from rich.table import Table"
      ],
      "classes": [],
      "functions": [
        {
          "name": "print_table",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "table.add_row",
            "table.add_column",
            "Table",
            "console.print"
          ],
          "variables": [
            "table"
          ],
          "start_line": 11,
          "end_line": 23
        }
      ],
      "variables": [
        "console",
        "table",
        "file1",
        "text",
        "file2",
        "html",
        "file3",
        "file4"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\examples\\file_progress.py",
      "imports": [
        "from time import sleep",
        "from urllib.request import urlopen",
        "from rich.progress import wrap_file"
      ],
      "classes": [],
      "functions": [],
      "variables": [
        "response",
        "size"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\examples\\fullscreen.py",
      "imports": [
        "from datetime import datetime",
        "from rich import box",
        "from rich.align import Align",
        "from rich.console import Console, Group",
        "from rich.layout import Layout",
        "from rich.panel import Panel",
        "from rich.progress import BarColumn, Progress, SpinnerColumn, TextColumn",
        "from rich.syntax import Syntax",
        "from rich.table import Table",
        "from time import sleep",
        "from rich.live import Live"
      ],
      "classes": [
        {
          "name": "Header",
          "base_classes": null,
          "docstring": null,
          "methods": []
        }
      ],
      "functions": [
        {
          "name": "make_layout",
          "parameters": [],
          "return_type": "Layout",
          "docstring": null,
          "calls": [
            "layout[\"side\"].split",
            "layout.split",
            "Layout",
            "layout[\"main\"].split_row"
          ],
          "variables": [
            "layout"
          ],
          "start_line": 20,
          "end_line": 34
        },
        {
          "name": "make_sponsor_message",
          "parameters": [],
          "return_type": "Panel",
          "docstring": null,
          "calls": [
            "sponsor_message.add_row",
            "Table.grid",
            "Align.center",
            "message.add_row",
            "Panel",
            "message.add_column",
            "sponsor_message.add_column",
            "Group"
          ],
          "variables": [
            "sponsor_message",
            "message",
            "message_panel"
          ],
          "start_line": 37,
          "end_line": 69
        },
        {
          "name": "__rich__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "Panel",
          "docstring": null,
          "calls": [
            "grid.add_column",
            "datetime.now().ctime().replace",
            "Table.grid",
            "datetime.now().ctime",
            "grid.add_row",
            "Panel",
            "datetime.now"
          ],
          "variables": [
            "grid"
          ],
          "start_line": 75,
          "end_line": 83
        },
        {
          "name": "make_syntax",
          "parameters": [],
          "return_type": "Syntax",
          "docstring": null,
          "calls": [
            "Syntax"
          ],
          "variables": [
            "code",
            "syntax"
          ],
          "start_line": 86,
          "end_line": 127
        }
      ],
      "variables": [
        "console",
        "layout",
        "sponsor_message",
        "message",
        "message_panel",
        "grid",
        "code",
        "syntax",
        "job_progress",
        "total",
        "overall_progress",
        "overall_task",
        "progress_table",
        "layout",
        "completed"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\examples\\group.py",
      "imports": [
        "from rich import print",
        "from rich.console import Group",
        "from rich.panel import Panel"
      ],
      "classes": [],
      "functions": [],
      "variables": [
        "panel_group"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\examples\\group2.py",
      "imports": [
        "from rich import print",
        "from rich.console import group",
        "from rich.panel import Panel"
      ],
      "classes": [],
      "functions": [
        {
          "name": "get_panels",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Panel"
          ],
          "variables": [],
          "start_line": 7,
          "end_line": 9
        }
      ],
      "variables": []
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\examples\\highlighter.py",
      "imports": [
        "from rich.console import Console",
        "from rich.highlighter import RegexHighlighter",
        "from rich.theme import Theme"
      ],
      "classes": [
        {
          "name": "EmailHighlighter",
          "base_classes": "(RegexHighlighter)",
          "docstring": null,
          "methods": []
        }
      ],
      "functions": [],
      "variables": [
        "base_style",
        "highlights",
        "theme",
        "console"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\examples\\jobs.py",
      "imports": [
        "from time import sleep",
        "from rich.panel import Panel",
        "from rich.progress import Progress"
      ],
      "classes": [],
      "functions": [],
      "variables": [
        "JOBS",
        "progress",
        "master_task",
        "jobs_task"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\examples\\justify.py",
      "imports": [
        "from rich.console import Console"
      ],
      "classes": [],
      "functions": [],
      "variables": [
        "console",
        "style"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\examples\\justify2.py",
      "imports": [
        "from rich.console import Console",
        "from rich.panel import Panel"
      ],
      "classes": [],
      "functions": [],
      "variables": [
        "console",
        "style",
        "panel"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\examples\\layout.py",
      "imports": [
        "from datetime import datetime",
        "from time import sleep",
        "from rich.align import Align",
        "from rich.console import Console",
        "from rich.layout import Layout",
        "from rich.live import Live",
        "from rich.text import Text"
      ],
      "classes": [
        {
          "name": "Clock",
          "base_classes": null,
          "docstring": null,
          "methods": []
        }
      ],
      "functions": [
        {
          "name": "__rich__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "Text",
          "docstring": null,
          "calls": [
            "datetime.now().ctime",
            "Text",
            "datetime.now"
          ],
          "variables": [],
          "start_line": 44,
          "end_line": 45
        }
      ],
      "variables": [
        "console",
        "layout"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\examples\\link.py",
      "imports": [
        "from rich import print"
      ],
      "classes": [],
      "functions": [],
      "variables": []
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\examples\\listdir.py",
      "imports": [
        "import os",
        "import sys",
        "from rich import print",
        "from rich.columns import Columns",
        "from rich.text import Text"
      ],
      "classes": [],
      "functions": [
        {
          "name": "make_filename_text",
          "parameters": [
            {
              "name": "filename",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "text.stylize",
            "os.path.abspath",
            "os.path.isdir",
            "Text",
            "text.highlight_regex",
            "os.path.join"
          ],
          "variables": [
            "path",
            "text"
          ],
          "start_line": 22,
          "end_line": 27
        }
      ],
      "variables": [
        "root_path",
        "path",
        "text",
        "filenames",
        "filename_text",
        "columns"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\examples\\live_progress.py",
      "imports": [
        "from time import sleep",
        "from rich.live import Live",
        "from rich.panel import Panel",
        "from rich.progress import Progress, SpinnerColumn, BarColumn, TextColumn",
        "from rich.table import Table"
      ],
      "classes": [],
      "functions": [],
      "variables": [
        "job_progress",
        "job1",
        "job2",
        "job3",
        "total",
        "overall_progress",
        "overall_task",
        "progress_table",
        "completed"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\examples\\log.py",
      "imports": [
        "import time",
        "from rich.console import Console",
        "from rich.style import Style",
        "from rich.theme import Theme",
        "from rich.highlighter import RegexHighlighter"
      ],
      "classes": [
        {
          "name": "RequestHighlighter",
          "base_classes": "(RegexHighlighter)",
          "docstring": null,
          "methods": []
        }
      ],
      "functions": [
        {
          "name": "test_locals",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Console",
            "console.log"
          ],
          "variables": [
            "foo",
            "movies",
            "console"
          ],
          "start_line": 53,
          "end_line": 74
        }
      ],
      "variables": [
        "base_style",
        "highlights",
        "theme",
        "console",
        "request_highlighter",
        "foo",
        "movies",
        "console"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\examples\\overflow.py",
      "imports": [
        "from typing import List",
        "from rich.console import Console, OverflowMethod"
      ],
      "classes": [],
      "functions": [],
      "variables": [
        "console",
        "supercali",
        "overflow_methods"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\examples\\padding.py",
      "imports": [
        "from rich import print",
        "from rich.padding import Padding"
      ],
      "classes": [],
      "functions": [],
      "variables": [
        "test"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\examples\\print_calendar.py",
      "imports": [
        "import argparse",
        "import calendar",
        "from datetime import datetime",
        "from rich.align import Align",
        "from rich import box",
        "from rich.columns import Columns",
        "from rich.console import Console",
        "from rich.table import Table",
        "from rich.text import Text"
      ],
      "classes": [],
      "functions": [
        {
          "name": "print_calendar",
          "parameters": [
            {
              "name": "year",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Align.center",
            "cal.iterweekdays",
            "Table",
            "Console",
            "calendar.Calendar",
            "Text",
            "str",
            "day_label.stylize",
            "console.print",
            "table.add_row",
            "range",
            "enumerate",
            "cal.monthdayscalendar",
            "tables.append",
            "\"{:.3}\".format",
            "table.add_column",
            "days.append",
            "int",
            "datetime.today",
            "console.rule",
            "Columns"
          ],
          "variables": [
            "today",
            "year",
            "cal",
            "today_tuple",
            "tables",
            "table",
            "month_days",
            "days",
            "day_label",
            "console",
            "columns"
          ],
          "start_line": 20,
          "end_line": 62
        }
      ],
      "variables": [
        "today",
        "year",
        "cal",
        "today_tuple",
        "tables",
        "table",
        "month_days",
        "days",
        "day_label",
        "console",
        "columns",
        "parser",
        "args"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\examples\\rainbow.py",
      "imports": [
        "from random import randint",
        "from rich import print",
        "from rich.highlighter import Highlighter"
      ],
      "classes": [
        {
          "name": "RainbowHighlighter",
          "base_classes": "(Highlighter)",
          "docstring": null,
          "methods": []
        }
      ],
      "functions": [
        {
          "name": "highlight",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "text",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "range",
            "len",
            "text.stylize",
            "randint"
          ],
          "variables": [],
          "start_line": 14,
          "end_line": 16
        }
      ],
      "variables": [
        "rainbow"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\examples\\recursive_error.py",
      "imports": [
        "from rich.console import Console"
      ],
      "classes": [],
      "functions": [
        {
          "name": "foo",
          "parameters": [
            {
              "name": "n",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "bar"
          ],
          "variables": [],
          "start_line": 12,
          "end_line": 13
        },
        {
          "name": "bar",
          "parameters": [
            {
              "name": "n",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "foo"
          ],
          "variables": [],
          "start_line": 16,
          "end_line": 17
        }
      ],
      "variables": [
        "console"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\examples\\repr.py",
      "imports": [
        "import rich.repr",
        "from rich import print"
      ],
      "classes": [
        {
          "name": "Bird",
          "base_classes": null,
          "docstring": null,
          "methods": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "name",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "list"
          ],
          "variables": [],
          "start_line": 6,
          "end_line": 10
        }
      ],
      "variables": [
        "BIRDS"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\examples\\save_table_svg.py",
      "imports": [
        "from rich.console import Console",
        "from rich.table import Table",
        "import os",
        "import webbrowser"
      ],
      "classes": [],
      "functions": [],
      "variables": [
        "table",
        "console"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\examples\\screen.py",
      "imports": [
        "from time import sleep",
        "from rich.align import Align",
        "from rich.console import Console",
        "from rich.panel import Panel"
      ],
      "classes": [],
      "functions": [],
      "variables": [
        "console",
        "text"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\examples\\spinners.py",
      "imports": [
        "from time import sleep",
        "from rich.columns import Columns",
        "from rich.panel import Panel",
        "from rich.live import Live",
        "from rich.text import Text",
        "from rich.spinner import Spinner, SPINNERS"
      ],
      "classes": [],
      "functions": [],
      "variables": [
        "all_spinners"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\examples\\status.py",
      "imports": [
        "from time import sleep",
        "from rich.console import Console"
      ],
      "classes": [],
      "functions": [],
      "variables": [
        "console",
        "tasks",
        "task"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\examples\\suppress.py",
      "imports": [
        "import click",
        "from rich.traceback import install"
      ],
      "classes": [],
      "functions": [
        {
          "name": "hello",
          "parameters": [
            {
              "name": "count",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "range",
            "click.echo"
          ],
          "variables": [],
          "start_line": 15,
          "end_line": 19
        }
      ],
      "variables": []
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\examples\\table.py",
      "imports": [
        "from rich.console import Console",
        "from rich.table import Table"
      ],
      "classes": [],
      "functions": [],
      "variables": [
        "table",
        "console"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\examples\\table_movie.py",
      "imports": [
        "import time",
        "from contextlib import contextmanager",
        "from rich import box",
        "from rich.align import Align",
        "from rich.console import Console",
        "from rich.live import Live",
        "from rich.table import Table",
        "from rich.text import Text"
      ],
      "classes": [],
      "functions": [
        {
          "name": "beat",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "time.sleep"
          ],
          "variables": [],
          "start_line": 63,
          "end_line": 65
        }
      ],
      "variables": [
        "TABLE_DATA",
        "console",
        "BEAT_TIME",
        "table",
        "table_centered",
        "table_width",
        "original_width"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\examples\\top_lite_simulator.py",
      "imports": [
        "import datetime",
        "import random",
        "import time",
        "from dataclasses import dataclass",
        "from rich import box",
        "from rich.console import Console",
        "from rich.live import Live",
        "from rich.table import Table",
        "from typing import Literal"
      ],
      "classes": [
        {
          "name": "Process",
          "base_classes": null,
          "docstring": null,
          "methods": []
        }
      ],
      "functions": [
        {
          "name": "memory_str",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "str",
          "docstring": null,
          "calls": [
            "int",
            "str"
          ],
          "variables": [],
          "start_line": 25,
          "end_line": 30
        },
        {
          "name": "time_str",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "str",
          "docstring": null,
          "calls": [
            "datetime.datetime.now",
            "str"
          ],
          "variables": [],
          "start_line": 33,
          "end_line": 34
        },
        {
          "name": "generate_process",
          "parameters": [
            {
              "name": null,
              "type": "int"
            }
          ],
          "return_type": "Process",
          "docstring": null,
          "calls": [
            "datetime.datetime.now",
            "random.randint",
            "random.random",
            "datetime.timedelta",
            "Process"
          ],
          "variables": [],
          "start_line": 37,
          "end_line": 47
        },
        {
          "name": "create_process_table",
          "parameters": [
            {
              "name": null,
              "type": "int"
            }
          ],
          "return_type": "Table",
          "docstring": null,
          "calls": [
            "generate_process",
            "str",
            "table.add_row",
            "sorted",
            "Table",
            "range"
          ],
          "variables": [
            "processes",
            "table"
          ],
          "start_line": 50,
          "end_line": 71
        }
      ],
      "variables": [
        "pid",
        "command",
        "cpu_percent",
        "memory",
        "start_time",
        "thread_count",
        "state",
        "processes",
        "table",
        "console"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\examples\\tree.py",
      "imports": [
        "import os",
        "import pathlib",
        "import sys",
        "from rich import print",
        "from rich.filesize import decimal",
        "from rich.markup import escape",
        "from rich.text import Text",
        "from rich.tree import Tree"
      ],
      "classes": [],
      "functions": [
        {
          "name": "walk_directory",
          "parameters": [
            {
              "name": null,
              "type": "pathlib.Path"
            },
            {
              "name": null,
              "type": "Tree"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "path.is_file",
            "path.is_dir",
            "walk_directory",
            "text_filename.stylize",
            "tree.add",
            "escape",
            "sorted",
            "path.name.startswith",
            "decimal",
            "path.stat",
            "text_filename.append",
            "text_filename.highlight_regex",
            "Text",
            "path.name.lower",
            "pathlib.Path",
            "pathlib.Path(directory).iterdir"
          ],
          "variables": [
            "paths",
            "style",
            "branch",
            "text_filename",
            "file_size",
            "icon"
          ],
          "start_line": 16,
          "end_line": 42
        }
      ],
      "variables": [
        "paths",
        "style",
        "branch",
        "text_filename",
        "file_size",
        "icon",
        "directory",
        "tree"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\rich\\abc.py",
      "imports": [
        "from abc import ABC",
        "from rich.text import Text"
      ],
      "classes": [
        {
          "name": "RichRenderable",
          "base_classes": "(ABC)",
          "docstring": null,
          "methods": []
        },
        {
          "name": "Foo",
          "base_classes": null,
          "docstring": null,
          "methods": []
        }
      ],
      "functions": [
        {
          "name": "__subclasshook__",
          "parameters": [
            {
              "name": "cls",
              "type": null
            },
            {
              "name": null,
              "type": "type"
            }
          ],
          "return_type": "bool",
          "docstring": null,
          "calls": [
            "hasattr"
          ],
          "variables": [],
          "start_line": 16,
          "end_line": 18
        }
      ],
      "variables": [
        "t",
        "f"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\rich\\align.py",
      "imports": [
        "from itertools import chain",
        "from typing import TYPE_CHECKING, Iterable, Optional, Literal",
        "from .constrain import Constrain",
        "from .jupyter import JupyterMixin",
        "from .measure import Measurement",
        "from .segment import Segment",
        "from .style import StyleType",
        "from .console import Console, ConsoleOptions, RenderableType, RenderResult",
        "from rich.console import Console, Group",
        "from rich.highlighter import ReprHighlighter",
        "from rich.panel import Panel"
      ],
      "classes": [
        {
          "name": "Align",
          "base_classes": "(JupyterMixin)",
          "docstring": null,
          "methods": []
        },
        {
          "name": "VerticalCenter",
          "base_classes": "(JupyterMixin)",
          "docstring": null,
          "methods": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "\"RenderableType\""
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "ValueError"
          ],
          "variables": [],
          "start_line": 33,
          "end_line": 58
        },
        {
          "name": "__repr__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "str",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 60,
          "end_line": 61
        },
        {
          "name": "left",
          "parameters": [
            {
              "name": "cls",
              "type": null
            },
            {
              "name": null,
              "type": "\"RenderableType\""
            }
          ],
          "return_type": "\"Align\"",
          "docstring": null,
          "calls": [
            "cls"
          ],
          "variables": [],
          "start_line": 64,
          "end_line": 83
        },
        {
          "name": "center",
          "parameters": [
            {
              "name": "cls",
              "type": null
            },
            {
              "name": null,
              "type": "\"RenderableType\""
            }
          ],
          "return_type": "\"Align\"",
          "docstring": null,
          "calls": [
            "cls"
          ],
          "variables": [],
          "start_line": 86,
          "end_line": 105
        },
        {
          "name": "right",
          "parameters": [
            {
              "name": "cls",
              "type": null
            },
            {
              "name": null,
              "type": "\"RenderableType\""
            }
          ],
          "return_type": "\"Align\"",
          "docstring": null,
          "calls": [
            "cls"
          ],
          "variables": [],
          "start_line": 108,
          "end_line": 127
        },
        {
          "name": "__rich_console__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "\"Console\""
            },
            {
              "name": null,
              "type": "\"ConsoleOptions\""
            }
          ],
          "return_type": "\"RenderResult\"",
          "docstring": null,
          "calls": [
            "Constrain",
            "Segment.split_lines",
            "Segment.set_shape",
            "console.get_style",
            "generate_segments",
            "Segment.line",
            "console.measure",
            "list",
            "range",
            "Segment",
            "options.update",
            "min",
            "console.render",
            "chain",
            "Segment.apply_style",
            "Segment.get_shape",
            "blank_lines"
          ],
          "variables": [
            "align",
            "width",
            "rendered",
            "lines",
            "lines",
            "new_line",
            "excess_space",
            "style",
            "pad",
            "left",
            "pad",
            "pad_right",
            "pad",
            "blank_line",
            "vertical_height",
            "iter_segments",
            "bottom_space",
            "iter_segments",
            "top_space",
            "bottom_space",
            "iter_segments",
            "top_space",
            "iter_segments",
            "iter_segments",
            "style",
            "iter_segments"
          ],
          "start_line": 129,
          "end_line": 219
        },
        {
          "name": "generate_segments",
          "parameters": [],
          "return_type": "Iterable[Segment]",
          "docstring": null,
          "calls": [
            "Segment"
          ],
          "variables": [
            "pad",
            "left",
            "pad",
            "pad_right",
            "pad"
          ],
          "start_line": 147,
          "end_line": 184
        },
        {
          "name": "blank_lines",
          "parameters": [
            {
              "name": null,
              "type": "int"
            }
          ],
          "return_type": "Iterable[Segment]",
          "docstring": null,
          "calls": [
            "range"
          ],
          "variables": [],
          "start_line": 192,
          "end_line": 195
        },
        {
          "name": "__rich_measure__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "\"Console\""
            },
            {
              "name": null,
              "type": "\"ConsoleOptions\""
            }
          ],
          "return_type": "Measurement",
          "docstring": null,
          "calls": [
            "Measurement.get"
          ],
          "variables": [
            "measurement"
          ],
          "start_line": 221,
          "end_line": 225
        },
        {
          "name": "__init__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "\"RenderableType\""
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 240,
          "end_line": 246
        },
        {
          "name": "__repr__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "str",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 248,
          "end_line": 249
        },
        {
          "name": "__rich_console__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "\"Console\""
            },
            {
              "name": null,
              "type": "\"ConsoleOptions\""
            }
          ],
          "return_type": "\"RenderResult\"",
          "docstring": null,
          "calls": [
            "len",
            "console.get_style",
            "Segment.line",
            "range",
            "Segment",
            "options.update",
            "Segment.get_shape",
            "blank_lines",
            "console.render_lines"
          ],
          "variables": [
            "style",
            "lines",
            "new_line",
            "height",
            "top_space",
            "bottom_space",
            "blank_line"
          ],
          "start_line": 251,
          "end_line": 276
        },
        {
          "name": "blank_lines",
          "parameters": [
            {
              "name": null,
              "type": "int"
            }
          ],
          "return_type": "Iterable[Segment]",
          "docstring": null,
          "calls": [
            "range"
          ],
          "variables": [],
          "start_line": 265,
          "end_line": 268
        },
        {
          "name": "__rich_measure__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "\"Console\""
            },
            {
              "name": null,
              "type": "\"ConsoleOptions\""
            }
          ],
          "return_type": "Measurement",
          "docstring": null,
          "calls": [
            "Measurement.get"
          ],
          "variables": [
            "measurement"
          ],
          "start_line": 278,
          "end_line": 282
        }
      ],
      "variables": [
        "AlignMethod",
        "VerticalAlignMethod",
        "align",
        "width",
        "rendered",
        "lines",
        "lines",
        "new_line",
        "excess_space",
        "style",
        "pad",
        "left",
        "pad",
        "pad_right",
        "pad",
        "blank_line",
        "vertical_height",
        "iter_segments",
        "bottom_space",
        "iter_segments",
        "top_space",
        "bottom_space",
        "iter_segments",
        "top_space",
        "iter_segments",
        "iter_segments",
        "style",
        "iter_segments",
        "measurement",
        "style",
        "lines",
        "new_line",
        "height",
        "top_space",
        "bottom_space",
        "blank_line",
        "measurement",
        "highlighter",
        "console",
        "panel"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\rich\\ansi.py",
      "imports": [
        "import re",
        "import sys",
        "from contextlib import suppress",
        "from typing import Iterable, NamedTuple, Optional",
        "from .color import Color",
        "from .style import Style",
        "from .text import Text",
        "import io",
        "import os",
        "import pty",
        "import sys",
        "from .console import Console"
      ],
      "classes": [
        {
          "name": "_AnsiToken",
          "base_classes": "(NamedTuple)",
          "docstring": null,
          "methods": []
        },
        {
          "name": "AnsiDecoder",
          "base_classes": null,
          "docstring": null,
          "methods": []
        }
      ],
      "functions": [
        {
          "name": "_ansi_tokenize",
          "parameters": [
            {
              "name": null,
              "type": "str"
            }
          ],
          "return_type": "Iterable[_AnsiToken]",
          "docstring": null,
          "calls": [
            "len",
            "re_ansi.finditer",
            "match.span",
            "sgr.endswith",
            "match.groups",
            "_AnsiToken"
          ],
          "variables": [
            "position",
            "sgr",
            "osc",
            "position",
            "position"
          ],
          "start_line": 28,
          "end_line": 56
        },
        {
          "name": "__init__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "Style.null"
          ],
          "variables": [],
          "start_line": 123,
          "end_line": 124
        },
        {
          "name": "decode",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "str"
            }
          ],
          "return_type": "Iterable[Text]",
          "docstring": null,
          "calls": [
            "self.decode_line",
            "terminal_text.splitlines"
          ],
          "variables": [],
          "start_line": 126,
          "end_line": 136
        },
        {
          "name": "decode_line",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "str"
            }
          ],
          "return_type": "Text",
          "docstring": null,
          "calls": [
            "line.rsplit",
            "min",
            "Text",
            "next",
            "_ansi_tokenize",
            "_Style.from_color",
            "suppress",
            "_code.isdigit",
            "osc[2:].partition",
            "_Style.null",
            "append",
            "self.style.update_link",
            "_Style.parse",
            "osc.startswith",
            "sgr.split",
            "int",
            "iter",
            "from_rgb",
            "from_ansi"
          ],
          "variables": [
            "from_ansi",
            "from_rgb",
            "_Style",
            "text",
            "append",
            "line",
            "codes",
            "iter_codes",
            "color_type",
            "color_type"
          ],
          "start_line": 138,
          "end_line": 211
        },
        {
          "name": "read",
          "parameters": [
            {
              "name": null,
              "type": "int"
            }
          ],
          "return_type": "bytes",
          "docstring": null,
          "calls": [
            "os.read",
            "stdout.write"
          ],
          "variables": [
            "data"
          ],
          "start_line": 224,
          "end_line": 227
        }
      ],
      "variables": [
        "re_ansi",
        "plain",
        "sgr",
        "osc",
        "position",
        "sgr",
        "osc",
        "position",
        "position",
        "SGR_STYLE_MAP",
        "from_ansi",
        "from_rgb",
        "_Style",
        "text",
        "append",
        "line",
        "codes",
        "iter_codes",
        "color_type",
        "color_type",
        "decoder",
        "stdout",
        "data",
        "console",
        "stdout_result"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\rich\\bar.py",
      "imports": [
        "from typing import Optional, Union",
        "from .color import Color",
        "from .console import Console, ConsoleOptions, RenderResult",
        "from .jupyter import JupyterMixin",
        "from .measure import Measurement",
        "from .segment import Segment",
        "from .style import Style"
      ],
      "classes": [
        {
          "name": "Bar",
          "base_classes": "(JupyterMixin)",
          "docstring": null,
          "methods": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "float"
            },
            {
              "name": null,
              "type": "float"
            },
            {
              "name": null,
              "type": "float"
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "min",
            "Style",
            "max"
          ],
          "variables": [],
          "start_line": 29,
          "end_line": 43
        },
        {
          "name": "__repr__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "str",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 45,
          "end_line": 46
        },
        {
          "name": "__rich_console__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "Console"
            },
            {
              "name": null,
              "type": "ConsoleOptions"
            }
          ],
          "return_type": "RenderResult",
          "docstring": null,
          "calls": [
            "int",
            "len",
            "Segment",
            "min",
            "Segment.line"
          ],
          "variables": [
            "width",
            "prefix_complete_eights",
            "prefix_bar_count",
            "prefix_eights_count",
            "body_complete_eights",
            "body_bar_count",
            "body_eights_count",
            "prefix",
            "body",
            "suffix"
          ],
          "start_line": 48,
          "end_line": 84
        },
        {
          "name": "__rich_measure__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "Console"
            },
            {
              "name": null,
              "type": "ConsoleOptions"
            }
          ],
          "return_type": "Measurement",
          "docstring": null,
          "calls": [
            "Measurement"
          ],
          "variables": [],
          "start_line": 86,
          "end_line": 93
        }
      ],
      "variables": [
        "BEGIN_BLOCK_ELEMENTS",
        "END_BLOCK_ELEMENTS",
        "FULL_BLOCK",
        "width",
        "prefix_complete_eights",
        "prefix_bar_count",
        "prefix_eights_count",
        "body_complete_eights",
        "body_bar_count",
        "body_eights_count",
        "prefix",
        "body",
        "suffix"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\rich\\box.py",
      "imports": [
        "from typing import TYPE_CHECKING, Iterable, List, Literal",
        "from ._loop import loop_last",
        "from rich.console import ConsoleOptions",
        "from rich.columns import Columns",
        "from rich.panel import Panel",
        "from . import box as box",
        "from .console import Console",
        "from .table import Table",
        "from .text import Text"
      ],
      "classes": [
        {
          "name": "Box",
          "base_classes": null,
          "docstring": null,
          "methods": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "str"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "box.splitlines",
            "iter"
          ],
          "variables": [],
          "start_line": 27,
          "end_line": 59
        },
        {
          "name": "__repr__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "str",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 61,
          "end_line": 62
        },
        {
          "name": "__str__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "str",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 64,
          "end_line": 65
        },
        {
          "name": "substitute",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "\"ConsoleOptions\""
            }
          ],
          "return_type": "\"Box\"",
          "docstring": null,
          "calls": [
            "LEGACY_WINDOWS_SUBSTITUTIONS.get"
          ],
          "variables": [
            "box",
            "box",
            "box"
          ],
          "start_line": 67,
          "end_line": 83
        },
        {
          "name": "get_plain_headed_box",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "\"Box\"",
          "docstring": null,
          "calls": [
            "PLAIN_HEADED_SUBSTITUTIONS.get"
          ],
          "variables": [],
          "start_line": 85,
          "end_line": 93
        },
        {
          "name": "get_top",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "Iterable[int]"
            }
          ],
          "return_type": "str",
          "docstring": null,
          "calls": [
            "append",
            "\"\".join",
            "loop_last"
          ],
          "variables": [
            "parts",
            "append"
          ],
          "start_line": 95,
          "end_line": 113
        },
        {
          "name": "get_row",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "Iterable[int]"
            }
          ],
          "return_type": "str",
          "docstring": null,
          "calls": [
            "ValueError",
            "\"\".join",
            "append",
            "loop_last"
          ],
          "variables": [
            "left",
            "horizontal",
            "cross",
            "right",
            "left",
            "horizontal",
            "cross",
            "right",
            "left",
            "horizontal",
            "cross",
            "right",
            "left",
            "horizontal",
            "cross",
            "right",
            "parts",
            "append"
          ],
          "start_line": 115,
          "end_line": 162
        },
        {
          "name": "get_bottom",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "Iterable[int]"
            }
          ],
          "return_type": "str",
          "docstring": null,
          "calls": [
            "append",
            "\"\".join",
            "loop_last"
          ],
          "variables": [
            "parts",
            "append"
          ],
          "start_line": 164,
          "end_line": 182
        }
      ],
      "variables": [
        "box",
        "box",
        "box",
        "parts",
        "append",
        "left",
        "horizontal",
        "cross",
        "right",
        "left",
        "horizontal",
        "cross",
        "right",
        "left",
        "horizontal",
        "cross",
        "right",
        "left",
        "horizontal",
        "cross",
        "right",
        "parts",
        "append",
        "parts",
        "append",
        "ASCII",
        "ASCII2",
        "ASCII_DOUBLE_HEAD",
        "SQUARE",
        "SQUARE_DOUBLE_HEAD",
        "MINIMAL",
        "MINIMAL_HEAVY_HEAD",
        "MINIMAL_DOUBLE_HEAD",
        "SIMPLE",
        "SIMPLE_HEAD",
        "SIMPLE_HEAVY",
        "HORIZONTALS",
        "ROUNDED",
        "HEAVY",
        "HEAVY_EDGE",
        "HEAVY_HEAD",
        "DOUBLE",
        "DOUBLE_EDGE",
        "MARKDOWN",
        "LEGACY_WINDOWS_SUBSTITUTIONS",
        "PLAIN_HEADED_SUBSTITUTIONS",
        "console",
        "BOXES",
        "columns",
        "table"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\rich\\cells.py",
      "imports": [
        "from functools import lru_cache",
        "from typing import Callable",
        "from ._cell_widths import CELL_WIDTHS"
      ],
      "classes": [],
      "functions": [
        {
          "name": "cached_cell_len",
          "parameters": [
            {
              "name": null,
              "type": "str"
            }
          ],
          "return_type": "int",
          "docstring": null,
          "calls": [
            "len",
            "sum",
            "_is_single_cell_widths",
            "map"
          ],
          "variables": [],
          "start_line": 34,
          "end_line": 48
        },
        {
          "name": "cell_len",
          "parameters": [
            {
              "name": null,
              "type": "str"
            }
          ],
          "return_type": "int",
          "docstring": null,
          "calls": [
            "len",
            "sum",
            "_is_single_cell_widths",
            "_cell_len",
            "map"
          ],
          "variables": [],
          "start_line": 51,
          "end_line": 64
        },
        {
          "name": "get_character_cell_size",
          "parameters": [
            {
              "name": null,
              "type": "str"
            }
          ],
          "return_type": "int",
          "docstring": null,
          "calls": [
            "len",
            "ord"
          ],
          "variables": [
            "codepoint",
            "_table",
            "lower_bound",
            "upper_bound",
            "index",
            "upper_bound",
            "lower_bound",
            "index"
          ],
          "start_line": 68,
          "end_line": 93
        },
        {
          "name": "set_cell_size",
          "parameters": [
            {
              "name": null,
              "type": "str"
            },
            {
              "name": null,
              "type": "int"
            }
          ],
          "return_type": "str",
          "docstring": null,
          "calls": [
            "len",
            "_is_single_cell_widths",
            "cell_len"
          ],
          "variables": [
            "size",
            "cell_size",
            "start",
            "end",
            "pos",
            "before",
            "before_len",
            "end",
            "start"
          ],
          "start_line": 96,
          "end_line": 128
        },
        {
          "name": "chop_cells",
          "parameters": [
            {
              "name": null,
              "type": "str"
            },
            {
              "name": null,
              "type": "int"
            }
          ],
          "return_type": "list[str]",
          "docstring": null,
          "calls": [
            "_get_character_cell_size",
            "append_to_last_line",
            "\"\".join",
            "append_new_line"
          ],
          "variables": [
            "_get_character_cell_size",
            "lines",
            "append_new_line",
            "append_to_last_line",
            "total_width",
            "cell_width",
            "char_doesnt_fit",
            "append_to_last_line",
            "total_width"
          ],
          "start_line": 131,
          "end_line": 165
        }
      ],
      "variables": [
        "_SINGLE_CELL_UNICODE_RANGES",
        "_SINGLE_CELLS",
        "_is_single_cell_widths",
        "codepoint",
        "_table",
        "lower_bound",
        "upper_bound",
        "index",
        "upper_bound",
        "lower_bound",
        "index",
        "size",
        "cell_size",
        "start",
        "end",
        "pos",
        "before",
        "before_len",
        "end",
        "start",
        "_get_character_cell_size",
        "lines",
        "append_new_line",
        "append_to_last_line",
        "total_width",
        "cell_width",
        "char_doesnt_fit",
        "append_to_last_line",
        "total_width"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\rich\\color.py",
      "imports": [
        "import re",
        "import sys",
        "from colorsys import rgb_to_hls",
        "from enum import IntEnum",
        "from functools import lru_cache",
        "from typing import TYPE_CHECKING, NamedTuple, Optional, Tuple",
        "from ._palettes import EIGHT_BIT_PALETTE, STANDARD_PALETTE, WINDOWS_PALETTE",
        "from .color_triplet import ColorTriplet",
        "from .repr import Result, rich_repr",
        "from .terminal_theme import DEFAULT_TERMINAL_THEME",
        "from .terminal_theme import TerminalTheme",
        "from .text import Text",
        "from .style import Style",
        "from .text import Text",
        "from .console import Console",
        "from .table import Table",
        "from .text import Text"
      ],
      "classes": [
        {
          "name": "ColorSystem",
          "base_classes": "(IntEnum)",
          "docstring": null,
          "methods": []
        },
        {
          "name": "ColorType",
          "base_classes": "(IntEnum)",
          "docstring": null,
          "methods": []
        },
        {
          "name": "ColorParseError",
          "base_classes": "(Exception)",
          "docstring": null,
          "methods": []
        },
        {
          "name": "Color",
          "base_classes": "(NamedTuple)",
          "docstring": null,
          "methods": []
        }
      ],
      "functions": [
        {
          "name": "__repr__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "str",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 29,
          "end_line": 30
        },
        {
          "name": "__str__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "str",
          "docstring": null,
          "calls": [
            "repr"
          ],
          "variables": [],
          "start_line": 32,
          "end_line": 33
        },
        {
          "name": "__repr__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "str",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 45,
          "end_line": 46
        },
        {
          "name": "__rich__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "\"Text\"",
          "docstring": null,
          "calls": [
            "self.type.name.lower",
            "Style",
            "Text.assemble"
          ],
          "variables": [],
          "start_line": 315,
          "end_line": 324
        },
        {
          "name": "__rich_repr__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "Result",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 326,
          "end_line": 330
        },
        {
          "name": "system",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "ColorSystem",
          "docstring": null,
          "calls": [
            "ColorSystem",
            "int"
          ],
          "variables": [],
          "start_line": 333,
          "end_line": 337
        },
        {
          "name": "is_system_defined",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "bool",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 340,
          "end_line": 342
        },
        {
          "name": "is_default",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "bool",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 345,
          "end_line": 347
        },
        {
          "name": "get_truecolor",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "ColorTriplet",
          "docstring": null,
          "calls": [],
          "variables": [
            "theme"
          ],
          "start_line": 349,
          "end_line": 378
        },
        {
          "name": "from_ansi",
          "parameters": [
            {
              "name": "cls",
              "type": null
            },
            {
              "name": null,
              "type": "int"
            }
          ],
          "return_type": "\"Color\"",
          "docstring": null,
          "calls": [
            "cls"
          ],
          "variables": [],
          "start_line": 381,
          "end_line": 394
        },
        {
          "name": "from_triplet",
          "parameters": [
            {
              "name": "cls",
              "type": null
            },
            {
              "name": null,
              "type": "\"ColorTriplet\""
            }
          ],
          "return_type": "\"Color\"",
          "docstring": null,
          "calls": [
            "cls"
          ],
          "variables": [],
          "start_line": 397,
          "end_line": 406
        },
        {
          "name": "from_rgb",
          "parameters": [
            {
              "name": "cls",
              "type": null
            },
            {
              "name": null,
              "type": "float"
            },
            {
              "name": null,
              "type": "float"
            },
            {
              "name": null,
              "type": "float"
            }
          ],
          "return_type": "\"Color\"",
          "docstring": null,
          "calls": [
            "cls.from_triplet",
            "int",
            "ColorTriplet"
          ],
          "variables": [],
          "start_line": 409,
          "end_line": 420
        },
        {
          "name": "default",
          "parameters": [
            {
              "name": "cls",
              "type": null
            }
          ],
          "return_type": "\"Color\"",
          "docstring": null,
          "calls": [
            "cls"
          ],
          "variables": [],
          "start_line": 423,
          "end_line": 429
        },
        {
          "name": "parse",
          "parameters": [
            {
              "name": "cls",
              "type": null
            },
            {
              "name": null,
              "type": "str"
            }
          ],
          "return_type": "\"Color\"",
          "docstring": null,
          "calls": [
            "int",
            "RE_COLOR.match",
            "color_match.groups",
            "len",
            "cls",
            "color.lower",
            "color.lower().strip",
            "color_rgb.split",
            "ANSI_COLOR_NAMES.get",
            "all",
            "ColorParseError",
            "ColorTriplet"
          ],
          "variables": [
            "original_color",
            "color",
            "color_number",
            "color_match",
            "triplet",
            "number",
            "components",
            "triplet"
          ],
          "start_line": 433,
          "end_line": 482
        },
        {
          "name": "get_ansi_codes",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "Tuple[str, ...]",
          "docstring": null,
          "calls": [
            "str"
          ],
          "variables": [
            "_type",
            "number",
            "number"
          ],
          "start_line": 485,
          "end_line": 510
        },
        {
          "name": "downgrade",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "ColorSystem"
            }
          ],
          "return_type": "\"Color\"",
          "docstring": null,
          "calls": [
            "Color",
            "round",
            "STANDARD_PALETTE.match",
            "rgb_to_hls",
            "WINDOWS_PALETTE.match",
            "ColorTriplet"
          ],
          "variables": [
            "gray",
            "color_number",
            "color_number",
            "color_number",
            "six_red",
            "six_green",
            "six_blue",
            "color_number",
            "triplet",
            "triplet",
            "color_number",
            "triplet",
            "triplet",
            "color_number"
          ],
          "start_line": 513,
          "end_line": 568
        },
        {
          "name": "parse_rgb_hex",
          "parameters": [
            {
              "name": null,
              "type": "str"
            }
          ],
          "return_type": "ColorTriplet",
          "docstring": null,
          "calls": [
            "int",
            "len",
            "ColorTriplet"
          ],
          "variables": [
            "color"
          ],
          "start_line": 571,
          "end_line": 577
        },
        {
          "name": "blend_rgb",
          "parameters": [
            {
              "name": null,
              "type": "ColorTriplet"
            },
            {
              "name": null,
              "type": "ColorTriplet"
            }
          ],
          "return_type": "ColorTriplet",
          "docstring": null,
          "calls": [
            "int",
            "ColorTriplet"
          ],
          "variables": [
            "new_color"
          ],
          "start_line": 580,
          "end_line": 591
        }
      ],
      "variables": [
        "WINDOWS",
        "STANDARD",
        "EIGHT_BIT",
        "TRUECOLOR",
        "WINDOWS",
        "DEFAULT",
        "STANDARD",
        "EIGHT_BIT",
        "TRUECOLOR",
        "WINDOWS",
        "ANSI_COLOR_NAMES",
        "RE_COLOR",
        "name",
        "type",
        "number",
        "triplet",
        "theme",
        "original_color",
        "color",
        "color_number",
        "color_match",
        "triplet",
        "number",
        "components",
        "triplet",
        "_type",
        "number",
        "number",
        "gray",
        "color_number",
        "color_number",
        "color_number",
        "six_red",
        "six_green",
        "six_blue",
        "color_number",
        "triplet",
        "triplet",
        "color_number",
        "triplet",
        "triplet",
        "color_number",
        "color",
        "new_color",
        "console",
        "table",
        "colors",
        "color_cell",
        "color"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\rich\\color_triplet.py",
      "imports": [
        "from typing import NamedTuple, Tuple"
      ],
      "classes": [
        {
          "name": "ColorTriplet",
          "base_classes": "(NamedTuple)",
          "docstring": null,
          "methods": []
        }
      ],
      "functions": [
        {
          "name": "hex",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "str",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 15,
          "end_line": 18
        },
        {
          "name": "rgb",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "str",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 21,
          "end_line": 28
        },
        {
          "name": "normalized",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "Tuple[float, float, float]",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 31,
          "end_line": 38
        }
      ],
      "variables": [
        "red",
        "green",
        "blue"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\rich\\columns.py",
      "imports": [
        "from collections import defaultdict",
        "from itertools import chain",
        "from operator import itemgetter",
        "from typing import Dict, Iterable, List, Optional, Tuple",
        "from .align import Align, AlignMethod",
        "from .console import Console, ConsoleOptions, RenderableType, RenderResult",
        "from .constrain import Constrain",
        "from .measure import Measurement",
        "from .padding import Padding, PaddingDimensions",
        "from .table import Table",
        "from .text import TextType",
        "from .jupyter import JupyterMixin",
        "import os"
      ],
      "classes": [
        {
          "name": "Columns",
          "base_classes": "(JupyterMixin)",
          "docstring": null,
          "methods": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "list"
          ],
          "variables": [],
          "start_line": 31,
          "end_line": 52
        },
        {
          "name": "add_renderable",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "RenderableType"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "self.renderables.append"
          ],
          "variables": [],
          "start_line": 54,
          "end_line": 60
        },
        {
          "name": "__rich_console__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "Console"
            },
            {
              "name": null,
              "type": "ConsoleOptions"
            }
          ],
          "return_type": "RenderResult",
          "docstring": null,
          "calls": [
            "Constrain",
            "zip",
            "max",
            "widths.clear",
            "_Align",
            "get_renderable",
            "Table.grid",
            "sum",
            "widths.values",
            "list",
            "range",
            "get_measurement",
            "Padding.unpack",
            "add_row",
            "itemgetter",
            "table.add_column",
            "len",
            "chain.from_iterable",
            "defaultdict",
            "isinstance",
            "render_str",
            "iter_renderables"
          ],
          "variables": [
            "render_str",
            "renderables",
            "width_padding",
            "max_width",
            "widths",
            "column_count",
            "get_measurement",
            "renderable_widths",
            "renderable_widths",
            "item_count",
            "width_renderables",
            "column_lengths",
            "row_count",
            "cells",
            "row",
            "col",
            "row",
            "table",
            "column_count",
            "column_no",
            "total_width",
            "column_count",
            "column_no",
            "get_renderable",
            "_renderables",
            "_renderables",
            "align",
            "_Align",
            "_renderables",
            "right_to_left",
            "add_row",
            "row",
            "row"
          ],
          "start_line": 62,
          "end_line": 171
        },
        {
          "name": "iter_renderables",
          "parameters": [
            {
              "name": null,
              "type": "int"
            }
          ],
          "return_type": "Iterable[Tuple[int, Optional[RenderableType]]]",
          "docstring": null,
          "calls": [
            "len",
            "chain.from_iterable",
            "zip",
            "list",
            "range"
          ],
          "variables": [
            "item_count",
            "width_renderables",
            "column_lengths",
            "row_count",
            "cells",
            "row",
            "col",
            "row"
          ],
          "start_line": 86,
          "end_line": 117
        }
      ],
      "variables": [
        "render_str",
        "renderables",
        "width_padding",
        "max_width",
        "widths",
        "column_count",
        "get_measurement",
        "renderable_widths",
        "renderable_widths",
        "item_count",
        "width_renderables",
        "column_lengths",
        "row_count",
        "cells",
        "row",
        "col",
        "col",
        "row",
        "table",
        "column_count",
        "column_no",
        "total_width",
        "column_count",
        "column_no",
        "get_renderable",
        "_renderables",
        "_renderables",
        "align",
        "_Align",
        "_renderables",
        "right_to_left",
        "add_row",
        "row",
        "row",
        "console",
        "files",
        "columns"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\rich\\console.py",
      "imports": [
        "import inspect",
        "import os",
        "import sys",
        "import threading",
        "import zlib",
        "from abc import ABC, abstractmethod",
        "from dataclasses import dataclass, field",
        "from datetime import datetime",
        "from functools import wraps",
        "from getpass import getpass",
        "from html import escape",
        "from inspect import isclass",
        "from itertools import islice",
        "from math import ceil",
        "from time import monotonic",
        "from types import FrameType, ModuleType, TracebackType",
        "from typing import (\n    IO,\n    TYPE_CHECKING,\n    Any,\n    Callable,\n    Dict,\n    Iterable,\n    List,\n    Literal,\n    Mapping,\n    NamedTuple,\n    Optional,\n    Protocol,\n    TextIO,\n    Tuple,\n    Type,\n    Union,\n    cast,\n    runtime_checkable,\n)",
        "from rich._null_file import NULL_FILE",
        "from . import errors, themes",
        "from ._emoji_replace import _emoji_replace",
        "from ._export_format import CONSOLE_HTML_FORMAT, CONSOLE_SVG_FORMAT",
        "from ._fileno import get_fileno",
        "from ._log_render import FormatTimeCallable, LogRender",
        "from .align import Align, AlignMethod",
        "from .color import ColorSystem, blend_rgb",
        "from .control import Control",
        "from .emoji import EmojiVariant",
        "from .highlighter import NullHighlighter, ReprHighlighter",
        "from .markup import render as render_markup",
        "from .measure import Measurement, measure_renderables",
        "from .pager import Pager, SystemPager",
        "from .pretty import Pretty, is_expandable",
        "from .protocol import rich_cast",
        "from .region import Region",
        "from .scope import render_scope",
        "from .screen import Screen",
        "from .segment import Segment",
        "from .style import Style, StyleType",
        "from .styled import Styled",
        "from .terminal_theme import DEFAULT_TERMINAL_THEME, SVG_EXPORT_THEME, TerminalTheme",
        "from .text import Text, TextType",
        "from .theme import Theme, ThemeStack",
        "from ._windows import WindowsConsoleFeatures",
        "from .live import Live",
        "from .status import Status",
        "from ._windows import get_windows_console_features",
        "from .status import Status",
        "from .rule import Rule",
        "from rich.json import JSON",
        "from .traceback import Traceback",
        "from .jupyter import display",
        "from rich._win32_console import LegacyWindowsTerm",
        "from rich._windows_renderer import legacy_windows_render",
        "from rich.cells import cell_len"
      ],
      "classes": [
        {
          "name": "NoChange",
          "base_classes": null,
          "docstring": null,
          "methods": []
        },
        {
          "name": "ConsoleDimensions",
          "base_classes": "(NamedTuple)",
          "docstring": null,
          "methods": []
        },
        {
          "name": "ConsoleOptions",
          "base_classes": null,
          "docstring": null,
          "methods": []
        },
        {
          "name": "RichCast",
          "base_classes": "(Protocol)",
          "docstring": null,
          "methods": []
        },
        {
          "name": "ConsoleRenderable",
          "base_classes": "(Protocol)",
          "docstring": null,
          "methods": []
        },
        {
          "name": "CaptureError",
          "base_classes": "(Exception)",
          "docstring": null,
          "methods": []
        },
        {
          "name": "NewLine",
          "base_classes": null,
          "docstring": null,
          "methods": []
        },
        {
          "name": "ScreenUpdate",
          "base_classes": null,
          "docstring": null,
          "methods": []
        },
        {
          "name": "Capture",
          "base_classes": null,
          "docstring": null,
          "methods": []
        },
        {
          "name": "ThemeContext",
          "base_classes": null,
          "docstring": null,
          "methods": []
        },
        {
          "name": "PagerContext",
          "base_classes": null,
          "docstring": null,
          "methods": []
        },
        {
          "name": "ScreenContext",
          "base_classes": null,
          "docstring": null,
          "methods": []
        },
        {
          "name": "Group",
          "base_classes": null,
          "docstring": null,
          "methods": []
        },
        {
          "name": "ConsoleThreadLocals",
          "base_classes": "(threading.local)",
          "docstring": null,
          "methods": []
        },
        {
          "name": "RenderHook",
          "base_classes": "(ABC)",
          "docstring": null,
          "methods": []
        },
        {
          "name": "Console",
          "base_classes": null,
          "docstring": null,
          "methods": []
        }
      ],
      "functions": [
        {
          "name": "ascii_only",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "bool",
          "docstring": null,
          "calls": [
            "self.encoding.startswith"
          ],
          "variables": [],
          "start_line": 149,
          "end_line": 151
        },
        {
          "name": "copy",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "\"ConsoleOptions\"",
          "docstring": null,
          "calls": [
            "self.__dict__.copy",
            "ConsoleOptions.__new__"
          ],
          "variables": [
            "options"
          ],
          "start_line": 153,
          "end_line": 161
        },
        {
          "name": "update",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "\"ConsoleOptions\"",
          "docstring": null,
          "calls": [
            "isinstance",
            "self.copy",
            "max"
          ],
          "variables": [
            "options"
          ],
          "start_line": 163,
          "end_line": 198
        },
        {
          "name": "update_width",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "int"
            }
          ],
          "return_type": "\"ConsoleOptions\"",
          "docstring": null,
          "calls": [
            "self.copy",
            "max"
          ],
          "variables": [
            "options"
          ],
          "start_line": 200,
          "end_line": 211
        },
        {
          "name": "update_height",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "int"
            }
          ],
          "return_type": "\"ConsoleOptions\"",
          "docstring": null,
          "calls": [
            "self.copy"
          ],
          "variables": [
            "options"
          ],
          "start_line": 213,
          "end_line": 224
        },
        {
          "name": "reset_height",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "\"ConsoleOptions\"",
          "docstring": null,
          "calls": [
            "self.copy"
          ],
          "variables": [
            "options"
          ],
          "start_line": 226,
          "end_line": 234
        },
        {
          "name": "update_dimensions",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "int"
            },
            {
              "name": null,
              "type": "int"
            }
          ],
          "return_type": "\"ConsoleOptions\"",
          "docstring": null,
          "calls": [
            "self.copy",
            "max"
          ],
          "variables": [
            "options"
          ],
          "start_line": 236,
          "end_line": 249
        },
        {
          "name": "__rich__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "Union[\"ConsoleRenderable\", \"RichCast\", str]",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 256,
          "end_line": 259
        },
        {
          "name": "__rich_console__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "\"Console\""
            },
            {
              "name": null,
              "type": "\"ConsoleOptions\""
            }
          ],
          "return_type": "\"RenderResult\"",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 266,
          "end_line": 269
        },
        {
          "name": "__init__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 289,
          "end_line": 290
        },
        {
          "name": "__rich_console__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "\"Console\""
            },
            {
              "name": null,
              "type": "\"ConsoleOptions\""
            }
          ],
          "return_type": "Iterable[Segment]",
          "docstring": null,
          "calls": [
            "Segment"
          ],
          "variables": [],
          "start_line": 292,
          "end_line": 295
        },
        {
          "name": "__init__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "List[List[Segment]]"
            },
            {
              "name": null,
              "type": "int"
            },
            {
              "name": null,
              "type": "int"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 301,
          "end_line": 304
        },
        {
          "name": "__rich_console__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "\"Console\""
            },
            {
              "name": null,
              "type": "ConsoleOptions"
            }
          ],
          "return_type": "RenderResult",
          "docstring": null,
          "calls": [
            "enumerate",
            "move_to"
          ],
          "variables": [
            "x",
            "move_to"
          ],
          "start_line": 306,
          "end_line": 313
        },
        {
          "name": "__init__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "\"Console\""
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 324,
          "end_line": 326
        },
        {
          "name": "__enter__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "\"Capture\"",
          "docstring": null,
          "calls": [
            "self._console.begin_capture"
          ],
          "variables": [],
          "start_line": 328,
          "end_line": 330
        },
        {
          "name": "__exit__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "Optional[Type[BaseException]]"
            },
            {
              "name": null,
              "type": "Optional[BaseException]"
            },
            {
              "name": null,
              "type": "Optional[TracebackType]"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "self._console.end_capture"
          ],
          "variables": [],
          "start_line": 332,
          "end_line": 338
        },
        {
          "name": "get",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "str",
          "docstring": null,
          "calls": [
            "CaptureError"
          ],
          "variables": [],
          "start_line": 340,
          "end_line": 346
        },
        {
          "name": "__init__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "\"Console\""
            },
            {
              "name": null,
              "type": "Theme"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 352,
          "end_line": 355
        },
        {
          "name": "__enter__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "\"ThemeContext\"",
          "docstring": null,
          "calls": [
            "self.console.push_theme"
          ],
          "variables": [],
          "start_line": 357,
          "end_line": 359
        },
        {
          "name": "__exit__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "Optional[Type[BaseException]]"
            },
            {
              "name": null,
              "type": "Optional[BaseException]"
            },
            {
              "name": null,
              "type": "Optional[TracebackType]"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "self.console.pop_theme"
          ],
          "variables": [],
          "start_line": 361,
          "end_line": 367
        },
        {
          "name": "__init__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "\"Console\""
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "SystemPager"
          ],
          "variables": [],
          "start_line": 373,
          "end_line": 383
        },
        {
          "name": "__enter__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "\"PagerContext\"",
          "docstring": null,
          "calls": [
            "self._console._enter_buffer"
          ],
          "variables": [],
          "start_line": 385,
          "end_line": 387
        },
        {
          "name": "__exit__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "Optional[Type[BaseException]]"
            },
            {
              "name": null,
              "type": "Optional[BaseException]"
            },
            {
              "name": null,
              "type": "Optional[TracebackType]"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "self.pager.show",
            "self._console._render_buffer",
            "Segment.strip_links",
            "self._console._exit_buffer",
            "Segment.strip_styles"
          ],
          "variables": [
            "buffer",
            "segments",
            "segments",
            "segments",
            "content"
          ],
          "start_line": 389,
          "end_line": 406
        },
        {
          "name": "__init__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "\"Console\""
            },
            {
              "name": null,
              "type": "bool"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "Screen"
          ],
          "variables": [],
          "start_line": 412,
          "end_line": 418
        },
        {
          "name": "update",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "RenderableType"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "len",
            "Group",
            "self.console.print"
          ],
          "variables": [],
          "start_line": 420,
          "end_line": 436
        },
        {
          "name": "__enter__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "\"ScreenContext\"",
          "docstring": null,
          "calls": [
            "self.console.set_alt_screen",
            "self.console.show_cursor"
          ],
          "variables": [],
          "start_line": 438,
          "end_line": 442
        },
        {
          "name": "__exit__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "Optional[Type[BaseException]]"
            },
            {
              "name": null,
              "type": "Optional[BaseException]"
            },
            {
              "name": null,
              "type": "Optional[TracebackType]"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "self.console.set_alt_screen",
            "self.console.show_cursor"
          ],
          "variables": [],
          "start_line": 444,
          "end_line": 453
        },
        {
          "name": "__init__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "\"RenderableType\""
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 464,
          "end_line": 467
        },
        {
          "name": "renderables",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "List[\"RenderableType\"]",
          "docstring": null,
          "calls": [
            "list"
          ],
          "variables": [],
          "start_line": 470,
          "end_line": 473
        },
        {
          "name": "__rich_measure__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "\"Console\""
            },
            {
              "name": null,
              "type": "\"ConsoleOptions\""
            }
          ],
          "return_type": "\"Measurement\"",
          "docstring": null,
          "calls": [
            "Measurement",
            "measure_renderables"
          ],
          "variables": [],
          "start_line": 475,
          "end_line": 481
        },
        {
          "name": "__rich_console__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "\"Console\""
            },
            {
              "name": null,
              "type": "\"ConsoleOptions\""
            }
          ],
          "return_type": "RenderResult",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 483,
          "end_line": 486
        },
        {
          "name": "group",
          "parameters": [],
          "return_type": "Callable[..., Callable[..., Group]]",
          "docstring": null,
          "calls": [
            "method",
            "Group",
            "wraps"
          ],
          "variables": [
            "renderables"
          ],
          "start_line": 489,
          "end_line": 508
        },
        {
          "name": "decorator",
          "parameters": [
            {
              "name": null,
              "type": "Callable[..., Iterable[RenderableType]]"
            }
          ],
          "return_type": "Callable[..., Group]",
          "docstring": null,
          "calls": [
            "method",
            "Group",
            "wraps"
          ],
          "variables": [
            "renderables"
          ],
          "start_line": 496,
          "end_line": 506
        },
        {
          "name": "_replace",
          "parameters": [
            {
              "name": null,
              "type": "Any"
            },
            {
              "name": null,
              "type": "Any"
            }
          ],
          "return_type": "Group",
          "docstring": null,
          "calls": [
            "method",
            "Group"
          ],
          "variables": [
            "renderables"
          ],
          "start_line": 502,
          "end_line": 504
        },
        {
          "name": "_is_jupyter",
          "parameters": [],
          "return_type": "bool",
          "docstring": null,
          "calls": [
            "get_ipython",
            "os.getenv",
            "str"
          ],
          "variables": [
            "ipython",
            "shell"
          ],
          "start_line": 511,
          "end_line": 528
        },
        {
          "name": "process_renderables",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "List[ConsoleRenderable]"
            }
          ],
          "return_type": "List[ConsoleRenderable]",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 554,
          "end_line": 566
        },
        {
          "name": "get_windows_console_features",
          "parameters": [],
          "return_type": "\"WindowsConsoleFeatures\"",
          "docstring": null,
          "calls": [
            "get_windows_console_features"
          ],
          "variables": [
            "_windows_console_features"
          ],
          "start_line": 572,
          "end_line": 579
        },
        {
          "name": "detect_legacy_windows",
          "parameters": [],
          "return_type": "bool",
          "docstring": null,
          "calls": [
            "get_windows_console_features"
          ],
          "variables": [],
          "start_line": 582,
          "end_line": 584
        },
        {
          "name": "__init__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "int",
            "_is_jupyter",
            "self._detect_color_system",
            "self._environ.get",
            "lines.isdigit",
            "ThemeStack",
            "jupyter_columns.isdigit",
            "detect_legacy_windows",
            "columns.isdigit",
            "threading.RLock",
            "ConsoleThreadLocals",
            "LogRender",
            "jupyter_lines.isdigit"
          ],
          "variables": [
            "jupyter_columns",
            "width",
            "width",
            "jupyter_lines",
            "height",
            "height",
            "columns",
            "width",
            "lines",
            "height",
            "tty_interactive",
            "force_interactive",
            "force_interactive"
          ],
          "start_line": 625,
          "end_line": 757
        },
        {
          "name": "__repr__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "str",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 759,
          "end_line": 760
        },
        {
          "name": "file",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "IO[str]",
          "docstring": null,
          "calls": [
            "getattr"
          ],
          "variables": [
            "file",
            "file",
            "file"
          ],
          "start_line": 763,
          "end_line": 769
        },
        {
          "name": "file",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "IO[str]"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 772,
          "end_line": 774
        },
        {
          "name": "_buffer",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "List[Segment]",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 777,
          "end_line": 779
        },
        {
          "name": "_buffer_index",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "int",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 782,
          "end_line": 784
        },
        {
          "name": "_buffer_index",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "int"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 787,
          "end_line": 788
        },
        {
          "name": "_theme_stack",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "ThemeStack",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 791,
          "end_line": 793
        },
        {
          "name": "_detect_color_system",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "Optional[ColorSystem]",
          "docstring": null,
          "calls": [
            "get_windows_console_features",
            "_TERM_COLORS.get",
            "term.rpartition",
            "self._environ.get(\"TERM\", \"\").strip().lower",
            "self._environ.get",
            "self._environ.get(\"COLORTERM\", \"\").strip",
            "self._environ.get(\"TERM\", \"\").strip",
            "self._environ.get(\"COLORTERM\", \"\").strip().lower"
          ],
          "variables": [
            "windows_console_features",
            "color_term",
            "term",
            "color_system"
          ],
          "start_line": 795,
          "end_line": 817
        },
        {
          "name": "_enter_buffer",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 819,
          "end_line": 821
        },
        {
          "name": "_exit_buffer",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "self._check_buffer"
          ],
          "variables": [],
          "start_line": 823,
          "end_line": 826
        },
        {
          "name": "set_live",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "\"Live\""
            }
          ],
          "return_type": "bool",
          "docstring": null,
          "calls": [
            "len",
            "self._live_stack.append"
          ],
          "variables": [],
          "start_line": 828,
          "end_line": 842
        },
        {
          "name": "clear_live",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "self._live_stack.pop"
          ],
          "variables": [],
          "start_line": 844,
          "end_line": 847
        },
        {
          "name": "push_render_hook",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "RenderHook"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "self._render_hooks.append"
          ],
          "variables": [],
          "start_line": 849,
          "end_line": 856
        },
        {
          "name": "pop_render_hook",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "self._render_hooks.pop"
          ],
          "variables": [],
          "start_line": 858,
          "end_line": 861
        },
        {
          "name": "__enter__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "\"Console\"",
          "docstring": null,
          "calls": [
            "self._enter_buffer"
          ],
          "variables": [],
          "start_line": 863,
          "end_line": 866
        },
        {
          "name": "__exit__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "Any"
            },
            {
              "name": null,
              "type": "Any"
            },
            {
              "name": null,
              "type": "Any"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "self._exit_buffer"
          ],
          "variables": [],
          "start_line": 868,
          "end_line": 870
        },
        {
          "name": "begin_capture",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "self._enter_buffer"
          ],
          "variables": [],
          "start_line": 872,
          "end_line": 874
        },
        {
          "name": "end_capture",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "str",
          "docstring": null,
          "calls": [
            "self._exit_buffer",
            "self._render_buffer"
          ],
          "variables": [
            "render_result"
          ],
          "start_line": 876,
          "end_line": 885
        },
        {
          "name": "push_theme",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "Theme"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "self._theme_stack.push_theme"
          ],
          "variables": [],
          "start_line": 887,
          "end_line": 896
        },
        {
          "name": "pop_theme",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "self._theme_stack.pop_theme"
          ],
          "variables": [],
          "start_line": 898,
          "end_line": 900
        },
        {
          "name": "use_theme",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "Theme"
            }
          ],
          "return_type": "ThemeContext",
          "docstring": null,
          "calls": [
            "ThemeContext"
          ],
          "variables": [],
          "start_line": 902,
          "end_line": 912
        },
        {
          "name": "color_system",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "Optional[str]",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 915,
          "end_line": 925
        },
        {
          "name": "encoding",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "str",
          "docstring": null,
          "calls": [
            "getattr",
            "(getattr(self.file, \"encoding\", \"utf-8\") or \"utf-8\").lower"
          ],
          "variables": [],
          "start_line": 928,
          "end_line": 934
        },
        {
          "name": "is_terminal",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "bool",
          "docstring": null,
          "calls": [
            "getattr",
            "isatty",
            "sys.stdin.__module__.startswith",
            "hasattr",
            "environ.get"
          ],
          "variables": [
            "environ",
            "tty_compatible",
            "force_color",
            "isatty"
          ],
          "start_line": 937,
          "end_line": 982
        },
        {
          "name": "is_dumb_terminal",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "bool",
          "docstring": null,
          "calls": [
            "_term.lower",
            "self._environ.get"
          ],
          "variables": [
            "_term",
            "is_dumb"
          ],
          "start_line": 985,
          "end_line": 994
        },
        {
          "name": "options",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "ConsoleOptions",
          "docstring": null,
          "calls": [
            "ConsoleOptions"
          ],
          "variables": [
            "size"
          ],
          "start_line": 997,
          "end_line": 1008
        },
        {
          "name": "size",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "ConsoleDimensions",
          "docstring": null,
          "calls": [
            "int",
            "ConsoleDimensions",
            "self._environ.get",
            "lines.isdigit",
            "columns.isdigit",
            "os.get_terminal_size"
          ],
          "variables": [
            "width",
            "height",
            "streams",
            "columns",
            "width",
            "lines",
            "height",
            "width",
            "height"
          ],
          "start_line": 1011,
          "end_line": 1049
        },
        {
          "name": "size",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "Tuple[int, int]"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 1052,
          "end_line": 1060
        },
        {
          "name": "width",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "int",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 1063,
          "end_line": 1069
        },
        {
          "name": "width",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "int"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 1072,
          "end_line": 1078
        },
        {
          "name": "height",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "int",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 1081,
          "end_line": 1087
        },
        {
          "name": "height",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "int"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 1090,
          "end_line": 1096
        },
        {
          "name": "bell",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "Control.bell",
            "self.control"
          ],
          "variables": [],
          "start_line": 1098,
          "end_line": 1100
        },
        {
          "name": "capture",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "Capture",
          "docstring": null,
          "calls": [
            "Capture"
          ],
          "variables": [
            "capture"
          ],
          "start_line": 1102,
          "end_line": 1117
        },
        {
          "name": "pager",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "PagerContext",
          "docstring": null,
          "calls": [
            "PagerContext"
          ],
          "variables": [],
          "start_line": 1119,
          "end_line": 1140
        },
        {
          "name": "line",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "self.print",
            "NewLine"
          ],
          "variables": [],
          "start_line": 1142,
          "end_line": 1150
        },
        {
          "name": "clear",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "Control.home",
            "Control.clear",
            "self.control"
          ],
          "variables": [],
          "start_line": 1152,
          "end_line": 1161
        },
        {
          "name": "status",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "RenderableType"
            }
          ],
          "return_type": "\"Status\"",
          "docstring": null,
          "calls": [
            "Status"
          ],
          "variables": [
            "status_renderable"
          ],
          "start_line": 1163,
          "end_line": 1194
        },
        {
          "name": "show_cursor",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "bool",
          "docstring": null,
          "calls": [
            "Control.show_cursor",
            "self.control"
          ],
          "variables": [],
          "start_line": 1196,
          "end_line": 1205
        },
        {
          "name": "set_alt_screen",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "bool",
          "docstring": null,
          "calls": [
            "self.control",
            "Control.alt_screen"
          ],
          "variables": [
            "changed",
            "changed"
          ],
          "start_line": 1207,
          "end_line": 1226
        },
        {
          "name": "is_alt_screen",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "bool",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 1229,
          "end_line": 1235
        },
        {
          "name": "set_window_title",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "str"
            }
          ],
          "return_type": "bool",
          "docstring": null,
          "calls": [
            "self.control",
            "Control.title"
          ],
          "variables": [],
          "start_line": 1237,
          "end_line": 1267
        },
        {
          "name": "screen",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "\"ScreenContext\"",
          "docstring": null,
          "calls": [
            "ScreenContext"
          ],
          "variables": [],
          "start_line": 1269,
          "end_line": 1281
        },
        {
          "name": "measure",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "RenderableType"
            }
          ],
          "return_type": "Measurement",
          "docstring": null,
          "calls": [
            "Measurement.get"
          ],
          "variables": [
            "measurement"
          ],
          "start_line": 1283,
          "end_line": 1298
        },
        {
          "name": "render",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "RenderableType"
            }
          ],
          "return_type": "Iterable[Segment]",
          "docstring": null,
          "calls": [
            "iter",
            "renderable.__rich_console__",
            "self.render_str",
            "errors.NotRenderableError",
            "text_renderable.__rich_console__",
            "rich_cast",
            "_options.reset_height",
            "isclass",
            "hasattr",
            "isinstance",
            "self.render"
          ],
          "variables": [
            "_options",
            "render_iterable",
            "renderable",
            "render_iterable",
            "text_renderable",
            "render_iterable",
            "iter_render",
            "_Segment",
            "_options"
          ],
          "start_line": 1300,
          "end_line": 1349
        },
        {
          "name": "render_lines",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "RenderableType"
            }
          ],
          "return_type": "List[List[Segment]]",
          "docstring": null,
          "calls": [
            "islice",
            "len",
            "max",
            "list",
            "Segment",
            "lines.extend",
            "self.render",
            "Segment.apply_style",
            "Segment.split_and_crop_lines"
          ],
          "variables": [
            "render_options",
            "_rendered",
            "_rendered",
            "render_height",
            "render_height",
            "lines",
            "extra_lines",
            "pad_line"
          ],
          "start_line": 1351,
          "end_line": 1413
        },
        {
          "name": "render_str",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "str"
            }
          ],
          "return_type": "\"Text\"",
          "docstring": null,
          "calls": [
            "str",
            "highlight_text.copy_styles",
            "Text",
            "render_markup",
            "_emoji_replace",
            "_highlighter"
          ],
          "variables": [
            "emoji_enabled",
            "markup_enabled",
            "highlight_enabled",
            "rich_text",
            "rich_text",
            "_highlighter",
            "highlight_text"
          ],
          "start_line": 1415,
          "end_line": 1474
        },
        {
          "name": "get_style",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "Union[str, Style]"
            }
          ],
          "return_type": "Style",
          "docstring": null,
          "calls": [
            "Style.parse",
            "self._theme_stack.get",
            "self.get_style",
            "isinstance",
            "errors.MissingStyle",
            "style.copy"
          ],
          "variables": [
            "style",
            "style"
          ],
          "start_line": 1476,
          "end_line": 1504
        },
        {
          "name": "_collect_renderables",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "Iterable[Any]"
            },
            {
              "name": null,
              "type": "str"
            },
            {
              "name": null,
              "type": "str"
            }
          ],
          "return_type": "List[ConsoleRenderable]",
          "docstring": null,
          "calls": [
            "self.render_str",
            "str",
            "_append",
            "append",
            "is_expandable",
            "rich_cast",
            "Styled",
            "sep_text.join",
            "append_text",
            "isinstance",
            "self.get_style",
            "cast",
            "text.clear",
            "Text",
            "Align",
            "check_text",
            "Pretty",
            "_highlighter"
          ],
          "variables": [
            "renderables",
            "_append",
            "text",
            "append_text",
            "append",
            "append",
            "_highlighter",
            "_highlighter",
            "sep_text",
            "renderable",
            "style",
            "renderables"
          ],
          "start_line": 1506,
          "end_line": 1583
        },
        {
          "name": "align_append",
          "parameters": [
            {
              "name": null,
              "type": "RenderableType"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "_append",
            "cast",
            "Align"
          ],
          "variables": [],
          "start_line": 1539,
          "end_line": 1540
        },
        {
          "name": "check_text",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "sep_text.join",
            "append",
            "text.clear",
            "Text"
          ],
          "variables": [
            "sep_text"
          ],
          "start_line": 1548,
          "end_line": 1552
        },
        {
          "name": "rule",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "Rule",
            "self.print"
          ],
          "variables": [
            "rule"
          ],
          "start_line": 1585,
          "end_line": 1604
        },
        {
          "name": "control",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "Control"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "self._buffer.extend"
          ],
          "variables": [],
          "start_line": 1606,
          "end_line": 1614
        },
        {
          "name": "out",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "Any"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "sep.join",
            "self.print",
            "str"
          ],
          "variables": [
            "raw_output"
          ],
          "start_line": 1616,
          "end_line": 1646
        },
        {
          "name": "print",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "Any"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "\"\".join(segment.text for segment in new_segments).splitlines",
            "self._collect_renderables",
            "len",
            "new_segments.insert",
            "buffer_extend",
            "self._buffer.extend",
            "extend",
            "\"\".join",
            "self.options.update",
            "self.get_style",
            "NewLine",
            "min",
            "Segment.split_and_crop_lines",
            "Segment.apply_style",
            "Segment.line",
            "render",
            "hook.process_renderables"
          ],
          "variables": [
            "objects",
            "soft_wrap",
            "no_wrap",
            "overflow",
            "crop",
            "render_hooks",
            "renderables",
            "renderables",
            "render_options",
            "new_segments",
            "extend",
            "render",
            "buffer_extend"
          ],
          "start_line": 1648,
          "end_line": 1745
        },
        {
          "name": "print_json",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "isinstance",
            "TypeError",
            "self.print",
            "JSON.from_data",
            "JSON"
          ],
          "variables": [
            "json_renderable",
            "json_renderable"
          ],
          "start_line": 1747,
          "end_line": 1806
        },
        {
          "name": "update_screen",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "RenderableType"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "self.update_screen_lines",
            "render_options.update_dimensions",
            "errors.NoAltScreen",
            "self.render_lines"
          ],
          "variables": [
            "render_options",
            "x",
            "y",
            "render_options",
            "render_options",
            "lines"
          ],
          "start_line": 1808,
          "end_line": 1840
        },
        {
          "name": "update_screen_lines",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "List[List[Segment]]"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "errors.NoAltScreen",
            "self._buffer.extend",
            "self.render",
            "ScreenUpdate",
            "self._check_buffer"
          ],
          "variables": [
            "screen_update",
            "segments"
          ],
          "start_line": 1842,
          "end_line": 1860
        },
        {
          "name": "print_exception",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "Traceback",
            "self.print"
          ],
          "variables": [
            "traceback"
          ],
          "start_line": 1862,
          "end_line": 1895
        },
        {
          "name": "_caller_frame_info",
          "parameters": [
            {
              "name": null,
              "type": "int"
            }
          ],
          "return_type": "Tuple[str, int, Dict[str, Any]]",
          "docstring": null,
          "calls": [
            "inspect.stack",
            "currentframe"
          ],
          "variables": [
            "frame",
            "frame",
            "frame_info"
          ],
          "start_line": 1898,
          "end_line": 1930
        },
        {
          "name": "log",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "Any"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "self._collect_renderables",
            "render_scope",
            "self._log_render",
            "self.get_datetime",
            "buffer_extend",
            "Styled",
            "filename.startswith",
            "locals.items",
            "extend",
            "os.path.abspath",
            "NewLine",
            "self._caller_frame_info",
            "filename.rpartition",
            "key.startswith",
            "renderables.append",
            "Segment.split_and_crop_lines",
            "render",
            "hook.process_renderables"
          ],
          "variables": [
            "objects",
            "render_hooks",
            "renderables",
            "renderables",
            "link_path",
            "path",
            "locals_map",
            "renderables",
            "renderables",
            "new_segments",
            "extend",
            "render",
            "render_options",
            "buffer_extend"
          ],
          "start_line": 1932,
          "end_line": 2011
        },
        {
          "name": "on_broken_pipe",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "os.open",
            "sys.stdout.fileno",
            "os.dup2",
            "SystemExit"
          ],
          "variables": [
            "devnull"
          ],
          "start_line": 2013,
          "end_line": 2025
        },
        {
          "name": "_check_buffer",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "self.on_broken_pipe",
            "self._write_buffer"
          ],
          "variables": [],
          "start_line": 2027,
          "end_line": 2040
        },
        {
          "name": "_write_buffer",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "get_fileno",
            "len",
            "self.file.flush",
            "self._record_buffer.extend",
            "\"\".join",
            "legacy_windows_render",
            "self.file.write",
            "display",
            "list",
            "write",
            "batch.clear",
            "batch_append",
            "LegacyWindowsTerm",
            "text.splitlines",
            "Segment.remove_color",
            "self._render_buffer"
          ],
          "variables": [
            "use_legacy_windows_render",
            "fileno",
            "use_legacy_windows_render",
            "buffer",
            "buffer",
            "text",
            "write",
            "MAX_WRITE",
            "batch",
            "batch_append",
            "size",
            "size",
            "text"
          ],
          "start_line": 2042,
          "end_line": 2113
        },
        {
          "name": "_render_buffer",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "Iterable[Segment]"
            }
          ],
          "return_type": "str",
          "docstring": null,
          "calls": [
            "style.render",
            "Segment.remove_color",
            "\"\".join",
            "append"
          ],
          "variables": [
            "output",
            "append",
            "color_system",
            "legacy_windows",
            "not_terminal",
            "buffer",
            "rendered"
          ],
          "start_line": 2115,
          "end_line": 2137
        },
        {
          "name": "input",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "str",
          "docstring": null,
          "calls": [
            "stream.readline",
            "getpass",
            "self.print",
            "input"
          ],
          "variables": [
            "result",
            "result",
            "result"
          ],
          "start_line": 2139,
          "end_line": 2171
        },
        {
          "name": "export_text",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "str",
          "docstring": null,
          "calls": [
            "style.render",
            "\"\".join"
          ],
          "variables": [
            "text",
            "text"
          ],
          "start_line": 2173,
          "end_line": 2203
        },
        {
          "name": "save_text",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "str"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "write_file.write",
            "open",
            "self.export_text"
          ],
          "variables": [
            "text"
          ],
          "start_line": 2205,
          "end_line": 2217
        },
        {
          "name": "export_html",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "str",
          "docstring": null,
          "calls": [
            "len",
            "\"\\n\".join",
            "stylesheet_append",
            "append",
            "\"\".join",
            "style.get_html_style",
            "escape",
            "Segment.filter_control",
            "styles.items",
            "Segment.simplify",
            "styles.setdefault",
            "render_code_format.format"
          ],
          "variables": [
            "fragments",
            "append",
            "_theme",
            "stylesheet",
            "render_code_format",
            "text",
            "rule",
            "text",
            "text",
            "styles",
            "text",
            "rule",
            "style_number",
            "text",
            "text",
            "stylesheet_rules",
            "stylesheet_append",
            "stylesheet",
            "rendered_code"
          ],
          "start_line": 2219,
          "end_line": 2292
        },
        {
          "name": "save_html",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "str"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "self.export_html",
            "write_file.write",
            "open"
          ],
          "variables": [
            "html"
          ],
          "start_line": 2294,
          "end_line": 2323
        },
        {
          "name": "export_svg",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "str",
          "docstring": null,
          "calls": [
            "repr",
            "\";\".join",
            "\"\".join",
            "cell_len",
            "css_rules.append",
            "Style",
            "ceil",
            "text_group.append",
            "str",
            "escape(text).replace",
            "blend_rgb",
            "attribs.items",
            "list",
            "range",
            "k.lstrip(\"_\").replace",
            "k.lstrip",
            "Segment.filter_control",
            "self._record_buffer.clear",
            "enumerate",
            "\"\\n\".join",
            "\" \".join",
            "classes.items",
            "code_format.format",
            "zlib.adler32",
            "title.encode",
            "stringify",
            "Segment.split_and_crop_lines",
            "len",
            "make_tag",
            "text_backgrounds.append",
            "(\"\".join(repr(segment) for segment in segments)).encode",
            "escape",
            "escape_text",
            "isinstance",
            "style.bgcolor.get_truecolor",
            "get_svg_style",
            "format",
            "style.color.get_truecolor"
          ],
          "variables": [
            "style_cache",
            "css_rules",
            "color",
            "bgcolor",
            "color",
            "css",
            "_theme",
            "width",
            "char_height",
            "char_width",
            "line_height",
            "margin_top",
            "margin_right",
            "margin_bottom",
            "margin_left",
            "padding_top",
            "padding_right",
            "padding_bottom",
            "padding_left",
            "padding_width",
            "padding_height",
            "margin_width",
            "margin_height",
            "text_backgrounds",
            "text_group",
            "classes",
            "style_no",
            "tag_attribs",
            "segments",
            "unique_id",
            "y",
            "x",
            "style",
            "rules",
            "class_name",
            "has_background",
            "background",
            "bgcolor",
            "has_background",
            "background",
            "text_length",
            "line_offsets",
            "lines",
            "styles",
            "backgrounds",
            "matrix",
            "terminal_width",
            "terminal_height",
            "chrome",
            "title_color",
            "svg"
          ],
          "start_line": 2325,
          "end_line": 2574
        },
        {
          "name": "get_svg_style",
          "parameters": [
            {
              "name": null,
              "type": "Style"
            }
          ],
          "return_type": "str",
          "docstring": null,
          "calls": [
            "\";\".join",
            "blend_rgb",
            "style.bgcolor.get_truecolor",
            "css_rules.append",
            "style.color.get_truecolor"
          ],
          "variables": [
            "css_rules",
            "color",
            "bgcolor",
            "color",
            "css"
          ],
          "start_line": 2356,
          "end_line": 2387
        },
        {
          "name": "escape_text",
          "parameters": [
            {
              "name": null,
              "type": "str"
            }
          ],
          "return_type": "str",
          "docstring": null,
          "calls": [
            "escape(text).replace",
            "escape"
          ],
          "variables": [],
          "start_line": 2416,
          "end_line": 2418
        },
        {
          "name": "make_tag",
          "parameters": [
            {
              "name": null,
              "type": "str"
            },
            {
              "name": null,
              "type": "object"
            }
          ],
          "return_type": "str",
          "docstring": null,
          "calls": [
            "\" \".join",
            "str",
            "attribs.items",
            "isinstance",
            "k.lstrip(\"_\").replace",
            "k.lstrip",
            "format",
            "stringify"
          ],
          "variables": [
            "tag_attribs"
          ],
          "start_line": 2420,
          "end_line": 2438
        },
        {
          "name": "stringify",
          "parameters": [
            {
              "name": null,
              "type": "object"
            }
          ],
          "return_type": "str",
          "docstring": null,
          "calls": [
            "format",
            "isinstance",
            "str"
          ],
          "variables": [],
          "start_line": 2425,
          "end_line": 2428
        },
        {
          "name": "save_svg",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "str"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "write_file.write",
            "self.export_svg",
            "open"
          ],
          "variables": [
            "svg"
          ],
          "start_line": 2576,
          "end_line": 2612
        },
        {
          "name": "_svg_hash",
          "parameters": [
            {
              "name": null,
              "type": "str"
            }
          ],
          "return_type": "str",
          "docstring": null,
          "calls": [
            "zlib.adler32",
            "str",
            "svg_main_code.encode"
          ],
          "variables": [],
          "start_line": 2615,
          "end_line": 2624
        }
      ],
      "variables": [
        "JUPYTER_DEFAULT_COLUMNS",
        "JUPYTER_DEFAULT_LINES",
        "WINDOWS",
        "HighlighterType",
        "JustifyMethod",
        "OverflowMethod",
        "NO_CHANGE",
        "_STDIN_FILENO",
        "_STDIN_FILENO",
        "_STDOUT_FILENO",
        "_STDOUT_FILENO",
        "_STDERR_FILENO",
        "_STDERR_FILENO",
        "_STD_STREAMS",
        "_STD_STREAMS_OUTPUT",
        "_TERM_COLORS",
        "width",
        "height",
        "size",
        "legacy_windows",
        "min_width",
        "max_width",
        "is_terminal",
        "encoding",
        "max_height",
        "justify",
        "overflow",
        "no_wrap",
        "highlight",
        "markup",
        "height",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "RenderableType",
        "RenderResult",
        "_null_highlighter",
        "x",
        "move_to",
        "buffer",
        "segments",
        "segments",
        "segments",
        "content",
        "renderables",
        "ipython",
        "shell",
        "COLOR_SYSTEMS",
        "_COLOR_SYSTEMS_NAMES",
        "theme_stack",
        "buffer",
        "buffer_index",
        "_windows_console_features",
        "_windows_console_features",
        "_environ",
        "jupyter_columns",
        "width",
        "width",
        "jupyter_lines",
        "height",
        "height",
        "columns",
        "width",
        "lines",
        "height",
        "tty_interactive",
        "force_interactive",
        "force_interactive",
        "file",
        "file",
        "file",
        "windows_console_features",
        "color_term",
        "term",
        "color_system",
        "render_result",
        "environ",
        "tty_compatible",
        "force_color",
        "isatty",
        "_term",
        "is_dumb",
        "size",
        "width",
        "height",
        "streams",
        "columns",
        "width",
        "lines",
        "height",
        "width",
        "height",
        "capture",
        "status_renderable",
        "changed",
        "changed",
        "measurement",
        "_options",
        "render_iterable",
        "renderable",
        "render_iterable",
        "text_renderable",
        "render_iterable",
        "iter_render",
        "_Segment",
        "_options",
        "render_options",
        "_rendered",
        "_rendered",
        "render_height",
        "render_height",
        "lines",
        "extra_lines",
        "pad_line",
        "emoji_enabled",
        "markup_enabled",
        "highlight_enabled",
        "rich_text",
        "rich_text",
        "_highlighter",
        "highlight_text",
        "style",
        "style",
        "renderables",
        "_append",
        "text",
        "append_text",
        "append",
        "append",
        "_highlighter",
        "_highlighter",
        "sep_text",
        "renderable",
        "style",
        "renderables",
        "rule",
        "raw_output",
        "objects",
        "soft_wrap",
        "no_wrap",
        "overflow",
        "crop",
        "render_hooks",
        "renderables",
        "renderables",
        "render_options",
        "new_segments",
        "extend",
        "render",
        "buffer_extend",
        "json_renderable",
        "json_renderable",
        "render_options",
        "x",
        "y",
        "y",
        "render_options",
        "render_options",
        "lines",
        "screen_update",
        "segments",
        "traceback",
        "frame",
        "frame",
        "frame_info",
        "objects",
        "render_hooks",
        "renderables",
        "renderables",
        "link_path",
        "path",
        "locals_map",
        "renderables",
        "renderables",
        "new_segments",
        "extend",
        "render",
        "render_options",
        "buffer_extend",
        "devnull",
        "use_legacy_windows_render",
        "fileno",
        "use_legacy_windows_render",
        "buffer",
        "buffer",
        "text",
        "write",
        "MAX_WRITE",
        "batch",
        "batch_append",
        "size",
        "size",
        "text",
        "output",
        "append",
        "color_system",
        "legacy_windows",
        "not_terminal",
        "buffer",
        "rendered",
        "result",
        "result",
        "result",
        "text",
        "text",
        "text",
        "fragments",
        "append",
        "_theme",
        "stylesheet",
        "render_code_format",
        "text",
        "rule",
        "text",
        "text",
        "styles",
        "text",
        "rule",
        "style_number",
        "text",
        "text",
        "stylesheet_rules",
        "stylesheet_append",
        "stylesheet",
        "rendered_code",
        "html",
        "style_cache",
        "css_rules",
        "color",
        "bgcolor",
        "color",
        "css",
        "_theme",
        "width",
        "char_height",
        "char_width",
        "line_height",
        "margin_top",
        "margin_right",
        "margin_bottom",
        "margin_left",
        "padding_top",
        "padding_right",
        "padding_bottom",
        "padding_left",
        "padding_width",
        "padding_height",
        "margin_width",
        "margin_height",
        "text_backgrounds",
        "text_group",
        "classes",
        "style_no",
        "tag_attribs",
        "segments",
        "unique_id",
        "y",
        "x",
        "style",
        "rules",
        "class_name",
        "has_background",
        "background",
        "bgcolor",
        "has_background",
        "background",
        "text_length",
        "line_offsets",
        "lines",
        "styles",
        "backgrounds",
        "matrix",
        "terminal_width",
        "terminal_height",
        "chrome",
        "title_color",
        "svg",
        "svg",
        "console"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\rich\\constrain.py",
      "imports": [
        "from typing import Optional, TYPE_CHECKING",
        "from .jupyter import JupyterMixin",
        "from .measure import Measurement",
        "from .console import Console, ConsoleOptions, RenderableType, RenderResult"
      ],
      "classes": [
        {
          "name": "Constrain",
          "base_classes": "(JupyterMixin)",
          "docstring": null,
          "methods": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "\"RenderableType\""
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 18,
          "end_line": 20
        },
        {
          "name": "__rich_console__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "\"Console\""
            },
            {
              "name": null,
              "type": "\"ConsoleOptions\""
            }
          ],
          "return_type": "\"RenderResult\"",
          "docstring": null,
          "calls": [
            "console.render",
            "options.update_width",
            "min"
          ],
          "variables": [
            "child_options"
          ],
          "start_line": 22,
          "end_line": 29
        },
        {
          "name": "__rich_measure__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "\"Console\""
            },
            {
              "name": null,
              "type": "\"ConsoleOptions\""
            }
          ],
          "return_type": "\"Measurement\"",
          "docstring": null,
          "calls": [
            "options.update_width",
            "Measurement.get"
          ],
          "variables": [
            "options",
            "measurement"
          ],
          "start_line": 31,
          "end_line": 37
        }
      ],
      "variables": [
        "child_options",
        "options",
        "measurement"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\rich\\containers.py",
      "imports": [
        "from itertools import zip_longest",
        "from typing import (\n    TYPE_CHECKING,\n    Iterable,\n    Iterator,\n    List,\n    Optional,\n    TypeVar,\n    Union,\n    overload,\n)",
        "from .console import (\n        Console,\n        ConsoleOptions,\n        JustifyMethod,\n        OverflowMethod,\n        RenderResult,\n        RenderableType,\n    )",
        "from .text import Text",
        "from .cells import cell_len",
        "from .measure import Measurement",
        "from .text import Text"
      ],
      "classes": [
        {
          "name": "Renderables",
          "base_classes": null,
          "docstring": null,
          "methods": []
        },
        {
          "name": "Lines",
          "base_classes": null,
          "docstring": null,
          "methods": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "list"
          ],
          "variables": [],
          "start_line": 33,
          "end_line": 38
        },
        {
          "name": "__rich_console__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "\"Console\""
            },
            {
              "name": null,
              "type": "\"ConsoleOptions\""
            }
          ],
          "return_type": "\"RenderResult\"",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 40,
          "end_line": 44
        },
        {
          "name": "__rich_measure__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "\"Console\""
            },
            {
              "name": null,
              "type": "\"ConsoleOptions\""
            }
          ],
          "return_type": "\"Measurement\"",
          "docstring": null,
          "calls": [
            "Measurement",
            "Measurement.get",
            "max"
          ],
          "variables": [
            "dimensions",
            "_min",
            "_max"
          ],
          "start_line": 46,
          "end_line": 57
        },
        {
          "name": "append",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "\"RenderableType\""
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "self._renderables.append"
          ],
          "variables": [],
          "start_line": 59,
          "end_line": 60
        },
        {
          "name": "__iter__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "Iterable[\"RenderableType\"]",
          "docstring": null,
          "calls": [
            "iter"
          ],
          "variables": [],
          "start_line": 62,
          "end_line": 63
        },
        {
          "name": "__init__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "list"
          ],
          "variables": [],
          "start_line": 69,
          "end_line": 70
        },
        {
          "name": "__repr__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "str",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 72,
          "end_line": 73
        },
        {
          "name": "__iter__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "Iterator[\"Text\"]",
          "docstring": null,
          "calls": [
            "iter"
          ],
          "variables": [],
          "start_line": 75,
          "end_line": 76
        },
        {
          "name": "__getitem__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "int"
            }
          ],
          "return_type": "\"Text\"",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 79,
          "end_line": 80
        },
        {
          "name": "__getitem__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "slice"
            }
          ],
          "return_type": "List[\"Text\"]",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 83,
          "end_line": 84
        },
        {
          "name": "__getitem__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "Union[slice, int]"
            }
          ],
          "return_type": "Union[\"Text\", List[\"Text\"]]",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 86,
          "end_line": 87
        },
        {
          "name": "__setitem__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "int"
            },
            {
              "name": null,
              "type": "\"Text\""
            }
          ],
          "return_type": "\"Lines\"",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 89,
          "end_line": 91
        },
        {
          "name": "__len__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "int",
          "docstring": null,
          "calls": [
            "self._lines.__len__"
          ],
          "variables": [],
          "start_line": 93,
          "end_line": 94
        },
        {
          "name": "__rich_console__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "\"Console\""
            },
            {
              "name": null,
              "type": "\"ConsoleOptions\""
            }
          ],
          "return_type": "\"RenderResult\"",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 96,
          "end_line": 100
        },
        {
          "name": "append",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "\"Text\""
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "self._lines.append"
          ],
          "variables": [],
          "start_line": 102,
          "end_line": 103
        },
        {
          "name": "extend",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "Iterable[\"Text\"]"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "self._lines.extend"
          ],
          "variables": [],
          "start_line": 105,
          "end_line": 106
        },
        {
          "name": "pop",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "\"Text\"",
          "docstring": null,
          "calls": [
            "self._lines.pop"
          ],
          "variables": [],
          "start_line": 108,
          "end_line": 109
        },
        {
          "name": "justify",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "\"Console\""
            },
            {
              "name": null,
              "type": "int"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "line.split",
            "len",
            "enumerate",
            "tokens.append",
            "sum",
            "next_word.get_style_at_offset",
            "line.truncate",
            "line.rstrip",
            "Text(\"\").join",
            "line.pad_right",
            "range",
            "word.get_style_at_offset",
            "cell_len",
            "Text",
            "line.pad_left",
            "zip_longest"
          ],
          "variables": [
            "words",
            "words_size",
            "num_spaces",
            "spaces",
            "index",
            "index",
            "tokens",
            "style",
            "next_style",
            "space_style"
          ],
          "start_line": 111,
          "end_line": 167
        }
      ],
      "variables": [
        "T",
        "dimensions",
        "_min",
        "_max",
        "words",
        "words_size",
        "num_spaces",
        "spaces",
        "index",
        "index",
        "tokens",
        "style",
        "next_style",
        "space_style"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\rich\\control.py",
      "imports": [
        "import time",
        "from typing import TYPE_CHECKING, Callable, Dict, Iterable, List, Union, Final",
        "from .segment import ControlCode, ControlType, Segment",
        "from .console import Console, ConsoleOptions, RenderResult",
        "from rich.console import Console"
      ],
      "classes": [
        {
          "name": "Control",
          "base_classes": null,
          "docstring": null,
          "methods": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "Union[ControlType, ControlCode]"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "_format_map[code]",
            "isinstance",
            "\"\".join",
            "Segment"
          ],
          "variables": [
            "control_codes",
            "_format_map",
            "rendered_codes"
          ],
          "start_line": 58,
          "end_line": 66
        },
        {
          "name": "bell",
          "parameters": [
            {
              "name": "cls",
              "type": null
            }
          ],
          "return_type": "\"Control\"",
          "docstring": null,
          "calls": [
            "cls"
          ],
          "variables": [],
          "start_line": 69,
          "end_line": 71
        },
        {
          "name": "home",
          "parameters": [
            {
              "name": "cls",
              "type": null
            }
          ],
          "return_type": "\"Control\"",
          "docstring": null,
          "calls": [
            "cls"
          ],
          "variables": [],
          "start_line": 74,
          "end_line": 76
        },
        {
          "name": "move",
          "parameters": [
            {
              "name": "cls",
              "type": null
            }
          ],
          "return_type": "\"Control\"",
          "docstring": null,
          "calls": [
            "get_codes",
            "cls",
            "abs"
          ],
          "variables": [
            "control",
            "control"
          ],
          "start_line": 79,
          "end_line": 105
        },
        {
          "name": "get_codes",
          "parameters": [],
          "return_type": "Iterable[ControlCode]",
          "docstring": null,
          "calls": [
            "abs"
          ],
          "variables": [
            "control"
          ],
          "start_line": 91,
          "end_line": 102
        },
        {
          "name": "move_to_column",
          "parameters": [
            {
              "name": "cls",
              "type": null
            },
            {
              "name": null,
              "type": "int"
            }
          ],
          "return_type": "\"Control\"",
          "docstring": null,
          "calls": [
            "cls",
            "abs"
          ],
          "variables": [],
          "start_line": 108,
          "end_line": 129
        },
        {
          "name": "move_to",
          "parameters": [
            {
              "name": "cls",
              "type": null
            },
            {
              "name": null,
              "type": "int"
            },
            {
              "name": null,
              "type": "int"
            }
          ],
          "return_type": "\"Control\"",
          "docstring": null,
          "calls": [
            "cls"
          ],
          "variables": [],
          "start_line": 132,
          "end_line": 142
        },
        {
          "name": "clear",
          "parameters": [
            {
              "name": "cls",
              "type": null
            }
          ],
          "return_type": "\"Control\"",
          "docstring": null,
          "calls": [
            "cls"
          ],
          "variables": [],
          "start_line": 145,
          "end_line": 147
        },
        {
          "name": "show_cursor",
          "parameters": [
            {
              "name": "cls",
              "type": null
            },
            {
              "name": null,
              "type": "bool"
            }
          ],
          "return_type": "\"Control\"",
          "docstring": null,
          "calls": [
            "cls"
          ],
          "variables": [],
          "start_line": 150,
          "end_line": 152
        },
        {
          "name": "alt_screen",
          "parameters": [
            {
              "name": "cls",
              "type": null
            },
            {
              "name": null,
              "type": "bool"
            }
          ],
          "return_type": "\"Control\"",
          "docstring": null,
          "calls": [
            "cls"
          ],
          "variables": [],
          "start_line": 155,
          "end_line": 160
        },
        {
          "name": "title",
          "parameters": [
            {
              "name": "cls",
              "type": null
            },
            {
              "name": null,
              "type": "str"
            }
          ],
          "return_type": "\"Control\"",
          "docstring": null,
          "calls": [
            "cls"
          ],
          "variables": [],
          "start_line": 163,
          "end_line": 169
        },
        {
          "name": "__str__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "str",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 171,
          "end_line": 172
        },
        {
          "name": "__rich_console__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "\"Console\""
            },
            {
              "name": null,
              "type": "\"ConsoleOptions\""
            }
          ],
          "return_type": "\"RenderResult\"",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 174,
          "end_line": 178
        },
        {
          "name": "strip_control_codes",
          "parameters": [
            {
              "name": null,
              "type": "str"
            }
          ],
          "return_type": "str",
          "docstring": null,
          "calls": [
            "text.translate"
          ],
          "variables": [],
          "start_line": 181,
          "end_line": 192
        },
        {
          "name": "escape_control_codes",
          "parameters": [
            {
              "name": null,
              "type": "str"
            }
          ],
          "return_type": "str",
          "docstring": null,
          "calls": [
            "text.translate"
          ],
          "variables": [],
          "start_line": 195,
          "end_line": 208
        }
      ],
      "variables": [
        "STRIP_CONTROL_CODES",
        "_CONTROL_STRIP_TRANSLATE",
        "CONTROL_ESCAPE",
        "CONTROL_CODES_FORMAT",
        "__slots__",
        "control_codes",
        "_format_map",
        "rendered_codes",
        "control",
        "control",
        "console"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\rich\\default_styles.py",
      "imports": [
        "from typing import Dict",
        "from .style import Style",
        "import argparse",
        "import io",
        "from rich.console import Console",
        "from rich.table import Table",
        "from rich.text import Text"
      ],
      "classes": [],
      "functions": [],
      "variables": [
        "DEFAULT_STYLES",
        "parser",
        "args",
        "html",
        "console",
        "table"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\rich\\diagnose.py",
      "imports": [
        "import os",
        "import platform",
        "from rich import inspect",
        "from rich.console import Console, get_windows_console_features",
        "from rich.panel import Panel",
        "from rich.pretty import Pretty"
      ],
      "classes": [],
      "functions": [
        {
          "name": "report",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "Panel.fit",
            "get_windows_console_features",
            "console.print",
            "inspect",
            "platform.system",
            "Console",
            "os.getenv",
            "Pretty"
          ],
          "variables": [
            "console",
            "features",
            "env_names",
            "env"
          ],
          "start_line": 10,
          "end_line": 35
        }
      ],
      "variables": [
        "console",
        "features",
        "env_names",
        "env"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\rich\\emoji.py",
      "imports": [
        "import sys",
        "from typing import TYPE_CHECKING, Optional, Union, Literal",
        "from .jupyter import JupyterMixin",
        "from .segment import Segment",
        "from .style import Style",
        "from ._emoji_codes import EMOJI",
        "from ._emoji_replace import _emoji_replace",
        "from .console import Console, ConsoleOptions, RenderResult",
        "import sys",
        "from rich.columns import Columns",
        "from rich.console import Console"
      ],
      "classes": [
        {
          "name": "NoEmoji",
          "base_classes": "(Exception)",
          "docstring": null,
          "methods": []
        },
        {
          "name": "Emoji",
          "base_classes": "(JupyterMixin)",
          "docstring": null,
          "methods": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "str"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "self.VARIANTS.get",
            "NoEmoji"
          ],
          "variables": [],
          "start_line": 27,
          "end_line": 50
        },
        {
          "name": "replace",
          "parameters": [
            {
              "name": "cls",
              "type": null
            },
            {
              "name": null,
              "type": "str"
            }
          ],
          "return_type": "str",
          "docstring": null,
          "calls": [
            "_emoji_replace"
          ],
          "variables": [],
          "start_line": 53,
          "end_line": 62
        },
        {
          "name": "__repr__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "str",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 64,
          "end_line": 65
        },
        {
          "name": "__str__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "str",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 67,
          "end_line": 68
        },
        {
          "name": "__rich_console__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "\"Console\""
            },
            {
              "name": null,
              "type": "\"ConsoleOptions\""
            }
          ],
          "return_type": "\"RenderResult\"",
          "docstring": null,
          "calls": [
            "Segment",
            "console.get_style"
          ],
          "variables": [],
          "start_line": 70,
          "end_line": 73
        }
      ],
      "variables": [
        "EmojiVariant",
        "__slots__",
        "VARIANTS",
        "console",
        "columns"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\rich\\errors.py",
      "imports": [],
      "classes": [
        {
          "name": "ConsoleError",
          "base_classes": "(Exception)",
          "docstring": null,
          "methods": []
        },
        {
          "name": "StyleError",
          "base_classes": "(Exception)",
          "docstring": null,
          "methods": []
        },
        {
          "name": "StyleSyntaxError",
          "base_classes": "(ConsoleError)",
          "docstring": null,
          "methods": []
        },
        {
          "name": "MissingStyle",
          "base_classes": "(StyleError)",
          "docstring": null,
          "methods": []
        },
        {
          "name": "StyleStackError",
          "base_classes": "(ConsoleError)",
          "docstring": null,
          "methods": []
        },
        {
          "name": "NotRenderableError",
          "base_classes": "(ConsoleError)",
          "docstring": null,
          "methods": []
        },
        {
          "name": "MarkupError",
          "base_classes": "(ConsoleError)",
          "docstring": null,
          "methods": []
        },
        {
          "name": "LiveError",
          "base_classes": "(ConsoleError)",
          "docstring": null,
          "methods": []
        },
        {
          "name": "NoAltScreen",
          "base_classes": "(ConsoleError)",
          "docstring": null,
          "methods": []
        }
      ],
      "functions": [],
      "variables": []
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\rich\\filesize.py",
      "imports": [
        "from typing import Iterable, List, Optional, Tuple"
      ],
      "classes": [],
      "functions": [
        {
          "name": "_to_str",
          "parameters": [
            {
              "name": null,
              "type": "int"
            },
            {
              "name": null,
              "type": "Iterable[str]"
            },
            {
              "name": null,
              "type": "int"
            }
          ],
          "return_type": "str",
          "docstring": null,
          "calls": [
            "\"{:,.{precision}f}{separator}{}\".format",
            "enumerate"
          ],
          "variables": [
            "unit"
          ],
          "start_line": 18,
          "end_line": 40
        },
        {
          "name": "pick_unit_and_suffix",
          "parameters": [
            {
              "name": null,
              "type": "int"
            },
            {
              "name": null,
              "type": "List[str]"
            },
            {
              "name": null,
              "type": "int"
            }
          ],
          "return_type": "Tuple[int, str]",
          "docstring": null,
          "calls": [
            "enumerate"
          ],
          "variables": [
            "unit"
          ],
          "start_line": 43,
          "end_line": 49
        },
        {
          "name": "decimal",
          "parameters": [
            {
              "name": null,
              "type": "int"
            }
          ],
          "return_type": "str",
          "docstring": null,
          "calls": [
            "_to_str"
          ],
          "variables": [],
          "start_line": 52,
          "end_line": 88
        }
      ],
      "variables": [
        "__all__",
        "unit",
        "unit"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\rich\\file_proxy.py",
      "imports": [
        "import io",
        "from typing import IO, TYPE_CHECKING, Any, List",
        "from .ansi import AnsiDecoder",
        "from .text import Text",
        "from .console import Console"
      ],
      "classes": [
        {
          "name": "FileProxy",
          "base_classes": "(io.TextIOBase)",
          "docstring": null,
          "methods": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "\"Console\""
            },
            {
              "name": null,
              "type": "IO[str]"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "AnsiDecoder"
          ],
          "variables": [],
          "start_line": 14,
          "end_line": 18
        },
        {
          "name": "rich_proxied_file",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "IO[str]",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 21,
          "end_line": 23
        },
        {
          "name": "__getattr__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "str"
            }
          ],
          "return_type": "Any",
          "docstring": null,
          "calls": [
            "getattr"
          ],
          "variables": [],
          "start_line": 25,
          "end_line": 26
        },
        {
          "name": "write",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "str"
            }
          ],
          "return_type": "int",
          "docstring": null,
          "calls": [
            "len",
            "console.print",
            "type",
            "Text(\"\\n\").join",
            "\"\".join",
            "text.partition",
            "buffer.clear",
            "isinstance",
            "TypeError",
            "buffer.append",
            "Text",
            "self.__ansi_decoder.decode_line",
            "lines.append"
          ],
          "variables": [
            "buffer",
            "lines",
            "console",
            "output"
          ],
          "start_line": 28,
          "end_line": 48
        },
        {
          "name": "flush",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "\"\".join",
            "self.__console.print"
          ],
          "variables": [
            "output"
          ],
          "start_line": 50,
          "end_line": 54
        },
        {
          "name": "fileno",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "int",
          "docstring": null,
          "calls": [
            "self.__file.fileno"
          ],
          "variables": [],
          "start_line": 56,
          "end_line": 57
        }
      ],
      "variables": [
        "buffer",
        "lines",
        "console",
        "output",
        "output"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\rich\\highlighter.py",
      "imports": [
        "import re",
        "from abc import ABC, abstractmethod",
        "from typing import List, Union",
        "from .text import Span, Text",
        "from .console import Console",
        "import json"
      ],
      "classes": [
        {
          "name": "Highlighter",
          "base_classes": "(ABC)",
          "docstring": null,
          "methods": []
        },
        {
          "name": "NullHighlighter",
          "base_classes": "(Highlighter)",
          "docstring": null,
          "methods": []
        },
        {
          "name": "RegexHighlighter",
          "base_classes": "(Highlighter)",
          "docstring": null,
          "methods": []
        },
        {
          "name": "ReprHighlighter",
          "base_classes": "(RegexHighlighter)",
          "docstring": null,
          "methods": []
        },
        {
          "name": "JSONHighlighter",
          "base_classes": "(RegexHighlighter)",
          "docstring": null,
          "methods": []
        },
        {
          "name": "ISO8601Highlighter",
          "base_classes": "(RegexHighlighter)",
          "docstring": null,
          "methods": []
        }
      ],
      "functions": [
        {
          "name": "_combine_regex",
          "parameters": [
            {
              "name": null,
              "type": "str"
            }
          ],
          "return_type": "str",
          "docstring": null,
          "calls": [
            "\"|\".join"
          ],
          "variables": [],
          "start_line": 8,
          "end_line": 14
        },
        {
          "name": "__call__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "Union[str, Text]"
            }
          ],
          "return_type": "Text",
          "docstring": null,
          "calls": [
            "isinstance",
            "TypeError",
            "Text",
            "text.copy",
            "self.highlight"
          ],
          "variables": [
            "highlight_text",
            "highlight_text"
          ],
          "start_line": 20,
          "end_line": 39
        },
        {
          "name": "highlight",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "Text"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 42,
          "end_line": 47
        },
        {
          "name": "highlight",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "Text"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 57,
          "end_line": 58
        },
        {
          "name": "highlight",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "Text"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "highlight_regex"
          ],
          "variables": [
            "highlight_regex"
          ],
          "start_line": 67,
          "end_line": 77
        },
        {
          "name": "highlight",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "Text"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "len",
            "super().highlight",
            "match.span",
            "append",
            "super",
            "Span",
            "re.finditer"
          ],
          "variables": [
            "plain",
            "append",
            "whitespace",
            "cursor",
            "char"
          ],
          "start_line": 123,
          "end_line": 140
        }
      ],
      "variables": [
        "highlight_text",
        "highlight_text",
        "highlights",
        "base_style",
        "highlight_regex",
        "base_style",
        "highlights",
        "JSON_STR",
        "JSON_WHITESPACE",
        "base_style",
        "highlights",
        "plain",
        "append",
        "whitespace",
        "cursor",
        "char",
        "base_style",
        "highlights",
        "console"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\rich\\json.py",
      "imports": [
        "from pathlib import Path",
        "from json import loads, dumps",
        "from typing import Any, Callable, Optional, Union",
        "from .text import Text",
        "from .highlighter import JSONHighlighter, NullHighlighter",
        "import argparse",
        "import sys",
        "from rich.console import Console"
      ],
      "classes": [
        {
          "name": "JSON",
          "base_classes": null,
          "docstring": null,
          "methods": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "str"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "JSONHighlighter",
            "highlighter",
            "loads",
            "dumps",
            "NullHighlighter"
          ],
          "variables": [
            "data",
            "json",
            "highlighter"
          ],
          "start_line": 25,
          "end_line": 51
        },
        {
          "name": "from_data",
          "parameters": [
            {
              "name": "cls",
              "type": null
            },
            {
              "name": null,
              "type": "Any"
            }
          ],
          "return_type": "\"JSON\"",
          "docstring": null,
          "calls": [
            "JSONHighlighter",
            "highlighter",
            "cls.__new__",
            "dumps",
            "NullHighlighter"
          ],
          "variables": [
            "json_instance",
            "json",
            "highlighter"
          ],
          "start_line": 54,
          "end_line": 99
        },
        {
          "name": "__rich__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "Text",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 101,
          "end_line": 102
        }
      ],
      "variables": [
        "data",
        "json",
        "highlighter",
        "json_instance",
        "json",
        "highlighter",
        "parser",
        "args",
        "console",
        "error_console",
        "json_data",
        "json_data"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\rich\\jupyter.py",
      "imports": [
        "from typing import TYPE_CHECKING, Any, Dict, Iterable, List, Sequence",
        "from rich.console import ConsoleRenderable",
        "from . import get_console",
        "from .segment import Segment",
        "from .terminal_theme import DEFAULT_TERMINAL_THEME",
        "from rich.console import ConsoleRenderable",
        "from IPython.display import display as ipython_display"
      ],
      "classes": [
        {
          "name": "JupyterRenderable",
          "base_classes": null,
          "docstring": null,
          "methods": []
        },
        {
          "name": "JupyterMixin",
          "base_classes": null,
          "docstring": null,
          "methods": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "str"
            },
            {
              "name": null,
              "type": "str"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 21,
          "end_line": 23
        },
        {
          "name": "_repr_mimebundle_",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "Sequence[str]"
            },
            {
              "name": null,
              "type": "Sequence[str]"
            },
            {
              "name": null,
              "type": "Any"
            }
          ],
          "return_type": "Dict[str, str]",
          "docstring": null,
          "calls": [
            "data.items"
          ],
          "variables": [
            "data",
            "data",
            "data"
          ],
          "start_line": 25,
          "end_line": 33
        },
        {
          "name": "_repr_mimebundle_",
          "parameters": [
            {
              "name": null,
              "type": "\"ConsoleRenderable\""
            },
            {
              "name": null,
              "type": "Sequence[str]"
            },
            {
              "name": null,
              "type": "Sequence[str]"
            },
            {
              "name": null,
              "type": "Any"
            }
          ],
          "return_type": "Dict[str, str]",
          "docstring": null,
          "calls": [
            "data.items",
            "list",
            "console._render_buffer",
            "_render_segments",
            "console.render",
            "get_console"
          ],
          "variables": [
            "console",
            "segments",
            "html",
            "text",
            "data",
            "data",
            "data"
          ],
          "start_line": 41,
          "end_line": 56
        },
        {
          "name": "_render_segments",
          "parameters": [
            {
              "name": null,
              "type": "Iterable[Segment]"
            }
          ],
          "return_type": "str",
          "docstring": null,
          "calls": [
            "JUPYTER_HTML_FORMAT.format",
            "append_fragment",
            "\"\".join",
            "style.get_html_style",
            "escape",
            "text.replace(\"&\", \"&amp;\").replace(\"<\", \"&lt;\").replace",
            "Segment.simplify",
            "text.replace(\"&\", \"&amp;\").replace",
            "text.replace"
          ],
          "variables": [
            "fragments",
            "append_fragment",
            "theme",
            "text",
            "rule",
            "text",
            "text",
            "code",
            "html"
          ],
          "start_line": 59,
          "end_line": 81
        },
        {
          "name": "escape",
          "parameters": [
            {
              "name": null,
              "type": "str"
            }
          ],
          "return_type": "str",
          "docstring": null,
          "calls": [
            "text.replace(\"&\", \"&amp;\").replace",
            "text.replace",
            "text.replace(\"&\", \"&amp;\").replace(\"<\", \"&lt;\").replace"
          ],
          "variables": [],
          "start_line": 60,
          "end_line": 62
        },
        {
          "name": "display",
          "parameters": [
            {
              "name": null,
              "type": "Iterable[Segment]"
            },
            {
              "name": null,
              "type": "str"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "ipython_display",
            "_render_segments",
            "JupyterRenderable"
          ],
          "variables": [
            "html",
            "jupyter_renderable"
          ],
          "start_line": 84,
          "end_line": 95
        },
        {
          "name": "print",
          "parameters": [
            {
              "name": null,
              "type": "Any"
            },
            {
              "name": null,
              "type": "Any"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "get_console",
            "console.print"
          ],
          "variables": [
            "console"
          ],
          "start_line": 98,
          "end_line": 101
        }
      ],
      "variables": [
        "JUPYTER_HTML_FORMAT",
        "data",
        "data",
        "data",
        "__slots__",
        "console",
        "segments",
        "html",
        "text",
        "data",
        "data",
        "data",
        "fragments",
        "append_fragment",
        "theme",
        "text",
        "rule",
        "text",
        "text",
        "code",
        "html",
        "html",
        "jupyter_renderable",
        "console"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\rich\\layout.py",
      "imports": [
        "from abc import ABC, abstractmethod",
        "from itertools import islice",
        "from operator import itemgetter",
        "from threading import RLock",
        "from typing import (\n    TYPE_CHECKING,\n    Dict,\n    Iterable,\n    List,\n    NamedTuple,\n    Optional,\n    Sequence,\n    Tuple,\n    Union,\n)",
        "from ._ratio import ratio_resolve",
        "from .align import Align",
        "from .console import Console, ConsoleOptions, RenderableType, RenderResult",
        "from .highlighter import ReprHighlighter",
        "from .panel import Panel",
        "from .pretty import Pretty",
        "from .region import Region",
        "from .repr import Result, rich_repr",
        "from .segment import Segment",
        "from .style import StyleType",
        "from rich.tree import Tree",
        "from rich.styled import Styled",
        "from rich.table import Table",
        "from rich.tree import Tree",
        "from rich.console import Console"
      ],
      "classes": [
        {
          "name": "LayoutRender",
          "base_classes": "(NamedTuple)",
          "docstring": null,
          "methods": []
        },
        {
          "name": "LayoutError",
          "base_classes": "(Exception)",
          "docstring": null,
          "methods": []
        },
        {
          "name": "NoSplitter",
          "base_classes": "(LayoutError)",
          "docstring": null,
          "methods": []
        },
        {
          "name": "_Placeholder",
          "base_classes": null,
          "docstring": null,
          "methods": []
        },
        {
          "name": "Splitter",
          "base_classes": "(ABC)",
          "docstring": null,
          "methods": []
        },
        {
          "name": "RowSplitter",
          "base_classes": "(Splitter)",
          "docstring": null,
          "methods": []
        },
        {
          "name": "ColumnSplitter",
          "base_classes": "(Splitter)",
          "docstring": null,
          "methods": []
        },
        {
          "name": "Layout",
          "base_classes": null,
          "docstring": null,
          "methods": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "\"Layout\""
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 56,
          "end_line": 58
        },
        {
          "name": "__rich_console__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "Console"
            },
            {
              "name": null,
              "type": "ConsoleOptions"
            }
          ],
          "return_type": "RenderResult",
          "docstring": null,
          "calls": [
            "Panel",
            "Pretty",
            "self.highlighter",
            "Align.center"
          ],
          "variables": [
            "width",
            "height",
            "layout",
            "title"
          ],
          "start_line": 60,
          "end_line": 77
        },
        {
          "name": "get_tree_icon",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "str",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 86,
          "end_line": 87
        },
        {
          "name": "divide",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "Sequence[\"Layout\"]"
            },
            {
              "name": null,
              "type": "Region"
            }
          ],
          "return_type": "Iterable[Tuple[\"Layout\", Region]]",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 90,
          "end_line": 98
        },
        {
          "name": "get_tree_icon",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "str",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 106,
          "end_line": 107
        },
        {
          "name": "divide",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "Sequence[\"Layout\"]"
            },
            {
              "name": null,
              "type": "Region"
            }
          ],
          "return_type": "Iterable[Tuple[\"Layout\", Region]]",
          "docstring": null,
          "calls": [
            "zip",
            "_Region",
            "ratio_resolve"
          ],
          "variables": [
            "render_widths",
            "offset",
            "_Region"
          ],
          "start_line": 109,
          "end_line": 118
        },
        {
          "name": "get_tree_icon",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "str",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 126,
          "end_line": 127
        },
        {
          "name": "divide",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "Sequence[\"Layout\"]"
            },
            {
              "name": null,
              "type": "Region"
            }
          ],
          "return_type": "Iterable[Tuple[\"Layout\", Region]]",
          "docstring": null,
          "calls": [
            "zip",
            "_Region",
            "ratio_resolve"
          ],
          "variables": [
            "render_heights",
            "offset",
            "_Region"
          ],
          "start_line": 129,
          "end_line": 138
        },
        {
          "name": "__init__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "RLock",
            "self.splitters[\"column\"]",
            "_Placeholder"
          ],
          "variables": [],
          "start_line": 156,
          "end_line": 175
        },
        {
          "name": "__rich_repr__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "Result",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 177,
          "end_line": 181
        },
        {
          "name": "renderable",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "RenderableType",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 184,
          "end_line": 186
        },
        {
          "name": "children",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "List[\"Layout\"]",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 189,
          "end_line": 191
        },
        {
          "name": "map",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "RenderMap",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 194,
          "end_line": 196
        },
        {
          "name": "get",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "str"
            }
          ],
          "return_type": "Optional[\"Layout\"]",
          "docstring": null,
          "calls": [
            "child.get"
          ],
          "variables": [
            "named_layout"
          ],
          "start_line": 198,
          "end_line": 214
        },
        {
          "name": "__getitem__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "str"
            }
          ],
          "return_type": "\"Layout\"",
          "docstring": null,
          "calls": [
            "self.get",
            "KeyError"
          ],
          "variables": [
            "layout"
          ],
          "start_line": 216,
          "end_line": 220
        },
        {
          "name": "tree",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "\"Tree\"",
          "docstring": null,
          "calls": [
            "Table.grid",
            "table.add_row",
            "layout.splitter.get_tree_icon",
            "Styled",
            "summary",
            "tree.add",
            "Tree",
            "recurse",
            "Pretty"
          ],
          "variables": [
            "icon",
            "table",
            "text",
            "_summary",
            "layout",
            "tree"
          ],
          "start_line": 223,
          "end_line": 259
        },
        {
          "name": "summary",
          "parameters": [
            {
              "name": null,
              "type": "\"Layout\""
            }
          ],
          "return_type": "Table",
          "docstring": null,
          "calls": [
            "Table.grid",
            "table.add_row",
            "layout.splitter.get_tree_icon",
            "Styled",
            "Pretty"
          ],
          "variables": [
            "icon",
            "table",
            "text",
            "_summary"
          ],
          "start_line": 229,
          "end_line": 239
        },
        {
          "name": "recurse",
          "parameters": [
            {
              "name": null,
              "type": "\"Tree\""
            },
            {
              "name": null,
              "type": "\"Layout\""
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "summary",
            "tree.add",
            "recurse"
          ],
          "variables": [],
          "start_line": 248,
          "end_line": 256
        },
        {
          "name": "split",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "Union[\"Layout\", RenderableType]"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "isinstance",
            "self.splitters[splitter]",
            "Layout",
            "NoSplitter"
          ],
          "variables": [
            "_layouts"
          ],
          "start_line": 261,
          "end_line": 284
        },
        {
          "name": "add_split",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "Union[\"Layout\", RenderableType]"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "isinstance",
            "self._children.extend",
            "Layout"
          ],
          "variables": [
            "_layouts"
          ],
          "start_line": 286,
          "end_line": 297
        },
        {
          "name": "split_row",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "Union[\"Layout\", RenderableType]"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "self.split"
          ],
          "variables": [],
          "start_line": 299,
          "end_line": 305
        },
        {
          "name": "split_column",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "Union[\"Layout\", RenderableType]"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "self.split"
          ],
          "variables": [],
          "start_line": 307,
          "end_line": 313
        },
        {
          "name": "unsplit",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 315,
          "end_line": 317
        },
        {
          "name": "update",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "RenderableType"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 319,
          "end_line": 326
        },
        {
          "name": "refresh_screen",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "\"Console\""
            },
            {
              "name": null,
              "type": "str"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "console.options.update_dimensions",
            "LayoutRender",
            "console.update_screen_lines",
            "console.render_lines"
          ],
          "variables": [
            "layout",
            "lines"
          ],
          "start_line": 328,
          "end_line": 343
        },
        {
          "name": "_make_region_map",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "int"
            },
            {
              "name": null,
              "type": "int"
            }
          ],
          "return_type": "RegionMap",
          "docstring": null,
          "calls": [
            "pop",
            "sorted",
            "itemgetter",
            "append_layout_region",
            "layout.splitter.divide",
            "push",
            "Region"
          ],
          "variables": [
            "stack",
            "push",
            "pop",
            "layout_regions",
            "append_layout_region",
            "children",
            "region_map"
          ],
          "start_line": 345,
          "end_line": 364
        },
        {
          "name": "render",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "Console"
            },
            {
              "name": null,
              "type": "ConsoleOptions"
            }
          ],
          "return_type": "RenderMap",
          "docstring": null,
          "calls": [
            "self._make_region_map",
            "render_lines",
            "region_map.items",
            "LayoutRender",
            "update_dimensions"
          ],
          "variables": [
            "render_width",
            "render_height",
            "region_map",
            "layout_regions",
            "render_map",
            "render_lines",
            "update_dimensions",
            "lines"
          ],
          "start_line": 366,
          "end_line": 393
        },
        {
          "name": "__rich_console__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "Console"
            },
            {
              "name": null,
              "type": "ConsoleOptions"
            }
          ],
          "return_type": "RenderResult",
          "docstring": null,
          "calls": [
            "render_map.values",
            "_islice",
            "zip",
            "row.extend",
            "range",
            "options.update_dimensions",
            "self.render",
            "Segment.line"
          ],
          "variables": [
            "width",
            "height",
            "render_map",
            "layout_lines",
            "_islice",
            "new_line"
          ],
          "start_line": 395,
          "end_line": 415
        }
      ],
      "variables": [
        "region",
        "render",
        "RegionMap",
        "RenderMap",
        "highlighter",
        "width",
        "height",
        "layout",
        "title",
        "name",
        "name",
        "render_widths",
        "offset",
        "_Region",
        "name",
        "render_heights",
        "offset",
        "_Region",
        "splitters",
        "named_layout",
        "layout",
        "icon",
        "table",
        "text",
        "_summary",
        "layout",
        "tree",
        "_layouts",
        "_layouts",
        "layout",
        "lines",
        "stack",
        "push",
        "pop",
        "layout_regions",
        "append_layout_region",
        "children",
        "region_map",
        "render_width",
        "render_height",
        "region_map",
        "layout_regions",
        "render_map",
        "render_lines",
        "update_dimensions",
        "lines",
        "width",
        "height",
        "render_map",
        "layout_lines",
        "_islice",
        "new_line",
        "console",
        "layout"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\rich\\live.py",
      "imports": [
        "import sys",
        "from threading import Event, RLock, Thread",
        "from types import TracebackType",
        "from typing import IO, TYPE_CHECKING, Any, Callable, List, Optional, TextIO, Type, cast",
        "from . import get_console",
        "from .console import Console, ConsoleRenderable, Group, RenderableType, RenderHook",
        "from .control import Control",
        "from .file_proxy import FileProxy",
        "from .jupyter import JupyterMixin",
        "from .live_render import LiveRender, VerticalOverflowMethod",
        "from .screen import Screen",
        "from .text import Text",
        "from typing_extensions import Self",
        "from IPython.display import display",
        "from ipywidgets import Output",
        "import warnings",
        "import random",
        "import time",
        "from itertools import cycle",
        "from typing import Dict, List, Tuple",
        "from .align import Align",
        "from .console import Console",
        "from .live import Live as Live",
        "from .panel import Panel",
        "from .rule import Rule",
        "from .syntax import Syntax",
        "from .table import Table"
      ],
      "classes": [
        {
          "name": "_RefreshThread",
          "base_classes": "(Thread)",
          "docstring": null,
          "methods": []
        },
        {
          "name": "Live",
          "base_classes": "(JupyterMixin, RenderHook)",
          "docstring": null,
          "methods": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "\"Live\""
            },
            {
              "name": null,
              "type": "float"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "super",
            "super().__init__",
            "Event"
          ],
          "variables": [],
          "start_line": 25,
          "end_line": 29
        },
        {
          "name": "stop",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "self.done.set"
          ],
          "variables": [],
          "start_line": 31,
          "end_line": 32
        },
        {
          "name": "run",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "self.done.is_set",
            "self.done.wait",
            "self.live.refresh"
          ],
          "variables": [],
          "start_line": 34,
          "end_line": 38
        },
        {
          "name": "__init__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "self.get_renderable",
            "RLock",
            "get_console",
            "LiveRender"
          ],
          "variables": [],
          "start_line": 57,
          "end_line": 96
        },
        {
          "name": "is_started",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "bool",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 99,
          "end_line": 101
        },
        {
          "name": "get_renderable",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "RenderableType",
          "docstring": null,
          "calls": [
            "self._get_renderable"
          ],
          "variables": [
            "renderable"
          ],
          "start_line": 103,
          "end_line": 109
        },
        {
          "name": "start",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "self.console.set_alt_screen",
            "self.stop",
            "self._refresh_thread.start",
            "self._enable_redirect_io",
            "self.console.push_render_hook",
            "self.console.show_cursor",
            "self.console.set_live",
            "_RefreshThread",
            "self.refresh"
          ],
          "variables": [],
          "start_line": 111,
          "end_line": 143
        },
        {
          "name": "stop",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "self._disable_redirect_io",
            "self.console.set_alt_screen",
            "self.console.line",
            "self.console.clear_live",
            "self.refresh",
            "self._live_render.restore_cursor",
            "self.console.show_cursor",
            "self.console.print",
            "self.ipy_widget.close",
            "self.console.control",
            "self.console.pop_render_hook",
            "self._refresh_thread.stop"
          ],
          "variables": [],
          "start_line": 145,
          "end_line": 177
        },
        {
          "name": "__enter__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "Self",
          "docstring": null,
          "calls": [
            "self.start"
          ],
          "variables": [],
          "start_line": 179,
          "end_line": 181
        },
        {
          "name": "__exit__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "Optional[Type[BaseException]]"
            },
            {
              "name": null,
              "type": "Optional[BaseException]"
            },
            {
              "name": null,
              "type": "Optional[TracebackType]"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "self.stop"
          ],
          "variables": [],
          "start_line": 183,
          "end_line": 189
        },
        {
          "name": "_enable_redirect_io",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "isinstance",
            "cast",
            "FileProxy"
          ],
          "variables": [],
          "start_line": 191,
          "end_line": 199
        },
        {
          "name": "_disable_redirect_io",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "cast"
          ],
          "variables": [],
          "start_line": 201,
          "end_line": 208
        },
        {
          "name": "renderable",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "RenderableType",
          "docstring": null,
          "calls": [
            "Screen",
            "self.get_renderable",
            "live.get_renderable",
            "Group"
          ],
          "variables": [
            "live_stack",
            "renderable",
            "renderable",
            "renderable"
          ],
          "start_line": 211,
          "end_line": 224
        },
        {
          "name": "update",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "RenderableType"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "self.refresh",
            "isinstance",
            "self.console.render_str"
          ],
          "variables": [
            "renderable"
          ],
          "start_line": 226,
          "end_line": 238
        },
        {
          "name": "refresh",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "self._live_render.set_renderable",
            "display",
            "self.console._live_stack[0].refresh",
            "self.ipy_widget.clear_output",
            "Control",
            "warnings.warn",
            "self.console.print",
            "Output"
          ],
          "variables": [],
          "start_line": 240,
          "end_line": 272
        },
        {
          "name": "process_renderables",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "List[ConsoleRenderable]"
            }
          ],
          "return_type": "List[ConsoleRenderable]",
          "docstring": null,
          "calls": [
            "Control.home",
            "self._live_render.position_cursor"
          ],
          "variables": [
            "reset",
            "renderables",
            "renderables"
          ],
          "start_line": 274,
          "end_line": 293
        }
      ],
      "variables": [
        "renderable",
        "live_stack",
        "renderable",
        "renderable",
        "renderable",
        "renderable",
        "reset",
        "renderables",
        "renderables",
        "console",
        "syntax",
        "table",
        "progress_renderables",
        "examples",
        "exchanges",
        "exchange_rate_dict",
        "select_exchange",
        "table"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\rich\\live_render.py",
      "imports": [
        "from typing import Optional, Tuple, Literal",
        "from ._loop import loop_last",
        "from .console import Console, ConsoleOptions, RenderableType, RenderResult",
        "from .control import Control",
        "from .segment import ControlType, Segment",
        "from .style import StyleType",
        "from .text import Text"
      ],
      "classes": [
        {
          "name": "LiveRender",
          "base_classes": null,
          "docstring": null,
          "methods": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "RenderableType"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 22,
          "end_line": 31
        },
        {
          "name": "set_renderable",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "RenderableType"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 33,
          "end_line": 39
        },
        {
          "name": "position_cursor",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "Control",
          "docstring": null,
          "calls": [
            "Control"
          ],
          "variables": [],
          "start_line": 41,
          "end_line": 60
        },
        {
          "name": "restore_cursor",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "Control",
          "docstring": null,
          "calls": [
            "Control"
          ],
          "variables": [],
          "start_line": 62,
          "end_line": 74
        },
        {
          "name": "__rich_console__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "Console"
            },
            {
              "name": null,
              "type": "ConsoleOptions"
            }
          ],
          "return_type": "RenderResult",
          "docstring": null,
          "calls": [
            "console.get_style",
            "Segment.line",
            "list",
            "loop_last",
            "console.render",
            "Text",
            "lines.append",
            "Segment.get_shape",
            "console.render_lines"
          ],
          "variables": [
            "renderable",
            "style",
            "lines",
            "shape",
            "lines",
            "shape",
            "lines",
            "overflow_text",
            "shape",
            "new_line"
          ],
          "start_line": 76,
          "end_line": 106
        }
      ],
      "variables": [
        "VerticalOverflowMethod",
        "renderable",
        "style",
        "lines",
        "shape",
        "lines",
        "shape",
        "lines",
        "overflow_text",
        "shape",
        "new_line"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\rich\\logging.py",
      "imports": [
        "import logging",
        "from datetime import datetime",
        "from logging import Handler, LogRecord",
        "from pathlib import Path",
        "from types import ModuleType",
        "from typing import ClassVar, Iterable, List, Optional, Type, Union",
        "from rich._null_file import NullFile",
        "from . import get_console",
        "from ._log_render import FormatTimeCallable, LogRender",
        "from .console import Console, ConsoleRenderable",
        "from .highlighter import Highlighter, ReprHighlighter",
        "from .text import Text",
        "from .traceback import Traceback",
        "from time import sleep"
      ],
      "classes": [
        {
          "name": "RichHandler",
          "base_classes": "(Handler)",
          "docstring": null,
          "methods": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "self.HIGHLIGHTER_CLASS",
            "super().__init__",
            "super",
            "get_console",
            "LogRender"
          ],
          "variables": [],
          "start_line": 65,
          "end_line": 115
        },
        {
          "name": "get_level_text",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "LogRecord"
            }
          ],
          "return_type": "Text",
          "docstring": null,
          "calls": [
            "level_name.ljust",
            "Text.styled",
            "level_name.lower"
          ],
          "variables": [
            "level_name",
            "level_text"
          ],
          "start_line": 117,
          "end_line": 130
        },
        {
          "name": "emit",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "LogRecord"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "formatter.usesTime",
            "self.render_message",
            "self.handleError",
            "record.getMessage",
            "Traceback.from_exception",
            "hasattr",
            "isinstance",
            "self.format",
            "formatter.formatMessage",
            "self.render",
            "formatter.formatTime",
            "self.console.print"
          ],
          "variables": [
            "message",
            "traceback",
            "traceback",
            "message",
            "formatter",
            "message",
            "message_renderable",
            "log_renderable"
          ],
          "start_line": 132,
          "end_line": 180
        },
        {
          "name": "render_message",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "LogRecord"
            },
            {
              "name": null,
              "type": "str"
            }
          ],
          "return_type": "\"ConsoleRenderable\"",
          "docstring": null,
          "calls": [
            "Text.from_markup",
            "getattr",
            "highlighter",
            "Text",
            "message_text.highlight_words"
          ],
          "variables": [
            "use_markup",
            "message_text",
            "highlighter",
            "message_text"
          ],
          "start_line": 182,
          "end_line": 205
        },
        {
          "name": "render",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "LogRecord"
            },
            {
              "name": null,
              "type": "Optional[Traceback]"
            },
            {
              "name": null,
              "type": "\"ConsoleRenderable\""
            }
          ],
          "return_type": "\"ConsoleRenderable\"",
          "docstring": null,
          "calls": [
            "self._log_render",
            "self.get_level_text",
            "datetime.fromtimestamp",
            "Path"
          ],
          "variables": [
            "path",
            "level",
            "time_format",
            "log_time",
            "log_renderable"
          ],
          "start_line": 207,
          "end_line": 239
        },
        {
          "name": "divide",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "log.debug",
            "log.exception"
          ],
          "variables": [
            "number",
            "divisor",
            "foos"
          ],
          "start_line": 283,
          "end_line": 291
        }
      ],
      "variables": [
        "KEYWORDS",
        "HIGHLIGHTER_CLASS",
        "level_name",
        "level_text",
        "message",
        "traceback",
        "traceback",
        "message",
        "formatter",
        "message",
        "message_renderable",
        "log_renderable",
        "use_markup",
        "message_text",
        "highlighter",
        "message_text",
        "path",
        "level",
        "time_format",
        "log_time",
        "log_renderable",
        "FORMAT",
        "log",
        "number",
        "divisor",
        "foos"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\rich\\markdown.py",
      "imports": [
        "import sys",
        "from typing import ClassVar, Iterable, get_args",
        "from markdown_it import MarkdownIt",
        "from markdown_it.token import Token",
        "from rich.table import Table",
        "from . import box",
        "from ._loop import loop_first",
        "from ._stack import Stack",
        "from .console import Console, ConsoleOptions, JustifyMethod, RenderResult",
        "from .containers import Renderables",
        "from .jupyter import JupyterMixin",
        "from .panel import Panel",
        "from .rule import Rule",
        "from .segment import Segment",
        "from .style import Style, StyleStack",
        "from .syntax import Syntax",
        "from .text import Text, TextType",
        "import argparse",
        "import sys",
        "from rich.console import Console",
        "import io",
        "import pydoc"
      ],
      "classes": [
        {
          "name": "MarkdownElement",
          "base_classes": null,
          "docstring": null,
          "methods": []
        },
        {
          "name": "UnknownElement",
          "base_classes": "(MarkdownElement)",
          "docstring": null,
          "methods": []
        },
        {
          "name": "TextElement",
          "base_classes": "(MarkdownElement)",
          "docstring": null,
          "methods": []
        },
        {
          "name": "Paragraph",
          "base_classes": "(TextElement)",
          "docstring": null,
          "methods": []
        },
        {
          "name": "Heading",
          "base_classes": "(TextElement)",
          "docstring": null,
          "methods": []
        },
        {
          "name": "CodeBlock",
          "base_classes": "(TextElement)",
          "docstring": null,
          "methods": []
        },
        {
          "name": "BlockQuote",
          "base_classes": "(TextElement)",
          "docstring": null,
          "methods": []
        },
        {
          "name": "HorizontalRule",
          "base_classes": "(MarkdownElement)",
          "docstring": null,
          "methods": []
        },
        {
          "name": "TableElement",
          "base_classes": "(MarkdownElement)",
          "docstring": null,
          "methods": []
        },
        {
          "name": "TableHeaderElement",
          "base_classes": "(MarkdownElement)",
          "docstring": null,
          "methods": []
        },
        {
          "name": "TableBodyElement",
          "base_classes": "(MarkdownElement)",
          "docstring": null,
          "methods": []
        },
        {
          "name": "TableRowElement",
          "base_classes": "(MarkdownElement)",
          "docstring": null,
          "methods": []
        },
        {
          "name": "TableDataElement",
          "base_classes": "(MarkdownElement)",
          "docstring": null,
          "methods": []
        },
        {
          "name": "ListElement",
          "base_classes": "(MarkdownElement)",
          "docstring": null,
          "methods": []
        },
        {
          "name": "ListItem",
          "base_classes": "(TextElement)",
          "docstring": null,
          "methods": []
        },
        {
          "name": "Link",
          "base_classes": "(TextElement)",
          "docstring": null,
          "methods": []
        },
        {
          "name": "ImageItem",
          "base_classes": "(TextElement)",
          "docstring": null,
          "methods": []
        },
        {
          "name": "MarkdownContext",
          "base_classes": null,
          "docstring": null,
          "methods": []
        },
        {
          "name": "Markdown",
          "base_classes": "(JupyterMixin)",
          "docstring": null,
          "methods": []
        }
      ],
      "functions": [
        {
          "name": "create",
          "parameters": [
            {
              "name": "cls",
              "type": null
            },
            {
              "name": null,
              "type": "Markdown"
            },
            {
              "name": null,
              "type": "Token"
            }
          ],
          "return_type": "MarkdownElement",
          "docstring": null,
          "calls": [
            "cls"
          ],
          "variables": [],
          "start_line": 29,
          "end_line": 39
        },
        {
          "name": "on_enter",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "MarkdownContext"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 41,
          "end_line": 46
        },
        {
          "name": "on_text",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "MarkdownContext"
            },
            {
              "name": null,
              "type": "TextType"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 48,
          "end_line": 53
        },
        {
          "name": "on_leave",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "MarkdownContext"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 55,
          "end_line": 60
        },
        {
          "name": "on_child_close",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "MarkdownContext"
            },
            {
              "name": null,
              "type": "MarkdownElement"
            }
          ],
          "return_type": "bool",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 62,
          "end_line": 74
        },
        {
          "name": "__rich_console__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "Console"
            },
            {
              "name": null,
              "type": "ConsoleOptions"
            }
          ],
          "return_type": "RenderResult",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 76,
          "end_line": 79
        },
        {
          "name": "on_enter",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "MarkdownContext"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "context.enter_style",
            "Text"
          ],
          "variables": [],
          "start_line": 96,
          "end_line": 98
        },
        {
          "name": "on_text",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "MarkdownContext"
            },
            {
              "name": null,
              "type": "TextType"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "self.text.append",
            "isinstance"
          ],
          "variables": [],
          "start_line": 100,
          "end_line": 101
        },
        {
          "name": "on_leave",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "MarkdownContext"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "context.leave_style"
          ],
          "variables": [],
          "start_line": 103,
          "end_line": 104
        },
        {
          "name": "create",
          "parameters": [
            {
              "name": "cls",
              "type": null
            },
            {
              "name": null,
              "type": "Markdown"
            },
            {
              "name": null,
              "type": "Token"
            }
          ],
          "return_type": "Paragraph",
          "docstring": null,
          "calls": [
            "cls"
          ],
          "variables": [],
          "start_line": 114,
          "end_line": 115
        },
        {
          "name": "__init__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "JustifyMethod"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 117,
          "end_line": 118
        },
        {
          "name": "__rich_console__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "Console"
            },
            {
              "name": null,
              "type": "ConsoleOptions"
            }
          ],
          "return_type": "RenderResult",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 120,
          "end_line": 124
        },
        {
          "name": "create",
          "parameters": [
            {
              "name": "cls",
              "type": null
            },
            {
              "name": null,
              "type": "Markdown"
            },
            {
              "name": null,
              "type": "Token"
            }
          ],
          "return_type": "Heading",
          "docstring": null,
          "calls": [
            "cls"
          ],
          "variables": [],
          "start_line": 131,
          "end_line": 132
        },
        {
          "name": "on_enter",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "MarkdownContext"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "context.enter_style",
            "Text"
          ],
          "variables": [],
          "start_line": 134,
          "end_line": 136
        },
        {
          "name": "__init__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "str"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "super",
            "super().__init__"
          ],
          "variables": [],
          "start_line": 138,
          "end_line": 141
        },
        {
          "name": "__rich_console__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "Console"
            },
            {
              "name": null,
              "type": "ConsoleOptions"
            }
          ],
          "return_type": "RenderResult",
          "docstring": null,
          "calls": [
            "Panel",
            "Text"
          ],
          "variables": [
            "text"
          ],
          "start_line": 143,
          "end_line": 159
        },
        {
          "name": "create",
          "parameters": [
            {
              "name": "cls",
              "type": null
            },
            {
              "name": null,
              "type": "Markdown"
            },
            {
              "name": null,
              "type": "Token"
            }
          ],
          "return_type": "CodeBlock",
          "docstring": null,
          "calls": [
            "node_info.partition",
            "cls"
          ],
          "variables": [
            "node_info",
            "lexer_name"
          ],
          "start_line": 168,
          "end_line": 171
        },
        {
          "name": "__init__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "str"
            },
            {
              "name": null,
              "type": "str"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 173,
          "end_line": 175
        },
        {
          "name": "__rich_console__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "Console"
            },
            {
              "name": null,
              "type": "ConsoleOptions"
            }
          ],
          "return_type": "RenderResult",
          "docstring": null,
          "calls": [
            "str",
            "Syntax",
            "str(self.text).rstrip"
          ],
          "variables": [
            "code",
            "syntax"
          ],
          "start_line": 177,
          "end_line": 184
        },
        {
          "name": "__init__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "Renderables"
          ],
          "variables": [],
          "start_line": 192,
          "end_line": 193
        },
        {
          "name": "on_child_close",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "MarkdownContext"
            },
            {
              "name": null,
              "type": "MarkdownElement"
            }
          ],
          "return_type": "bool",
          "docstring": null,
          "calls": [
            "self.elements.append"
          ],
          "variables": [],
          "start_line": 195,
          "end_line": 197
        },
        {
          "name": "__rich_console__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "Console"
            },
            {
              "name": null,
              "type": "ConsoleOptions"
            }
          ],
          "return_type": "RenderResult",
          "docstring": null,
          "calls": [
            "Segment",
            "options.update",
            "console.render_lines"
          ],
          "variables": [
            "render_options",
            "lines",
            "style",
            "new_line",
            "padding"
          ],
          "start_line": 199,
          "end_line": 210
        },
        {
          "name": "__rich_console__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "Console"
            },
            {
              "name": null,
              "type": "ConsoleOptions"
            }
          ],
          "return_type": "RenderResult",
          "docstring": null,
          "calls": [
            "Rule",
            "console.get_style"
          ],
          "variables": [
            "style"
          ],
          "start_line": 218,
          "end_line": 222
        },
        {
          "name": "__init__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 228,
          "end_line": 230
        },
        {
          "name": "on_child_close",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "MarkdownContext"
            },
            {
              "name": null,
              "type": "MarkdownElement"
            }
          ],
          "return_type": "bool",
          "docstring": null,
          "calls": [
            "RuntimeError",
            "isinstance"
          ],
          "variables": [],
          "start_line": 232,
          "end_line": 239
        },
        {
          "name": "__rich_console__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "Console"
            },
            {
              "name": null,
              "type": "ConsoleOptions"
            }
          ],
          "return_type": "RenderResult",
          "docstring": null,
          "calls": [
            "table.add_row",
            "table.add_column",
            "Table"
          ],
          "variables": [
            "table",
            "row_content"
          ],
          "start_line": 241,
          "end_line": 255
        },
        {
          "name": "__init__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 261,
          "end_line": 262
        },
        {
          "name": "on_child_close",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "MarkdownContext"
            },
            {
              "name": null,
              "type": "MarkdownElement"
            }
          ],
          "return_type": "bool",
          "docstring": null,
          "calls": [
            "isinstance"
          ],
          "variables": [],
          "start_line": 264,
          "end_line": 267
        },
        {
          "name": "__init__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 273,
          "end_line": 274
        },
        {
          "name": "on_child_close",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "MarkdownContext"
            },
            {
              "name": null,
              "type": "MarkdownElement"
            }
          ],
          "return_type": "bool",
          "docstring": null,
          "calls": [
            "isinstance",
            "self.rows.append"
          ],
          "variables": [],
          "start_line": 276,
          "end_line": 279
        },
        {
          "name": "__init__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 285,
          "end_line": 286
        },
        {
          "name": "on_child_close",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "MarkdownContext"
            },
            {
              "name": null,
              "type": "MarkdownElement"
            }
          ],
          "return_type": "bool",
          "docstring": null,
          "calls": [
            "isinstance",
            "self.cells.append"
          ],
          "variables": [],
          "start_line": 288,
          "end_line": 291
        },
        {
          "name": "create",
          "parameters": [
            {
              "name": "cls",
              "type": null
            },
            {
              "name": null,
              "type": "Markdown"
            },
            {
              "name": null,
              "type": "Token"
            }
          ],
          "return_type": "MarkdownElement",
          "docstring": null,
          "calls": [
            "token.attrs.get",
            "cls",
            "str",
            "get_args"
          ],
          "variables": [
            "style",
            "justify",
            "justify",
            "justify",
            "justify",
            "justify"
          ],
          "start_line": 299,
          "end_line": 313
        },
        {
          "name": "__init__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "JustifyMethod"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "Text"
          ],
          "variables": [],
          "start_line": 315,
          "end_line": 317
        },
        {
          "name": "on_text",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "MarkdownContext"
            },
            {
              "name": null,
              "type": "TextType"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "text.stylize",
            "isinstance",
            "self.content.append_text",
            "Text"
          ],
          "variables": [
            "text"
          ],
          "start_line": 319,
          "end_line": 322
        },
        {
          "name": "create",
          "parameters": [
            {
              "name": "cls",
              "type": null
            },
            {
              "name": null,
              "type": "Markdown"
            },
            {
              "name": null,
              "type": "Token"
            }
          ],
          "return_type": "ListElement",
          "docstring": null,
          "calls": [
            "int",
            "cls",
            "token.attrs.get"
          ],
          "variables": [],
          "start_line": 329,
          "end_line": 330
        },
        {
          "name": "__init__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "str"
            },
            {
              "name": null,
              "type": "int | None"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 332,
          "end_line": 335
        },
        {
          "name": "on_child_close",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "MarkdownContext"
            },
            {
              "name": null,
              "type": "MarkdownElement"
            }
          ],
          "return_type": "bool",
          "docstring": null,
          "calls": [
            "isinstance",
            "self.items.append"
          ],
          "variables": [],
          "start_line": 337,
          "end_line": 340
        },
        {
          "name": "__rich_console__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "Console"
            },
            {
              "name": null,
              "type": "ConsoleOptions"
            }
          ],
          "return_type": "RenderResult",
          "docstring": null,
          "calls": [
            "len",
            "enumerate",
            "item.render_number",
            "item.render_bullet"
          ],
          "variables": [
            "number",
            "last_number"
          ],
          "start_line": 342,
          "end_line": 354
        },
        {
          "name": "__init__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "Renderables"
          ],
          "variables": [],
          "start_line": 362,
          "end_line": 363
        },
        {
          "name": "on_child_close",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "MarkdownContext"
            },
            {
              "name": null,
              "type": "MarkdownElement"
            }
          ],
          "return_type": "bool",
          "docstring": null,
          "calls": [
            "self.elements.append"
          ],
          "variables": [],
          "start_line": 365,
          "end_line": 367
        },
        {
          "name": "render_bullet",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "Console"
            },
            {
              "name": null,
              "type": "ConsoleOptions"
            }
          ],
          "return_type": "RenderResult",
          "docstring": null,
          "calls": [
            "console.get_style",
            "loop_first",
            "Segment",
            "options.update",
            "console.render_lines"
          ],
          "variables": [
            "render_options",
            "lines",
            "bullet_style",
            "bullet",
            "padding",
            "new_line"
          ],
          "start_line": 369,
          "end_line": 380
        },
        {
          "name": "render_number",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "Console"
            },
            {
              "name": null,
              "type": "ConsoleOptions"
            },
            {
              "name": null,
              "type": "int"
            },
            {
              "name": null,
              "type": "int"
            }
          ],
          "return_type": "RenderResult",
          "docstring": null,
          "calls": [
            "len",
            "str",
            "console.get_style",
            "f\"{number}\".rjust",
            "loop_first",
            "Segment",
            "options.update",
            "console.render_lines"
          ],
          "variables": [
            "number_width",
            "render_options",
            "lines",
            "number_style",
            "new_line",
            "padding",
            "numeral"
          ],
          "start_line": 382,
          "end_line": 396
        },
        {
          "name": "create",
          "parameters": [
            {
              "name": "cls",
              "type": null
            },
            {
              "name": null,
              "type": "Markdown"
            },
            {
              "name": null,
              "type": "Token"
            }
          ],
          "return_type": "MarkdownElement",
          "docstring": null,
          "calls": [
            "token.attrs.get",
            "cls",
            "str"
          ],
          "variables": [
            "url"
          ],
          "start_line": 401,
          "end_line": 403
        },
        {
          "name": "__init__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "str"
            },
            {
              "name": null,
              "type": "str"
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Text"
          ],
          "variables": [],
          "start_line": 405,
          "end_line": 407
        },
        {
          "name": "create",
          "parameters": [
            {
              "name": "cls",
              "type": null
            },
            {
              "name": null,
              "type": "Markdown"
            },
            {
              "name": null,
              "type": "Token"
            }
          ],
          "return_type": "MarkdownElement",
          "docstring": null,
          "calls": [
            "token.attrs.get",
            "cls",
            "str"
          ],
          "variables": [],
          "start_line": 416,
          "end_line": 426
        },
        {
          "name": "__init__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "str"
            },
            {
              "name": null,
              "type": "bool"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "super",
            "super().__init__"
          ],
          "variables": [],
          "start_line": 428,
          "end_line": 432
        },
        {
          "name": "on_enter",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "MarkdownContext"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "super().on_enter",
            "super",
            "Text"
          ],
          "variables": [],
          "start_line": 434,
          "end_line": 437
        },
        {
          "name": "__rich_console__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "Console"
            },
            {
              "name": null,
              "type": "ConsoleOptions"
            }
          ],
          "return_type": "RenderResult",
          "docstring": null,
          "calls": [
            "self.destination.strip(\"/\").rsplit",
            "title.stylize",
            "Text.assemble",
            "Text",
            "Style",
            "self.destination.strip"
          ],
          "variables": [
            "link_style",
            "title",
            "text"
          ],
          "start_line": 439,
          "end_line": 447
        },
        {
          "name": "__init__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "Console"
            },
            {
              "name": null,
              "type": "ConsoleOptions"
            },
            {
              "name": null,
              "type": "Style"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "StyleStack",
            "Stack",
            "Syntax"
          ],
          "variables": [],
          "start_line": 453,
          "end_line": 468
        },
        {
          "name": "current_style",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "Style",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 471,
          "end_line": 473
        },
        {
          "name": "on_text",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "str"
            },
            {
              "name": null,
              "type": "str"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "self.stack.top.on_text",
            "self._syntax.highlight",
            "Text.assemble",
            "highlight_text.rstrip"
          ],
          "variables": [
            "highlight_text"
          ],
          "start_line": 475,
          "end_line": 484
        },
        {
          "name": "enter_style",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "str | Style"
            }
          ],
          "return_type": "Style",
          "docstring": null,
          "calls": [
            "self.console.get_style",
            "self.style_stack.push"
          ],
          "variables": [
            "style"
          ],
          "start_line": 486,
          "end_line": 490
        },
        {
          "name": "leave_style",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "Style",
          "docstring": null,
          "calls": [
            "self.style_stack.pop"
          ],
          "variables": [
            "style"
          ],
          "start_line": 492,
          "end_line": 495
        },
        {
          "name": "__init__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "str"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "parser.parse",
            "MarkdownIt().enable(\"strikethrough\").enable",
            "MarkdownIt",
            "MarkdownIt().enable"
          ],
          "variables": [
            "parser"
          ],
          "start_line": 534,
          "end_line": 552
        },
        {
          "name": "_flatten_tokens",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "Iterable[Token]"
            }
          ],
          "return_type": "Iterable[Token]",
          "docstring": null,
          "calls": [
            "self._flatten_tokens"
          ],
          "variables": [
            "is_fence",
            "is_image"
          ],
          "start_line": 554,
          "end_line": 562
        },
        {
          "name": "__rich_console__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "Console"
            },
            {
              "name": null,
              "type": "ConsoleOptions"
            }
          ],
          "return_type": "RenderResult",
          "docstring": null,
          "calls": [
            "self._flatten_tokens",
            "console.render",
            "element.on_leave",
            "Style",
            "Segment.line",
            "MarkdownContext",
            "context.stack.pop",
            "str",
            "context.on_text",
            "context.stack.push",
            "context.enter_style",
            "Link.create",
            "console.get_style",
            "token.attrs.get",
            "options.update",
            "context.stack.top.on_child_close",
            "self.elements.get",
            "element.on_text",
            "context.leave_style",
            "isinstance",
            "element_class.create",
            "element.on_enter"
          ],
          "variables": [
            "style",
            "options",
            "context",
            "tokens",
            "inline_style_tags",
            "new_line",
            "_new_line_segment",
            "node_type",
            "tag",
            "entering",
            "exiting",
            "self_closing",
            "href",
            "link_style",
            "element",
            "link_style",
            "link_url_style",
            "element_class",
            "element",
            "element",
            "should_render",
            "text",
            "should_render",
            "new_line"
          ],
          "start_line": 564,
          "end_line": 681
        }
      ],
      "variables": [
        "new_line",
        "style_name",
        "style_name",
        "justify",
        "text",
        "style_name",
        "node_info",
        "lexer_name",
        "code",
        "syntax",
        "style_name",
        "render_options",
        "lines",
        "style",
        "new_line",
        "padding",
        "new_line",
        "style",
        "table",
        "row_content",
        "style",
        "justify",
        "justify",
        "justify",
        "justify",
        "justify",
        "text",
        "number",
        "last_number",
        "style_name",
        "render_options",
        "lines",
        "bullet_style",
        "bullet",
        "padding",
        "new_line",
        "number_width",
        "render_options",
        "lines",
        "number_style",
        "new_line",
        "padding",
        "numeral",
        "url",
        "new_line",
        "link_style",
        "title",
        "text",
        "highlight_text",
        "style",
        "style",
        "elements",
        "inlines",
        "parser",
        "is_fence",
        "is_image",
        "style",
        "options",
        "context",
        "tokens",
        "inline_style_tags",
        "new_line",
        "_new_line_segment",
        "node_type",
        "tag",
        "entering",
        "exiting",
        "self_closing",
        "href",
        "link_style",
        "element",
        "link_style",
        "link_url_style",
        "element_class",
        "element",
        "element",
        "should_render",
        "text",
        "should_render",
        "new_line",
        "parser",
        "args",
        "markdown_body",
        "markdown_body",
        "markdown",
        "fileio",
        "console",
        "console"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\rich\\markup.py",
      "imports": [
        "import re",
        "from ast import literal_eval",
        "from operator import attrgetter",
        "from typing import Callable, Iterable, List, Match, NamedTuple, Optional, Tuple, Union",
        "from ._emoji_replace import _emoji_replace",
        "from .emoji import EmojiVariant",
        "from .errors import MarkupError",
        "from .style import Style",
        "from .text import Span, Text",
        "from rich import print",
        "from rich.table import Table"
      ],
      "classes": [
        {
          "name": "Tag",
          "base_classes": "(NamedTuple)",
          "docstring": null,
          "methods": []
        }
      ],
      "functions": [
        {
          "name": "__str__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "str",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 28,
          "end_line": 31
        },
        {
          "name": "markup",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "str",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 34,
          "end_line": 40
        },
        {
          "name": "escape",
          "parameters": [
            {
              "name": null,
              "type": "str"
            }
          ],
          "return_type": "str",
          "docstring": null,
          "calls": [
            "markup.endswith",
            "_escape",
            "match.groups"
          ],
          "variables": [
            "markup"
          ],
          "start_line": 48,
          "end_line": 70
        },
        {
          "name": "escape_backslashes",
          "parameters": [
            {
              "name": null,
              "type": "Match[str]"
            }
          ],
          "return_type": "str",
          "docstring": null,
          "calls": [
            "match.groups"
          ],
          "variables": [],
          "start_line": 61,
          "end_line": 64
        },
        {
          "name": "_parse",
          "parameters": [
            {
              "name": null,
              "type": "str"
            }
          ],
          "return_type": "Iterable[Tuple[int, Optional[str], Optional[Tag]]]",
          "docstring": null,
          "calls": [
            "len",
            "RE_TAGS.finditer",
            "match.span",
            "_Tag",
            "match.groups",
            "_divmod",
            "tag_text.partition"
          ],
          "variables": [
            "position",
            "_divmod",
            "_Tag",
            "position",
            "position"
          ],
          "start_line": 73,
          "end_line": 103
        },
        {
          "name": "render",
          "parameters": [
            {
              "name": null,
              "type": "str"
            }
          ],
          "return_type": "Text",
          "docstring": null,
          "calls": [
            "normalize",
            "tag.name.startswith",
            "literal_eval",
            "reversed",
            "_Span",
            "Text",
            "attrgetter",
            "RE_HANDLER.match",
            "Style",
            "pop",
            "tag.name[1:].strip",
            "str",
            "sorted",
            "append_span",
            "KeyError",
            "enumerate",
            "_parse",
            "append",
            "MarkupError",
            "style_stack.pop",
            "emoji_replace",
            "open_tag.parameters.strip",
            "_Tag",
            "open_tag.name.startswith",
            "len",
            "isinstance",
            "pop_style",
            "plain_text.replace",
            "handler_match.groups",
            "style_stack.append"
          ],
          "variables": [
            "emoji_replace",
            "text",
            "append",
            "normalize",
            "style_stack",
            "pop",
            "spans",
            "append_span",
            "_Span",
            "_Tag",
            "plain_text",
            "style_name",
            "style_name",
            "handler_name",
            "parameters",
            "handler_match",
            "parameters",
            "meta_params",
            "meta_params",
            "meta_params",
            "normalized_tag",
            "text_length",
            "style"
          ],
          "start_line": 106,
          "end_line": 231
        },
        {
          "name": "pop_style",
          "parameters": [
            {
              "name": null,
              "type": "str"
            }
          ],
          "return_type": "Tuple[int, Tag]",
          "docstring": null,
          "calls": [
            "enumerate",
            "pop",
            "KeyError",
            "reversed"
          ],
          "variables": [],
          "start_line": 146,
          "end_line": 151
        }
      ],
      "variables": [
        "RE_TAGS",
        "RE_HANDLER",
        "name",
        "parameters",
        "_ReStringMatch",
        "_ReSubCallable",
        "_EscapeSubMethod",
        "markup",
        "position",
        "_divmod",
        "_Tag",
        "position",
        "position",
        "emoji_replace",
        "text",
        "append",
        "normalize",
        "style_stack",
        "pop",
        "spans",
        "append_span",
        "_Span",
        "_Tag",
        "plain_text",
        "style_name",
        "style_name",
        "handler_name",
        "parameters",
        "handler_match",
        "parameters",
        "meta_params",
        "meta_params",
        "meta_params",
        "normalized_tag",
        "text_length",
        "style",
        "MARKUP",
        "grid"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\rich\\measure.py",
      "imports": [
        "from operator import itemgetter",
        "from typing import TYPE_CHECKING, Callable, NamedTuple, Optional, Sequence",
        "from . import errors",
        "from .protocol import is_renderable, rich_cast",
        "from .console import Console, ConsoleOptions, RenderableType"
      ],
      "classes": [
        {
          "name": "Measurement",
          "base_classes": "(NamedTuple)",
          "docstring": null,
          "methods": []
        }
      ],
      "functions": [
        {
          "name": "span",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "int",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 20,
          "end_line": 22
        },
        {
          "name": "normalize",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "\"Measurement\"",
          "docstring": null,
          "calls": [
            "Measurement",
            "min",
            "max"
          ],
          "variables": [
            "minimum"
          ],
          "start_line": 24,
          "end_line": 32
        },
        {
          "name": "with_maximum",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "int"
            }
          ],
          "return_type": "\"Measurement\"",
          "docstring": null,
          "calls": [
            "Measurement",
            "min"
          ],
          "variables": [],
          "start_line": 34,
          "end_line": 44
        },
        {
          "name": "with_minimum",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "int"
            }
          ],
          "return_type": "\"Measurement\"",
          "docstring": null,
          "calls": [
            "Measurement",
            "max"
          ],
          "variables": [
            "width"
          ],
          "start_line": 46,
          "end_line": 57
        },
        {
          "name": "clamp",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "\"Measurement\"",
          "docstring": null,
          "calls": [
            "measurement.with_maximum",
            "measurement.with_minimum"
          ],
          "variables": [
            "measurement",
            "measurement",
            "measurement"
          ],
          "start_line": 59,
          "end_line": 76
        },
        {
          "name": "get",
          "parameters": [
            {
              "name": "cls",
              "type": null
            },
            {
              "name": null,
              "type": "\"Console\""
            },
            {
              "name": null,
              "type": "\"ConsoleOptions\""
            },
            {
              "name": null,
              "type": "\"RenderableType\""
            }
          ],
          "return_type": "\"Measurement\"",
          "docstring": null,
          "calls": [
            "console.render_str",
            "is_renderable",
            "Measurement",
            "getattr",
            "errors.NotRenderableError",
            "rich_cast",
            "render_width.normalize",
            "isinstance",
            "get_console_width(console, options)\n                    .normalize()\n                    .with_maximum",
            "get_console_width",
            "get_console_width(console, options)\n                    .normalize"
          ],
          "variables": [
            "_max_width",
            "renderable",
            "renderable",
            "get_console_width",
            "render_width"
          ],
          "start_line": 79,
          "end_line": 122
        },
        {
          "name": "measure_renderables",
          "parameters": [
            {
              "name": null,
              "type": "\"Console\""
            },
            {
              "name": null,
              "type": "\"ConsoleOptions\""
            },
            {
              "name": null,
              "type": "Sequence[\"RenderableType\"]"
            }
          ],
          "return_type": "\"Measurement\"",
          "docstring": null,
          "calls": [
            "get_measurement",
            "Measurement",
            "max",
            "itemgetter"
          ],
          "variables": [
            "get_measurement",
            "measurements",
            "measured_width"
          ],
          "start_line": 125,
          "end_line": 151
        }
      ],
      "variables": [
        "minimum",
        "maximum",
        "minimum",
        "width",
        "measurement",
        "measurement",
        "measurement",
        "_max_width",
        "renderable",
        "renderable",
        "get_console_width",
        "render_width",
        "get_measurement",
        "measurements",
        "measured_width"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\rich\\padding.py",
      "imports": [
        "from typing import TYPE_CHECKING, List, Optional, Tuple, Union",
        "from .console import (\n        Console,\n        ConsoleOptions,\n        RenderableType,\n        RenderResult,\n    )",
        "from .jupyter import JupyterMixin",
        "from .measure import Measurement",
        "from .segment import Segment",
        "from .style import Style",
        "from rich import print"
      ],
      "classes": [
        {
          "name": "Padding",
          "base_classes": "(JupyterMixin)",
          "docstring": null,
          "methods": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "\"RenderableType\""
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "self.unpack"
          ],
          "variables": [],
          "start_line": 33,
          "end_line": 44
        },
        {
          "name": "indent",
          "parameters": [
            {
              "name": "cls",
              "type": null
            },
            {
              "name": null,
              "type": "\"RenderableType\""
            },
            {
              "name": null,
              "type": "int"
            }
          ],
          "return_type": "\"Padding\"",
          "docstring": null,
          "calls": [
            "Padding"
          ],
          "variables": [],
          "start_line": 47,
          "end_line": 58
        },
        {
          "name": "unpack",
          "parameters": [
            {
              "name": null,
              "type": "\"PaddingDimensions\""
            }
          ],
          "return_type": "Tuple[int, int, int, int]",
          "docstring": null,
          "calls": [
            "len",
            "isinstance",
            "ValueError"
          ],
          "variables": [
            "_pad"
          ],
          "start_line": 61,
          "end_line": 74
        },
        {
          "name": "__repr__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "str",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 76,
          "end_line": 77
        },
        {
          "name": "__rich_console__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "\"Console\""
            },
            {
              "name": null,
              "type": "\"ConsoleOptions\""
            }
          ],
          "return_type": "\"RenderResult\"",
          "docstring": null,
          "calls": [
            "options.update_width",
            "_Segment",
            "console.get_style",
            "_Segment.line",
            "render_options.update_height",
            "min",
            "Measurement.get",
            "console.render_lines"
          ],
          "variables": [
            "style",
            "width",
            "width",
            "render_options",
            "render_options",
            "lines",
            "_Segment",
            "left",
            "right",
            "blank_line",
            "blank_line",
            "blank_line"
          ],
          "start_line": 79,
          "end_line": 123
        },
        {
          "name": "__rich_measure__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "\"Console\""
            },
            {
              "name": null,
              "type": "\"ConsoleOptions\""
            }
          ],
          "return_type": "\"Measurement\"",
          "docstring": null,
          "calls": [
            "measurement.with_maximum",
            "Measurement",
            "Measurement.get"
          ],
          "variables": [
            "max_width",
            "extra_width",
            "measurement",
            "measurement"
          ],
          "start_line": 125,
          "end_line": 135
        }
      ],
      "variables": [
        "PaddingDimensions",
        "_pad",
        "style",
        "width",
        "width",
        "render_options",
        "render_options",
        "lines",
        "_Segment",
        "left",
        "right",
        "blank_line",
        "blank_line",
        "blank_line",
        "max_width",
        "extra_width",
        "measurement",
        "measurement"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\rich\\pager.py",
      "imports": [
        "from abc import ABC, abstractmethod",
        "from typing import Any",
        "from .__main__ import make_test_card",
        "from .console import Console"
      ],
      "classes": [
        {
          "name": "Pager",
          "base_classes": "(ABC)",
          "docstring": null,
          "methods": []
        },
        {
          "name": "SystemPager",
          "base_classes": "(Pager)",
          "docstring": null,
          "methods": []
        }
      ],
      "functions": [
        {
          "name": "show",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "str"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 9,
          "end_line": 14
        },
        {
          "name": "_pager",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "str"
            }
          ],
          "return_type": "Any",
          "docstring": null,
          "calls": [
            "__import__",
            "__import__(\"pydoc\").pager"
          ],
          "variables": [],
          "start_line": 20,
          "end_line": 21
        },
        {
          "name": "show",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "str"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "self._pager"
          ],
          "variables": [],
          "start_line": 23,
          "end_line": 25
        }
      ],
      "variables": [
        "console"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\rich\\palette.py",
      "imports": [
        "from math import sqrt",
        "from functools import lru_cache",
        "from typing import Sequence, Tuple, TYPE_CHECKING",
        "from .color_triplet import ColorTriplet",
        "from rich.table import Table",
        "from rich.color import Color",
        "from rich.style import Style",
        "from rich.text import Text",
        "from rich.table import Table",
        "import colorsys",
        "from typing import Iterable",
        "from rich.color import Color",
        "from rich.console import Console, ConsoleOptions",
        "from rich.segment import Segment",
        "from rich.style import Style"
      ],
      "classes": [
        {
          "name": "Palette",
          "base_classes": null,
          "docstring": null,
          "methods": []
        },
        {
          "name": "ColorBox",
          "base_classes": null,
          "docstring": null,
          "methods": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "Sequence[Tuple[int, int, int]]"
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 14,
          "end_line": 15
        },
        {
          "name": "__getitem__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "int"
            }
          ],
          "return_type": "ColorTriplet",
          "docstring": null,
          "calls": [
            "ColorTriplet"
          ],
          "variables": [],
          "start_line": 17,
          "end_line": 18
        },
        {
          "name": "__rich__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "\"Table\"",
          "docstring": null,
          "calls": [
            "len",
            "enumerate",
            "repr",
            "Color.from_rgb",
            "str",
            "table.add_row",
            "Table",
            "Text",
            "Style"
          ],
          "variables": [
            "table"
          ],
          "start_line": 20,
          "end_line": 41
        },
        {
          "name": "match",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "Tuple[int, int, int]"
            }
          ],
          "return_type": "int",
          "docstring": null,
          "calls": [
            "len",
            "range",
            "min",
            "_sqrt",
            "get_color"
          ],
          "variables": [
            "_sqrt",
            "get_color",
            "red_mean",
            "red",
            "green",
            "blue",
            "min_index"
          ],
          "start_line": 45,
          "end_line": 72
        },
        {
          "name": "get_color_distance",
          "parameters": [
            {
              "name": null,
              "type": "int"
            }
          ],
          "return_type": "float",
          "docstring": null,
          "calls": [
            "_sqrt",
            "get_color"
          ],
          "variables": [
            "red_mean",
            "red",
            "green",
            "blue"
          ],
          "start_line": 58,
          "end_line": 69
        },
        {
          "name": "__rich_console__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "Console"
            },
            {
              "name": null,
              "type": "ConsoleOptions"
            }
          ],
          "return_type": "Iterable[Segment]",
          "docstring": null,
          "calls": [
            "Color.from_rgb",
            "colorsys.hls_to_rgb",
            "Segment.line",
            "range",
            "Segment",
            "Style"
          ],
          "variables": [
            "height",
            "h",
            "l",
            "bgcolor",
            "color"
          ],
          "start_line": 84,
          "end_line": 97
        }
      ],
      "variables": [
        "table",
        "_sqrt",
        "get_color",
        "red_mean",
        "red",
        "green",
        "blue",
        "min_index",
        "height",
        "h",
        "l",
        "bgcolor",
        "color",
        "console"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\rich\\panel.py",
      "imports": [
        "from typing import TYPE_CHECKING, Optional",
        "from .align import AlignMethod",
        "from .box import ROUNDED, Box",
        "from .cells import cell_len",
        "from .jupyter import JupyterMixin",
        "from .measure import Measurement, measure_renderables",
        "from .padding import Padding, PaddingDimensions",
        "from .segment import Segment",
        "from .style import Style, StyleType",
        "from .text import Text, TextType",
        "from .console import Console, ConsoleOptions, RenderableType, RenderResult",
        "from .console import Console",
        "from .box import DOUBLE, ROUNDED",
        "from .padding import Padding"
      ],
      "classes": [
        {
          "name": "Panel",
          "base_classes": "(JupyterMixin)",
          "docstring": null,
          "methods": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "\"RenderableType\""
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 40,
          "end_line": 71
        },
        {
          "name": "fit",
          "parameters": [
            {
              "name": "cls",
              "type": null
            },
            {
              "name": null,
              "type": "\"RenderableType\""
            }
          ],
          "return_type": "\"Panel\"",
          "docstring": null,
          "calls": [
            "cls"
          ],
          "variables": [],
          "start_line": 74,
          "end_line": 107
        },
        {
          "name": "_title",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "Optional[Text]",
          "docstring": null,
          "calls": [
            "Text.from_markup",
            "title_text.plain.replace",
            "self.title.copy",
            "isinstance",
            "title_text.expand_tabs",
            "title_text.pad"
          ],
          "variables": [
            "title_text"
          ],
          "start_line": 110,
          "end_line": 123
        },
        {
          "name": "_subtitle",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "Optional[Text]",
          "docstring": null,
          "calls": [
            "Text.from_markup",
            "self.subtitle.copy",
            "isinstance",
            "subtitle_text.pad",
            "subtitle_text.expand_tabs",
            "subtitle_text.plain.replace"
          ],
          "variables": [
            "subtitle_text"
          ],
          "start_line": 126,
          "end_line": 139
        },
        {
          "name": "__rich_console__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "\"Console\""
            },
            {
              "name": null,
              "type": "\"ConsoleOptions\""
            }
          ],
          "return_type": "\"RenderResult\"",
          "docstring": null,
          "calls": [
            "child_options.update_width",
            "options.update_width",
            "max",
            "min",
            "cell_len",
            "console.render",
            "text.truncate",
            "Segment.line",
            "text.copy",
            "console.render_lines",
            "subtitle_text.stylize_before",
            "box.get_top",
            "Padding",
            "any",
            "console.get_style",
            "Padding.unpack",
            "text.stylize",
            "align_text",
            "options.update",
            "self.box.substitute",
            "box.get_bottom",
            "Text.assemble",
            "console.measure",
            "title_text.stylize_before",
            "Segment"
          ],
          "variables": [
            "_padding",
            "renderable",
            "style",
            "border_style",
            "width",
            "safe_box",
            "box",
            "text",
            "excess_space",
            "left",
            "title_text",
            "child_width",
            "child_height",
            "child_width",
            "width",
            "child_options",
            "lines",
            "line_start",
            "line_end",
            "new_line",
            "title_text",
            "subtitle_text",
            "subtitle_text"
          ],
          "start_line": 141,
          "end_line": 275
        },
        {
          "name": "align_text",
          "parameters": [
            {
              "name": null,
              "type": "Text"
            },
            {
              "name": null,
              "type": "int"
            },
            {
              "name": null,
              "type": "str"
            },
            {
              "name": null,
              "type": "str"
            },
            {
              "name": null,
              "type": "Style"
            }
          ],
          "return_type": "Text",
          "docstring": null,
          "calls": [
            "console.get_style",
            "text.stylize",
            "Text.assemble",
            "cell_len",
            "text.truncate",
            "text.copy"
          ],
          "variables": [
            "text",
            "excess_space",
            "left"
          ],
          "start_line": 159,
          "end_line": 204
        },
        {
          "name": "__rich_measure__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "\"Console\""
            },
            {
              "name": null,
              "type": "\"ConsoleOptions\""
            }
          ],
          "return_type": "\"Measurement\"",
          "docstring": null,
          "calls": [
            "Padding.unpack",
            "options.update_width",
            "Measurement",
            "measure_renderables"
          ],
          "variables": [
            "_title",
            "padding",
            "renderables",
            "width",
            "width"
          ],
          "start_line": 277,
          "end_line": 297
        }
      ],
      "variables": [
        "title_text",
        "subtitle_text",
        "_padding",
        "renderable",
        "style",
        "border_style",
        "width",
        "safe_box",
        "box",
        "text",
        "excess_space",
        "left",
        "title_text",
        "child_width",
        "child_height",
        "child_width",
        "width",
        "child_options",
        "lines",
        "line_start",
        "line_end",
        "new_line",
        "title_text",
        "subtitle_text",
        "subtitle_text",
        "_title",
        "padding",
        "renderables",
        "width",
        "width",
        "c",
        "p"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\rich\\pretty.py",
      "imports": [
        "import builtins",
        "import collections",
        "import dataclasses",
        "import inspect",
        "import os",
        "import reprlib",
        "import sys",
        "from array import array",
        "from collections import Counter, UserDict, UserList, defaultdict, deque",
        "from dataclasses import dataclass, fields, is_dataclass",
        "from inspect import isclass",
        "from itertools import islice",
        "from types import MappingProxyType",
        "from typing import (\n    TYPE_CHECKING,\n    Any,\n    Callable,\n    DefaultDict,\n    Deque,\n    Dict,\n    Iterable,\n    List,\n    Optional,\n    Sequence,\n    Set,\n    Tuple,\n    Union,\n)",
        "from rich.repr import RichReprResult",
        "import attr as _attr_module",
        "from . import get_console",
        "from ._loop import loop_last",
        "from ._pick import pick_bool",
        "from .abc import RichRenderable",
        "from .cells import cell_len",
        "from .highlighter import ReprHighlighter",
        "from .jupyter import JupyterMixin, JupyterRenderable",
        "from .measure import Measurement",
        "from .text import Text",
        "from .console import (\n        Console,\n        ConsoleOptions,\n        HighlighterType,\n        JustifyMethod,\n        OverflowMethod,\n        RenderResult,\n    )",
        "from .console import ConsoleRenderable",
        "from rich import get_console",
        "from IPython.core.formatters import BaseFormatter",
        "from typing import NamedTuple",
        "from rich import print"
      ],
      "classes": [
        {
          "name": "RichFormatter",
          "base_classes": "(BaseFormatter)",
          "docstring": null,
          "methods": []
        },
        {
          "name": "Pretty",
          "base_classes": "(JupyterMixin)",
          "docstring": null,
          "methods": []
        },
        {
          "name": "Node",
          "base_classes": null,
          "docstring": null,
          "methods": []
        },
        {
          "name": "_Line",
          "base_classes": null,
          "docstring": null,
          "methods": []
        },
        {
          "name": "BrokenRepr",
          "base_classes": null,
          "docstring": null,
          "methods": []
        },
        {
          "name": "StockKeepingUnit",
          "base_classes": "(NamedTuple)",
          "docstring": null,
          "methods": []
        },
        {
          "name": "Thing",
          "base_classes": null,
          "docstring": null,
          "methods": []
        }
      ],
      "functions": [
        {
          "name": "_is_attr_object",
          "parameters": [
            {
              "name": null,
              "type": "Any"
            }
          ],
          "return_type": "bool",
          "docstring": null,
          "calls": [
            "type",
            "_attr_module.has"
          ],
          "variables": [],
          "start_line": 60,
          "end_line": 62
        },
        {
          "name": "_get_attr_fields",
          "parameters": [
            {
              "name": null,
              "type": "Any"
            }
          ],
          "return_type": "Sequence[\"_attr_module.Attribute[Any]\"]",
          "docstring": null,
          "calls": [
            "type",
            "_attr_module.fields"
          ],
          "variables": [],
          "start_line": 65,
          "end_line": 67
        },
        {
          "name": "_is_dataclass_repr",
          "parameters": [
            {
              "name": null,
              "type": "object"
            }
          ],
          "return_type": "bool",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 70,
          "end_line": 87
        },
        {
          "name": "_has_default_namedtuple_repr",
          "parameters": [
            {
              "name": null,
              "type": "object"
            }
          ],
          "return_type": "bool",
          "docstring": null,
          "calls": [
            "inspect.getfile"
          ],
          "variables": [
            "obj_file",
            "obj_file",
            "default_repr_file"
          ],
          "start_line": 93,
          "end_line": 110
        },
        {
          "name": "_ipy_display_hook",
          "parameters": [
            {
              "name": null,
              "type": "Any"
            }
          ],
          "return_type": "Union[str, None]",
          "docstring": null,
          "calls": [
            "console.capture",
            "_safe_isinstance",
            "console.print",
            "get_console",
            "capture.get",
            "console.line",
            "Pretty",
            "capture.get().rstrip"
          ],
          "variables": [
            "console"
          ],
          "start_line": 113,
          "end_line": 158
        },
        {
          "name": "_safe_isinstance",
          "parameters": [
            {
              "name": null,
              "type": "object"
            },
            {
              "name": null,
              "type": "Union[type, Tuple[type, ...]]"
            }
          ],
          "return_type": "bool",
          "docstring": null,
          "calls": [
            "isinstance"
          ],
          "variables": [],
          "start_line": 161,
          "end_line": 168
        },
        {
          "name": "install",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "get_ipython",
            "repr",
            "_safe_isinstance",
            "console.print",
            "get_console",
            "RichFormatter",
            "Pretty",
            "_ipy_display_hook"
          ],
          "variables": [
            "console",
            "ip",
            "pprint",
            "rich_formatter"
          ],
          "start_line": 171,
          "end_line": 250
        },
        {
          "name": "display_hook",
          "parameters": [
            {
              "name": null,
              "type": "Any"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "_safe_isinstance",
            "Pretty",
            "console.print"
          ],
          "variables": [],
          "start_line": 200,
          "end_line": 221
        },
        {
          "name": "__call__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "Any"
            }
          ],
          "return_type": "Any",
          "docstring": null,
          "calls": [
            "repr",
            "get_console",
            "_ipy_display_hook"
          ],
          "variables": [],
          "start_line": 233,
          "end_line": 246
        },
        {
          "name": "__init__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "Any"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "ReprHighlighter"
          ],
          "variables": [],
          "start_line": 273,
          "end_line": 302
        },
        {
          "name": "__rich_console__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "\"Console\""
            },
            {
              "name": null,
              "type": "\"ConsoleOptions\""
            }
          ],
          "return_type": "\"RenderResult\"",
          "docstring": null,
          "calls": [
            "pretty_text.with_indent_guides",
            "type",
            "Text.from_ansi",
            "pretty_repr",
            "self.highlighter",
            "Text",
            "pick_bool"
          ],
          "variables": [
            "pretty_str",
            "pretty_text",
            "pretty_text",
            "pretty_text"
          ],
          "start_line": 304,
          "end_line": 337
        },
        {
          "name": "__rich_measure__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "\"Console\""
            },
            {
              "name": null,
              "type": "\"ConsoleOptions\""
            }
          ],
          "return_type": "\"Measurement\"",
          "docstring": null,
          "calls": [
            "Measurement",
            "pretty_str.splitlines",
            "max",
            "pretty_repr",
            "cell_len"
          ],
          "variables": [
            "pretty_str",
            "text_width"
          ],
          "start_line": 339,
          "end_line": 354
        },
        {
          "name": "_get_braces_for_defaultdict",
          "parameters": [
            {
              "name": null,
              "type": "DefaultDict[Any, Any]"
            }
          ],
          "return_type": "Tuple[str, str, str]",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 357,
          "end_line": 362
        },
        {
          "name": "_get_braces_for_deque",
          "parameters": [
            {
              "name": null,
              "type": "Deque[Any]"
            }
          ],
          "return_type": "Tuple[str, str, str]",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 365,
          "end_line": 372
        },
        {
          "name": "_get_braces_for_array",
          "parameters": [
            {
              "name": null,
              "type": "\"array[Any]\""
            }
          ],
          "return_type": "Tuple[str, str, str]",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 375,
          "end_line": 376
        },
        {
          "name": "is_expandable",
          "parameters": [
            {
              "name": null,
              "type": "Any"
            }
          ],
          "return_type": "bool",
          "docstring": null,
          "calls": [
            "_safe_isinstance",
            "isclass",
            "hasattr",
            "_is_attr_object",
            "is_dataclass"
          ],
          "variables": [],
          "start_line": 398,
          "end_line": 405
        },
        {
          "name": "iter_tokens",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "Iterable[str]",
          "docstring": null,
          "calls": [
            "len",
            "child.iter_tokens",
            "self.children[0].iter_tokens"
          ],
          "variables": [],
          "start_line": 424,
          "end_line": 444
        },
        {
          "name": "check_length",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "int"
            },
            {
              "name": null,
              "type": "int"
            }
          ],
          "return_type": "bool",
          "docstring": null,
          "calls": [
            "self.iter_tokens",
            "cell_len"
          ],
          "variables": [
            "total_length"
          ],
          "start_line": 446,
          "end_line": 461
        },
        {
          "name": "__str__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "str",
          "docstring": null,
          "calls": [
            "self.iter_tokens",
            "\"\".join"
          ],
          "variables": [
            "repr_text"
          ],
          "start_line": 463,
          "end_line": 465
        },
        {
          "name": "render",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "str",
          "docstring": null,
          "calls": [
            "len",
            "\"\\n\".join",
            "_Line",
            "str",
            "line.expand",
            "line.check_length"
          ],
          "variables": [
            "lines",
            "line_no",
            "line",
            "repr_str"
          ],
          "start_line": 467,
          "end_line": 490
        },
        {
          "name": "expandable",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "bool",
          "docstring": null,
          "calls": [
            "bool"
          ],
          "variables": [],
          "start_line": 507,
          "end_line": 509
        },
        {
          "name": "check_length",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "int"
            }
          ],
          "return_type": "bool",
          "docstring": null,
          "calls": [
            "len",
            "self.node.check_length",
            "cell_len"
          ],
          "variables": [
            "start_length"
          ],
          "start_line": 511,
          "end_line": 517
        },
        {
          "name": "expand",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "int"
            }
          ],
          "return_type": "Iterable[\"_Line\"]",
          "docstring": null,
          "calls": [
            "len",
            "_Line",
            "loop_last"
          ],
          "variables": [
            "node",
            "whitespace",
            "new_line",
            "new_line",
            "child_whitespace",
            "tuple_of_one",
            "separator",
            "line"
          ],
          "start_line": 519,
          "end_line": 550
        },
        {
          "name": "__str__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "str",
          "docstring": null,
          "calls": [
            "self.suffix.rstrip"
          ],
          "variables": [],
          "start_line": 552,
          "end_line": 558
        },
        {
          "name": "_is_namedtuple",
          "parameters": [
            {
              "name": null,
              "type": "Any"
            }
          ],
          "return_type": "bool",
          "docstring": null,
          "calls": [
            "getattr",
            "isinstance"
          ],
          "variables": [
            "fields"
          ],
          "start_line": 561,
          "end_line": 577
        },
        {
          "name": "traverse",
          "parameters": [
            {
              "name": null,
              "type": "Any"
            }
          ],
          "return_type": "Node",
          "docstring": null,
          "calls": [
            "repr",
            "getattr",
            "iter_rich_args",
            "push_visited",
            "isclass",
            "hasattr",
            "_traverse",
            "repr_callable",
            "to_repr",
            "id",
            "_safe_isinstance",
            "str",
            "_is_dataclass_repr",
            "obj._asdict().items",
            "Node",
            "list",
            "iter_attrs",
            "_has_default_namedtuple_repr",
            "callable",
            "enumerate",
            "obj.__rich_repr__",
            "obj._asdict",
            "append",
            "_is_namedtuple",
            "obj.items",
            "_get_attr_fields",
            "len",
            "islice",
            "iter",
            "set",
            "type",
            "pop_visited",
            "loop_last",
            "_is_attr_object",
            "_BRACES[obj_type]",
            "fields",
            "is_dataclass"
          ],
          "variables": [
            "truncated",
            "obj_repr",
            "obj_repr",
            "obj_repr",
            "visited_ids",
            "push_visited",
            "pop_visited",
            "obj_id",
            "obj_type",
            "children",
            "reached_max_depth",
            "fake_attributes",
            "fake_attributes",
            "rich_repr_result",
            "rich_repr_result",
            "angular",
            "args",
            "class_name",
            "children",
            "append",
            "node",
            "node",
            "node",
            "node",
            "child_node",
            "child_node",
            "node",
            "children",
            "append",
            "attr_fields",
            "node",
            "node",
            "value",
            "child_node",
            "child_node",
            "node",
            "children",
            "append",
            "node",
            "node",
            "child_node",
            "class_name",
            "node",
            "children",
            "append",
            "node",
            "child_node",
            "obj_type",
            "node",
            "node",
            "children",
            "node",
            "append",
            "num_items",
            "last_item_index",
            "iter_items",
            "iter_items",
            "child_node",
            "iter_values",
            "iter_values",
            "child_node",
            "node",
            "node",
            "node"
          ],
          "start_line": 580,
          "end_line": 875
        },
        {
          "name": "to_repr",
          "parameters": [
            {
              "name": null,
              "type": "Any"
            }
          ],
          "return_type": "str",
          "docstring": null,
          "calls": [
            "len",
            "repr",
            "_safe_isinstance",
            "str"
          ],
          "variables": [
            "truncated",
            "obj_repr",
            "obj_repr",
            "obj_repr"
          ],
          "start_line": 601,
          "end_line": 615
        },
        {
          "name": "_traverse",
          "parameters": [
            {
              "name": null,
              "type": "Any"
            }
          ],
          "return_type": "Node",
          "docstring": null,
          "calls": [
            "getattr",
            "iter_rich_args",
            "push_visited",
            "isclass",
            "hasattr",
            "_traverse",
            "repr_callable",
            "to_repr",
            "id",
            "_safe_isinstance",
            "str",
            "_is_dataclass_repr",
            "obj._asdict().items",
            "Node",
            "list",
            "iter_attrs",
            "_has_default_namedtuple_repr",
            "callable",
            "enumerate",
            "obj.__rich_repr__",
            "obj._asdict",
            "append",
            "_is_namedtuple",
            "obj.items",
            "_get_attr_fields",
            "len",
            "islice",
            "iter",
            "type",
            "pop_visited",
            "loop_last",
            "_is_attr_object",
            "_BRACES[obj_type]",
            "fields",
            "is_dataclass"
          ],
          "variables": [
            "obj_id",
            "obj_type",
            "children",
            "reached_max_depth",
            "fake_attributes",
            "fake_attributes",
            "rich_repr_result",
            "rich_repr_result",
            "angular",
            "args",
            "class_name",
            "children",
            "append",
            "node",
            "node",
            "node",
            "node",
            "child_node",
            "child_node",
            "node",
            "children",
            "append",
            "attr_fields",
            "node",
            "node",
            "value",
            "child_node",
            "child_node",
            "node",
            "children",
            "append",
            "node",
            "node",
            "child_node",
            "class_name",
            "node",
            "children",
            "append",
            "node",
            "child_node",
            "obj_type",
            "node",
            "node",
            "children",
            "node",
            "append",
            "num_items",
            "last_item_index",
            "iter_items",
            "iter_items",
            "child_node",
            "iter_values",
            "iter_values",
            "child_node",
            "node",
            "node"
          ],
          "start_line": 621,
          "end_line": 872
        },
        {
          "name": "iter_rich_args",
          "parameters": [
            {
              "name": null,
              "type": "Any"
            }
          ],
          "return_type": "Iterable[Union[Any, Tuple[str, Any]]]",
          "docstring": null,
          "calls": [
            "len",
            "_safe_isinstance"
          ],
          "variables": [],
          "start_line": 633,
          "end_line": 647
        },
        {
          "name": "iter_attrs",
          "parameters": [],
          "return_type": "(\n                        Iterable[Tuple[str, Any, Optional[Callable[[Any], str]]]]\n                    )",
          "docstring": null,
          "calls": [
            "getattr",
            "callable"
          ],
          "variables": [
            "value"
          ],
          "start_line": 731,
          "end_line": 747
        },
        {
          "name": "pretty_repr",
          "parameters": [
            {
              "name": null,
              "type": "Any"
            }
          ],
          "return_type": "str",
          "docstring": null,
          "calls": [
            "_safe_isinstance",
            "traverse",
            "node.render"
          ],
          "variables": [
            "node",
            "node",
            "repr_str"
          ],
          "start_line": 878,
          "end_line": 915
        },
        {
          "name": "pprint",
          "parameters": [
            {
              "name": null,
              "type": "Any"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "_console.print",
            "get_console",
            "Pretty"
          ],
          "variables": [
            "_console"
          ],
          "start_line": 918,
          "end_line": 952
        },
        {
          "name": "__repr__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "str",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 958,
          "end_line": 960
        },
        {
          "name": "__repr__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "str",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 1013,
          "end_line": 1014
        }
      ],
      "variables": [
        "_has_attrs",
        "_has_attrs",
        "_dummy_namedtuple",
        "obj_file",
        "obj_file",
        "default_repr_file",
        "console",
        "console",
        "ip",
        "pprint",
        "rich_formatter",
        "pretty_str",
        "pretty_text",
        "pretty_text",
        "pretty_text",
        "pretty_str",
        "text_width",
        "_BRACES",
        "_CONTAINERS",
        "_MAPPING_CONTAINERS",
        "key_repr",
        "value_repr",
        "open_brace",
        "close_brace",
        "empty",
        "last",
        "is_tuple",
        "is_namedtuple",
        "children",
        "key_separator",
        "separator",
        "total_length",
        "repr_text",
        "lines",
        "line_no",
        "line",
        "repr_str",
        "parent",
        "is_root",
        "node",
        "text",
        "suffix",
        "whitespace",
        "expanded",
        "last",
        "start_length",
        "node",
        "whitespace",
        "new_line",
        "new_line",
        "child_whitespace",
        "tuple_of_one",
        "separator",
        "line",
        "fields",
        "truncated",
        "obj_repr",
        "obj_repr",
        "obj_repr",
        "visited_ids",
        "push_visited",
        "pop_visited",
        "obj_id",
        "obj_type",
        "children",
        "reached_max_depth",
        "fake_attributes",
        "fake_attributes",
        "rich_repr_result",
        "rich_repr_result",
        "angular",
        "args",
        "class_name",
        "children",
        "append",
        "node",
        "node",
        "node",
        "node",
        "child_node",
        "child_node",
        "node",
        "children",
        "append",
        "attr_fields",
        "node",
        "node",
        "value",
        "child_node",
        "child_node",
        "node",
        "children",
        "append",
        "node",
        "node",
        "child_node",
        "class_name",
        "node",
        "children",
        "append",
        "node",
        "child_node",
        "obj_type",
        "node",
        "node",
        "children",
        "node",
        "append",
        "num_items",
        "last_item_index",
        "iter_items",
        "iter_items",
        "child_node",
        "iter_values",
        "iter_values",
        "child_node",
        "node",
        "node",
        "node",
        "node",
        "node",
        "repr_str",
        "_console",
        "name",
        "description",
        "price",
        "category",
        "reviews",
        "d",
        "data"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\rich\\progress.py",
      "imports": [
        "import io",
        "import typing",
        "import warnings",
        "from abc import ABC, abstractmethod",
        "from collections import deque",
        "from dataclasses import dataclass, field",
        "from datetime import timedelta",
        "from io import RawIOBase, UnsupportedOperation",
        "from math import ceil",
        "from mmap import mmap",
        "from operator import length_hint",
        "from os import PathLike, stat",
        "from threading import Event, RLock, Thread",
        "from types import TracebackType",
        "from typing import (\n    TYPE_CHECKING,\n    Any,\n    BinaryIO,\n    Callable,\n    ContextManager,\n    Deque,\n    Dict,\n    Generic,\n    Iterable,\n    List,\n    Literal,\n    NamedTuple,\n    NewType,\n    Optional,\n    TextIO,\n    Tuple,\n    Type,\n    TypeVar,\n    Union,\n)",
        "from typing_extensions import Self",
        "from . import filesize, get_console",
        "from .console import Console, Group, JustifyMethod, RenderableType",
        "from .highlighter import Highlighter",
        "from .jupyter import JupyterMixin",
        "from .live import Live",
        "from .progress_bar import ProgressBar",
        "from .spinner import Spinner",
        "from .style import StyleType",
        "from .table import Column, Table",
        "from .text import Text, TextType",
        "import random",
        "import time",
        "from .panel import Panel",
        "from .rule import Rule",
        "from .syntax import Syntax",
        "from .table import Table",
        "from itertools import cycle"
      ],
      "classes": [
        {
          "name": "_TrackThread",
          "base_classes": "(Thread)",
          "docstring": null,
          "methods": []
        },
        {
          "name": "_Reader",
          "base_classes": "(RawIOBase, BinaryIO)",
          "docstring": null,
          "methods": []
        },
        {
          "name": "_ReadContext",
          "base_classes": "(ContextManager[_I], Generic[_I])",
          "docstring": null,
          "methods": []
        },
        {
          "name": "ProgressColumn",
          "base_classes": "(ABC)",
          "docstring": null,
          "methods": []
        },
        {
          "name": "RenderableColumn",
          "base_classes": "(ProgressColumn)",
          "docstring": null,
          "methods": []
        },
        {
          "name": "SpinnerColumn",
          "base_classes": "(ProgressColumn)",
          "docstring": null,
          "methods": []
        },
        {
          "name": "TextColumn",
          "base_classes": "(ProgressColumn)",
          "docstring": null,
          "methods": []
        },
        {
          "name": "BarColumn",
          "base_classes": "(ProgressColumn)",
          "docstring": null,
          "methods": []
        },
        {
          "name": "TimeElapsedColumn",
          "base_classes": "(ProgressColumn)",
          "docstring": null,
          "methods": []
        },
        {
          "name": "TaskProgressColumn",
          "base_classes": "(TextColumn)",
          "docstring": null,
          "methods": []
        },
        {
          "name": "TimeRemainingColumn",
          "base_classes": "(ProgressColumn)",
          "docstring": null,
          "methods": []
        },
        {
          "name": "FileSizeColumn",
          "base_classes": "(ProgressColumn)",
          "docstring": null,
          "methods": []
        },
        {
          "name": "TotalFileSizeColumn",
          "base_classes": "(ProgressColumn)",
          "docstring": null,
          "methods": []
        },
        {
          "name": "MofNCompleteColumn",
          "base_classes": "(ProgressColumn)",
          "docstring": null,
          "methods": []
        },
        {
          "name": "DownloadColumn",
          "base_classes": "(ProgressColumn)",
          "docstring": null,
          "methods": []
        },
        {
          "name": "TransferSpeedColumn",
          "base_classes": "(ProgressColumn)",
          "docstring": null,
          "methods": []
        },
        {
          "name": "ProgressSample",
          "base_classes": "(NamedTuple)",
          "docstring": null,
          "methods": []
        },
        {
          "name": "Task",
          "base_classes": null,
          "docstring": null,
          "methods": []
        },
        {
          "name": "Progress",
          "base_classes": "(JupyterMixin)",
          "docstring": null,
          "methods": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "\"Progress\""
            },
            {
              "name": null,
              "type": "\"TaskID\""
            },
            {
              "name": null,
              "type": "float"
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "super",
            "super().__init__",
            "Event"
          ],
          "variables": [],
          "start_line": 67,
          "end_line": 74
        },
        {
          "name": "run",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "self.progress.update",
            "wait",
            "advance"
          ],
          "variables": [
            "task_id",
            "advance",
            "update_period",
            "last_completed",
            "wait",
            "completed",
            "last_completed"
          ],
          "start_line": 76,
          "end_line": 88
        },
        {
          "name": "__enter__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "\"_TrackThread\"",
          "docstring": null,
          "calls": [
            "self.start"
          ],
          "variables": [],
          "start_line": 90,
          "end_line": 92
        },
        {
          "name": "__exit__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "Optional[Type[BaseException]]"
            },
            {
              "name": null,
              "type": "Optional[BaseException]"
            },
            {
              "name": null,
              "type": "Optional[TracebackType]"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "self.done.set",
            "self.join"
          ],
          "variables": [],
          "start_line": 94,
          "end_line": 101
        },
        {
          "name": "track",
          "parameters": [
            {
              "name": null,
              "type": "Iterable[ProgressType]"
            }
          ],
          "return_type": "Iterable[ProgressType]",
          "docstring": null,
          "calls": [
            "Progress",
            "BarColumn",
            "TextColumn",
            "progress.track",
            "TimeRemainingColumn",
            "TaskProgressColumn",
            "columns.extend"
          ],
          "variables": [
            "columns",
            "progress"
          ],
          "start_line": 104,
          "end_line": 179
        },
        {
          "name": "__init__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "BinaryIO"
            },
            {
              "name": null,
              "type": "\"Progress\""
            },
            {
              "name": null,
              "type": "TaskID"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 185,
          "end_line": 196
        },
        {
          "name": "__enter__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "\"_Reader\"",
          "docstring": null,
          "calls": [
            "self.handle.__enter__"
          ],
          "variables": [],
          "start_line": 198,
          "end_line": 200
        },
        {
          "name": "__exit__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "Optional[Type[BaseException]]"
            },
            {
              "name": null,
              "type": "Optional[BaseException]"
            },
            {
              "name": null,
              "type": "Optional[TracebackType]"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "self.close"
          ],
          "variables": [],
          "start_line": 202,
          "end_line": 208
        },
        {
          "name": "__iter__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "BinaryIO",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 210,
          "end_line": 211
        },
        {
          "name": "__next__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "bytes",
          "docstring": null,
          "calls": [
            "len",
            "self.progress.advance",
            "next"
          ],
          "variables": [
            "line"
          ],
          "start_line": 213,
          "end_line": 216
        },
        {
          "name": "closed",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "bool",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 219,
          "end_line": 220
        },
        {
          "name": "fileno",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "int",
          "docstring": null,
          "calls": [
            "self.handle.fileno"
          ],
          "variables": [],
          "start_line": 222,
          "end_line": 223
        },
        {
          "name": "isatty",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "bool",
          "docstring": null,
          "calls": [
            "self.handle.isatty"
          ],
          "variables": [],
          "start_line": 225,
          "end_line": 226
        },
        {
          "name": "mode",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "str",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 229,
          "end_line": 230
        },
        {
          "name": "name",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "str",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 233,
          "end_line": 234
        },
        {
          "name": "readable",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "bool",
          "docstring": null,
          "calls": [
            "self.handle.readable"
          ],
          "variables": [],
          "start_line": 236,
          "end_line": 237
        },
        {
          "name": "seekable",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "bool",
          "docstring": null,
          "calls": [
            "self.handle.seekable"
          ],
          "variables": [],
          "start_line": 239,
          "end_line": 240
        },
        {
          "name": "writable",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "bool",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 242,
          "end_line": 243
        },
        {
          "name": "read",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "bytes",
          "docstring": null,
          "calls": [
            "len",
            "self.progress.advance",
            "self.handle.read"
          ],
          "variables": [
            "block"
          ],
          "start_line": 245,
          "end_line": 248
        },
        {
          "name": "readinto",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "Union[bytearray, memoryview, mmap]"
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "self.handle.readinto",
            "self.progress.advance"
          ],
          "variables": [
            "n"
          ],
          "start_line": 250,
          "end_line": 253
        },
        {
          "name": "readline",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "bytes",
          "docstring": null,
          "calls": [
            "len",
            "self.handle.readline",
            "self.progress.advance"
          ],
          "variables": [
            "line"
          ],
          "start_line": 255,
          "end_line": 258
        },
        {
          "name": "readlines",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "List[bytes]",
          "docstring": null,
          "calls": [
            "self.progress.advance",
            "sum",
            "self.handle.readlines",
            "map"
          ],
          "variables": [
            "lines"
          ],
          "start_line": 260,
          "end_line": 263
        },
        {
          "name": "close",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "self.handle.close"
          ],
          "variables": [],
          "start_line": 265,
          "end_line": 268
        },
        {
          "name": "seek",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "int"
            }
          ],
          "return_type": "int",
          "docstring": null,
          "calls": [
            "self.progress.update",
            "self.handle.seek"
          ],
          "variables": [
            "pos"
          ],
          "start_line": 270,
          "end_line": 273
        },
        {
          "name": "tell",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "int",
          "docstring": null,
          "calls": [
            "self.handle.tell"
          ],
          "variables": [],
          "start_line": 275,
          "end_line": 276
        },
        {
          "name": "write",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "Any"
            }
          ],
          "return_type": "int",
          "docstring": null,
          "calls": [
            "UnsupportedOperation"
          ],
          "variables": [],
          "start_line": 278,
          "end_line": 279
        },
        {
          "name": "writelines",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "Iterable[Any]"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "UnsupportedOperation"
          ],
          "variables": [],
          "start_line": 281,
          "end_line": 282
        },
        {
          "name": "__init__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "\"Progress\""
            },
            {
              "name": null,
              "type": "_I"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 288,
          "end_line": 290
        },
        {
          "name": "__enter__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "_I",
          "docstring": null,
          "calls": [
            "self.progress.start",
            "self.reader.__enter__"
          ],
          "variables": [],
          "start_line": 292,
          "end_line": 294
        },
        {
          "name": "__exit__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "Optional[Type[BaseException]]"
            },
            {
              "name": null,
              "type": "Optional[BaseException]"
            },
            {
              "name": null,
              "type": "Optional[TracebackType]"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "self.reader.__exit__",
            "self.progress.stop"
          ],
          "variables": [],
          "start_line": 296,
          "end_line": 303
        },
        {
          "name": "wrap_file",
          "parameters": [
            {
              "name": null,
              "type": "BinaryIO"
            },
            {
              "name": null,
              "type": "int"
            }
          ],
          "return_type": "ContextManager[BinaryIO]",
          "docstring": null,
          "calls": [
            "_ReadContext",
            "DownloadColumn",
            "Progress",
            "BarColumn",
            "TextColumn",
            "TimeRemainingColumn",
            "progress.wrap_file",
            "columns.extend"
          ],
          "variables": [
            "columns",
            "progress",
            "reader"
          ],
          "start_line": 306,
          "end_line": 368
        },
        {
          "name": "open",
          "parameters": [
            {
              "name": null,
              "type": "Union[str, \"PathLike[str]\", bytes]"
            },
            {
              "name": null,
              "type": "Union[Literal[\"rt\"], Literal[\"r\"]]"
            }
          ],
          "return_type": "ContextManager[TextIO]",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 372,
          "end_line": 393
        },
        {
          "name": "open",
          "parameters": [
            {
              "name": null,
              "type": "Union[str, \"PathLike[str]\", bytes]"
            },
            {
              "name": null,
              "type": "Literal[\"rb\"]"
            }
          ],
          "return_type": "ContextManager[BinaryIO]",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 397,
          "end_line": 418
        },
        {
          "name": "open",
          "parameters": [
            {
              "name": null,
              "type": "Union[str, \"PathLike[str]\", bytes]"
            }
          ],
          "return_type": "Union[ContextManager[BinaryIO], ContextManager[TextIO]]",
          "docstring": null,
          "calls": [
            "_ReadContext",
            "DownloadColumn",
            "Progress",
            "BarColumn",
            "TextColumn",
            "TimeRemainingColumn",
            "progress.open",
            "columns.extend"
          ],
          "variables": [
            "columns",
            "progress",
            "reader"
          ],
          "start_line": 421,
          "end_line": 504
        },
        {
          "name": "__init__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 512,
          "end_line": 515
        },
        {
          "name": "get_table_column",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "Column",
          "docstring": null,
          "calls": [
            "Column"
          ],
          "variables": [],
          "start_line": 517,
          "end_line": 519
        },
        {
          "name": "__call__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "\"Task\""
            }
          ],
          "return_type": "RenderableType",
          "docstring": null,
          "calls": [
            "task.get_time",
            "self.render"
          ],
          "variables": [
            "current_time",
            "renderable"
          ],
          "start_line": 521,
          "end_line": 542
        },
        {
          "name": "render",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "\"Task\""
            }
          ],
          "return_type": "RenderableType",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 545,
          "end_line": 546
        },
        {
          "name": "__init__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "super",
            "super().__init__"
          ],
          "variables": [],
          "start_line": 556,
          "end_line": 560
        },
        {
          "name": "render",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "\"Task\""
            }
          ],
          "return_type": "RenderableType",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 562,
          "end_line": 563
        },
        {
          "name": "__init__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Text.from_markup",
            "super().__init__",
            "Spinner",
            "isinstance",
            "super"
          ],
          "variables": [],
          "start_line": 576,
          "end_line": 590
        },
        {
          "name": "set_spinner",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "str"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "Spinner"
          ],
          "variables": [],
          "start_line": 592,
          "end_line": 605
        },
        {
          "name": "render",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "\"Task\""
            }
          ],
          "return_type": "RenderableType",
          "docstring": null,
          "calls": [
            "self.spinner.render",
            "task.get_time"
          ],
          "variables": [
            "text"
          ],
          "start_line": 607,
          "end_line": 613
        },
        {
          "name": "__init__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "str"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "super",
            "super().__init__",
            "Column"
          ],
          "variables": [],
          "start_line": 619,
          "end_line": 633
        },
        {
          "name": "render",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "\"Task\""
            }
          ],
          "return_type": "Text",
          "docstring": null,
          "calls": [
            "Text.from_markup",
            "self.highlighter.highlight",
            "Text",
            "self.text_format.format"
          ],
          "variables": [
            "_text",
            "text",
            "text"
          ],
          "start_line": 635,
          "end_line": 643
        },
        {
          "name": "__init__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "super",
            "super().__init__"
          ],
          "variables": [],
          "start_line": 657,
          "end_line": 671
        },
        {
          "name": "render",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "\"Task\""
            }
          ],
          "return_type": "ProgressBar",
          "docstring": null,
          "calls": [
            "task.get_time",
            "max",
            "ProgressBar"
          ],
          "variables": [],
          "start_line": 673,
          "end_line": 685
        },
        {
          "name": "render",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "\"Task\""
            }
          ],
          "return_type": "Text",
          "docstring": null,
          "calls": [
            "int",
            "str",
            "max",
            "timedelta",
            "Text"
          ],
          "variables": [
            "elapsed",
            "delta"
          ],
          "start_line": 691,
          "end_line": 697
        },
        {
          "name": "__init__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "super",
            "super().__init__"
          ],
          "variables": [],
          "start_line": 714,
          "end_line": 734
        },
        {
          "name": "render_speed",
          "parameters": [
            {
              "name": "cls",
              "type": null
            },
            {
              "name": null,
              "type": "Optional[float]"
            }
          ],
          "return_type": "Text",
          "docstring": null,
          "calls": [
            "int",
            "filesize.pick_unit_and_suffix",
            "Text"
          ],
          "variables": [
            "data_speed"
          ],
          "start_line": 737,
          "end_line": 754
        },
        {
          "name": "render",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "\"Task\""
            }
          ],
          "return_type": "Text",
          "docstring": null,
          "calls": [
            "Text.from_markup",
            "text_format.format",
            "self.highlighter.highlight",
            "Text",
            "self.render_speed"
          ],
          "variables": [
            "text_format",
            "_text",
            "text",
            "text"
          ],
          "start_line": 756,
          "end_line": 769
        },
        {
          "name": "__init__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "super",
            "super().__init__"
          ],
          "variables": [],
          "start_line": 783,
          "end_line": 791
        },
        {
          "name": "render",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "\"Task\""
            }
          ],
          "return_type": "Text",
          "docstring": null,
          "calls": [
            "divmod",
            "int",
            "Text"
          ],
          "variables": [
            "task_time",
            "style",
            "task_time",
            "style",
            "formatted",
            "formatted"
          ],
          "start_line": 793,
          "end_line": 817
        },
        {
          "name": "render",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "\"Task\""
            }
          ],
          "return_type": "Text",
          "docstring": null,
          "calls": [
            "int",
            "Text",
            "filesize.decimal"
          ],
          "variables": [
            "data_size"
          ],
          "start_line": 823,
          "end_line": 826
        },
        {
          "name": "render",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "\"Task\""
            }
          ],
          "return_type": "Text",
          "docstring": null,
          "calls": [
            "int",
            "Text",
            "filesize.decimal"
          ],
          "variables": [
            "data_size"
          ],
          "start_line": 832,
          "end_line": 835
        },
        {
          "name": "__init__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "super",
            "super().__init__"
          ],
          "variables": [],
          "start_line": 850,
          "end_line": 852
        },
        {
          "name": "render",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "\"Task\""
            }
          ],
          "return_type": "Text",
          "docstring": null,
          "calls": [
            "int",
            "len",
            "str",
            "Text"
          ],
          "variables": [
            "completed",
            "total",
            "total_width"
          ],
          "start_line": 854,
          "end_line": 862
        },
        {
          "name": "__init__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "super",
            "super().__init__"
          ],
          "variables": [],
          "start_line": 872,
          "end_line": 876
        },
        {
          "name": "render",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "\"Task\""
            }
          ],
          "return_type": "Text",
          "docstring": null,
          "calls": [
            "int",
            "filesize.pick_unit_and_suffix",
            "Text"
          ],
          "variables": [
            "completed",
            "unit_and_suffix_calculation_base",
            "precision",
            "completed_ratio",
            "completed_str",
            "total",
            "total_ratio",
            "total_str",
            "total_str",
            "download_status",
            "download_text"
          ],
          "start_line": 878,
          "end_line": 911
        },
        {
          "name": "render",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "\"Task\""
            }
          ],
          "return_type": "Text",
          "docstring": null,
          "calls": [
            "int",
            "filesize.decimal",
            "Text"
          ],
          "variables": [
            "speed",
            "data_speed"
          ],
          "start_line": 917,
          "end_line": 923
        },
        {
          "name": "get_time",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "float",
          "docstring": null,
          "calls": [
            "self._get_time"
          ],
          "variables": [],
          "start_line": 983,
          "end_line": 985
        },
        {
          "name": "started",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "bool",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 988,
          "end_line": 990
        },
        {
          "name": "remaining",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "Optional[float]",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 993,
          "end_line": 997
        },
        {
          "name": "elapsed",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "Optional[float]",
          "docstring": null,
          "calls": [
            "self.get_time"
          ],
          "variables": [],
          "start_line": 1000,
          "end_line": 1006
        },
        {
          "name": "finished",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "bool",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 1009,
          "end_line": 1011
        },
        {
          "name": "percentage",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "float",
          "docstring": null,
          "calls": [
            "min",
            "max"
          ],
          "variables": [
            "completed",
            "completed"
          ],
          "start_line": 1014,
          "end_line": 1020
        },
        {
          "name": "speed",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "Optional[float]",
          "docstring": null,
          "calls": [
            "iter",
            "sum",
            "next"
          ],
          "variables": [
            "progress",
            "total_time",
            "iter_progress",
            "total_completed",
            "speed"
          ],
          "start_line": 1023,
          "end_line": 1038
        },
        {
          "name": "time_remaining",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "Optional[float]",
          "docstring": null,
          "calls": [
            "ceil"
          ],
          "variables": [
            "speed",
            "remaining",
            "estimate"
          ],
          "start_line": 1041,
          "end_line": 1052
        },
        {
          "name": "_reset",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "self._progress.clear"
          ],
          "variables": [],
          "start_line": 1054,
          "end_line": 1058
        },
        {
          "name": "__init__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "Union[str, ProgressColumn]"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "TaskID",
            "self.get_default_columns",
            "Live",
            "RLock",
            "get_console"
          ],
          "variables": [],
          "start_line": 1077,
          "end_line": 1111
        },
        {
          "name": "get_default_columns",
          "parameters": [
            {
              "name": "cls",
              "type": null
            }
          ],
          "return_type": "Tuple[ProgressColumn, ...]",
          "docstring": null,
          "calls": [
            "TextColumn",
            "TimeRemainingColumn",
            "TaskProgressColumn",
            "BarColumn"
          ],
          "variables": [],
          "start_line": 1114,
          "end_line": 1142
        },
        {
          "name": "console",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "Console",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 1145,
          "end_line": 1146
        },
        {
          "name": "tasks",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "List[Task]",
          "docstring": null,
          "calls": [
            "list",
            "self._tasks.values"
          ],
          "variables": [],
          "start_line": 1149,
          "end_line": 1152
        },
        {
          "name": "task_ids",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "List[TaskID]",
          "docstring": null,
          "calls": [
            "list",
            "self._tasks.keys"
          ],
          "variables": [],
          "start_line": 1155,
          "end_line": 1158
        },
        {
          "name": "finished",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "bool",
          "docstring": null,
          "calls": [
            "self._tasks.values",
            "all"
          ],
          "variables": [],
          "start_line": 1161,
          "end_line": 1166
        },
        {
          "name": "start",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "self.live.start"
          ],
          "variables": [],
          "start_line": 1168,
          "end_line": 1171
        },
        {
          "name": "stop",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "self.live.stop",
            "self.console.print"
          ],
          "variables": [],
          "start_line": 1173,
          "end_line": 1177
        },
        {
          "name": "__enter__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "Self",
          "docstring": null,
          "calls": [
            "self.start"
          ],
          "variables": [],
          "start_line": 1179,
          "end_line": 1181
        },
        {
          "name": "__exit__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "Optional[Type[BaseException]]"
            },
            {
              "name": null,
              "type": "Optional[BaseException]"
            },
            {
              "name": null,
              "type": "Optional[TracebackType]"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "self.stop"
          ],
          "variables": [],
          "start_line": 1183,
          "end_line": 1189
        },
        {
          "name": "track",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "Iterable[ProgressType]"
            }
          ],
          "return_type": "Iterable[ProgressType]",
          "docstring": null,
          "calls": [
            "length_hint",
            "float",
            "self.add_task",
            "self.update",
            "advance",
            "_TrackThread",
            "refresh"
          ],
          "variables": [
            "total",
            "task_id",
            "advance",
            "refresh"
          ],
          "start_line": 1191,
          "end_line": 1234
        },
        {
          "name": "wrap_file",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "BinaryIO"
            }
          ],
          "return_type": "BinaryIO",
          "docstring": null,
          "calls": [
            "ValueError",
            "_Reader",
            "self.add_task",
            "self.update"
          ],
          "variables": [
            "total_bytes",
            "total_bytes",
            "total_bytes",
            "task_id"
          ],
          "start_line": 1236,
          "end_line": 1276
        },
        {
          "name": "open",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "Union[str, \"PathLike[str]\", bytes]"
            },
            {
              "name": null,
              "type": "Literal[\"rb\"]"
            }
          ],
          "return_type": "BinaryIO",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 1279,
          "end_line": 1292
        },
        {
          "name": "open",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "Union[str, \"PathLike[str]\", bytes]"
            },
            {
              "name": null,
              "type": "Union[Literal[\"r\"], Literal[\"rt\"]]"
            }
          ],
          "return_type": "TextIO",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 1295,
          "end_line": 1308
        },
        {
          "name": "open",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "Union[str, \"PathLike[str]\", bytes]"
            }
          ],
          "return_type": "Union[BinaryIO, TextIO]",
          "docstring": null,
          "calls": [
            "_Reader",
            "stat",
            "\"\".join",
            "self.add_task",
            "self.update",
            "sorted",
            "io.TextIOWrapper",
            "ValueError",
            "warnings.warn",
            "io.open"
          ],
          "variables": [
            "_mode",
            "line_buffering",
            "buffering",
            "buffering",
            "total",
            "task_id",
            "handle",
            "reader"
          ],
          "start_line": 1310,
          "end_line": 1385
        },
        {
          "name": "start_task",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "TaskID"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "self.get_time"
          ],
          "variables": [
            "task"
          ],
          "start_line": 1387,
          "end_line": 1399
        },
        {
          "name": "stop_task",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "TaskID"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "self.get_time"
          ],
          "variables": [
            "task",
            "current_time"
          ],
          "start_line": 1401,
          "end_line": 1414
        },
        {
          "name": "update",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "TaskID"
            },
            {
              "name": null,
              "type": "Any"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "self.get_time",
            "task._reset",
            "ProgressSample",
            "self.refresh",
            "popleft",
            "task.fields.update",
            "_progress.append"
          ],
          "variables": [
            "task",
            "completed_start",
            "update_completed",
            "current_time",
            "old_sample_time",
            "_progress",
            "popleft"
          ],
          "start_line": 1416,
          "end_line": 1475
        },
        {
          "name": "reset",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "TaskID"
            },
            {
              "name": null,
              "type": "Any"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "task._reset",
            "self.refresh",
            "self.get_time"
          ],
          "variables": [
            "current_time",
            "task"
          ],
          "start_line": 1477,
          "end_line": 1514
        },
        {
          "name": "advance",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "TaskID"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "len",
            "self.get_time",
            "ProgressSample",
            "popleft",
            "_progress.append"
          ],
          "variables": [
            "current_time",
            "task",
            "completed_start",
            "update_completed",
            "old_sample_time",
            "_progress",
            "popleft"
          ],
          "start_line": 1516,
          "end_line": 1544
        },
        {
          "name": "refresh",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "self.live.refresh"
          ],
          "variables": [],
          "start_line": 1546,
          "end_line": 1549
        },
        {
          "name": "get_renderable",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "RenderableType",
          "docstring": null,
          "calls": [
            "self.get_renderables",
            "Group"
          ],
          "variables": [
            "renderable"
          ],
          "start_line": 1551,
          "end_line": 1554
        },
        {
          "name": "get_renderables",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "Iterable[RenderableType]",
          "docstring": null,
          "calls": [
            "self.make_tasks_table"
          ],
          "variables": [
            "table"
          ],
          "start_line": 1556,
          "end_line": 1559
        },
        {
          "name": "make_tasks_table",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "Iterable[Task]"
            }
          ],
          "return_type": "Table",
          "docstring": null,
          "calls": [
            "Table.grid",
            "table.add_row",
            "column.format",
            "isinstance",
            "Column",
            "column",
            "_column.get_table_column",
            "_column.get_table_column().copy"
          ],
          "variables": [
            "table_columns",
            "table"
          ],
          "start_line": 1561,
          "end_line": 1592
        },
        {
          "name": "__rich__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "RenderableType",
          "docstring": null,
          "calls": [
            "self.get_renderable"
          ],
          "variables": [],
          "start_line": 1594,
          "end_line": 1597
        },
        {
          "name": "add_task",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "str"
            },
            {
              "name": null,
              "type": "Any"
            }
          ],
          "return_type": "TaskID",
          "docstring": null,
          "calls": [
            "int",
            "TaskID",
            "self.start_task",
            "Task",
            "self.refresh"
          ],
          "variables": [
            "task",
            "new_task_index"
          ],
          "start_line": 1599,
          "end_line": 1640
        },
        {
          "name": "remove_task",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "TaskID"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 1642,
          "end_line": 1650
        }
      ],
      "variables": [
        "TaskID",
        "ProgressType",
        "GetTimeCallable",
        "_I",
        "task_id",
        "advance",
        "update_period",
        "last_completed",
        "wait",
        "completed",
        "last_completed",
        "columns",
        "progress",
        "line",
        "block",
        "n",
        "line",
        "lines",
        "pos",
        "columns",
        "progress",
        "reader",
        "columns",
        "progress",
        "reader",
        "max_refresh",
        "current_time",
        "renderable",
        "text",
        "_text",
        "text",
        "text",
        "elapsed",
        "delta",
        "data_speed",
        "text_format",
        "_text",
        "text",
        "text",
        "max_refresh",
        "task_time",
        "style",
        "task_time",
        "style",
        "formatted",
        "formatted",
        "data_size",
        "data_size",
        "completed",
        "total",
        "total_width",
        "completed",
        "unit_and_suffix_calculation_base",
        "precision",
        "completed_ratio",
        "completed_str",
        "total",
        "total_ratio",
        "total_str",
        "total_str",
        "download_status",
        "download_text",
        "speed",
        "data_speed",
        "timestamp",
        "completed",
        "id",
        "description",
        "total",
        "completed",
        "_get_time",
        "finished_time",
        "visible",
        "fields",
        "start_time",
        "stop_time",
        "finished_speed",
        "_progress",
        "_lock",
        "completed",
        "completed",
        "progress",
        "total_time",
        "iter_progress",
        "total_completed",
        "speed",
        "speed",
        "remaining",
        "estimate",
        "total",
        "task_id",
        "advance",
        "refresh",
        "total_bytes",
        "total_bytes",
        "total_bytes",
        "task_id",
        "_mode",
        "line_buffering",
        "buffering",
        "buffering",
        "total",
        "task_id",
        "handle",
        "reader",
        "task",
        "task",
        "current_time",
        "task",
        "completed_start",
        "update_completed",
        "current_time",
        "old_sample_time",
        "_progress",
        "popleft",
        "current_time",
        "task",
        "current_time",
        "task",
        "completed_start",
        "update_completed",
        "old_sample_time",
        "_progress",
        "popleft",
        "renderable",
        "table",
        "table_columns",
        "table",
        "task",
        "new_task_index",
        "syntax",
        "table",
        "progress_renderables",
        "examples",
        "console",
        "task1",
        "task2",
        "task3"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\rich\\progress_bar.py",
      "imports": [
        "import math",
        "from functools import lru_cache",
        "from time import monotonic",
        "from typing import Iterable, List, Optional",
        "from .color import Color, blend_rgb",
        "from .color_triplet import ColorTriplet",
        "from .console import Console, ConsoleOptions, RenderResult",
        "from .jupyter import JupyterMixin",
        "from .measure import Measurement",
        "from .segment import Segment",
        "from .style import Style, StyleType",
        "import time"
      ],
      "classes": [
        {
          "name": "ProgressBar",
          "base_classes": "(JupyterMixin)",
          "docstring": null,
          "methods": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 33,
          "end_line": 55
        },
        {
          "name": "__repr__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "str",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 57,
          "end_line": 58
        },
        {
          "name": "percentage_completed",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "Optional[float]",
          "docstring": null,
          "calls": [
            "min",
            "max"
          ],
          "variables": [
            "completed",
            "completed"
          ],
          "start_line": 61,
          "end_line": 67
        },
        {
          "name": "_get_pulse_segments",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "Style"
            },
            {
              "name": null,
              "type": "Style"
            },
            {
              "name": null,
              "type": "str"
            },
            {
              "name": null,
              "type": "bool"
            }
          ],
          "return_type": "List[Segment]",
          "docstring": null,
          "calls": [
            "back_style.color.get_truecolor",
            "_Segment",
            "fore_style.color.get_truecolor",
            "append",
            "blend_rgb",
            "range",
            "Segment",
            "from_triplet",
            "cos",
            "_Style",
            "ColorTriplet"
          ],
          "variables": [
            "bar",
            "segments",
            "append",
            "fore_color",
            "back_color",
            "cos",
            "pi",
            "_Segment",
            "_Style",
            "from_triplet",
            "position",
            "fade",
            "color"
          ],
          "start_line": 70,
          "end_line": 114
        },
        {
          "name": "update",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "float"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 116,
          "end_line": 124
        },
        {
          "name": "_render_pulse",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "Console"
            },
            {
              "name": null,
              "type": "int"
            }
          ],
          "return_type": "Iterable[Segment]",
          "docstring": null,
          "calls": [
            "int",
            "len",
            "console.get_style",
            "monotonic",
            "self._get_pulse_segments"
          ],
          "variables": [
            "fore_style",
            "back_style",
            "pulse_segments",
            "segment_count",
            "current_time",
            "segments",
            "offset",
            "segments"
          ],
          "start_line": 126,
          "end_line": 154
        },
        {
          "name": "__rich_console__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "Console"
            },
            {
              "name": null,
              "type": "ConsoleOptions"
            }
          ],
          "return_type": "RenderResult",
          "docstring": null,
          "calls": [
            "int",
            "self._render_pulse",
            "_Segment",
            "console.get_style",
            "max",
            "min"
          ],
          "variables": [
            "width",
            "ascii",
            "should_pulse",
            "completed",
            "bar",
            "half_bar_right",
            "half_bar_left",
            "complete_halves",
            "bar_count",
            "half_bar_count",
            "style",
            "is_finished",
            "complete_style",
            "_Segment",
            "remaining_bars"
          ],
          "start_line": 156,
          "end_line": 198
        },
        {
          "name": "__rich_measure__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "Console"
            },
            {
              "name": null,
              "type": "ConsoleOptions"
            }
          ],
          "return_type": "Measurement",
          "docstring": null,
          "calls": [
            "Measurement"
          ],
          "variables": [],
          "start_line": 200,
          "end_line": 207
        }
      ],
      "variables": [
        "PULSE_SIZE",
        "completed",
        "completed",
        "bar",
        "segments",
        "append",
        "fore_color",
        "back_color",
        "cos",
        "pi",
        "_Segment",
        "_Style",
        "from_triplet",
        "position",
        "fade",
        "color",
        "fore_style",
        "back_style",
        "pulse_segments",
        "segment_count",
        "current_time",
        "segments",
        "offset",
        "segments",
        "width",
        "ascii",
        "should_pulse",
        "completed",
        "bar",
        "half_bar_right",
        "half_bar_left",
        "complete_halves",
        "bar_count",
        "half_bar_count",
        "style",
        "is_finished",
        "complete_style",
        "_Segment",
        "remaining_bars",
        "console",
        "bar"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\rich\\prompt.py",
      "imports": [
        "from typing import Any, Generic, List, Optional, TextIO, TypeVar, Union, overload",
        "from . import get_console",
        "from .console import Console",
        "from .text import Text, TextType",
        "from rich import print"
      ],
      "classes": [
        {
          "name": "PromptError",
          "base_classes": "(Exception)",
          "docstring": null,
          "methods": []
        },
        {
          "name": "InvalidResponse",
          "base_classes": "(PromptError)",
          "docstring": null,
          "methods": []
        },
        {
          "name": "PromptBase",
          "base_classes": "(Generic[PromptType])",
          "docstring": null,
          "methods": []
        },
        {
          "name": "Prompt",
          "base_classes": "(PromptBase[str])",
          "docstring": null,
          "methods": []
        },
        {
          "name": "IntPrompt",
          "base_classes": "(PromptBase[int])",
          "docstring": null,
          "methods": []
        },
        {
          "name": "FloatPrompt",
          "base_classes": "(PromptBase[float])",
          "docstring": null,
          "methods": []
        },
        {
          "name": "Confirm",
          "base_classes": "(PromptBase[bool])",
          "docstring": null,
          "methods": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "TextType"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 23,
          "end_line": 24
        },
        {
          "name": "__rich__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "TextType",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 26,
          "end_line": 27
        },
        {
          "name": "__init__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "Text.from_markup",
            "isinstance",
            "get_console"
          ],
          "variables": [],
          "start_line": 54,
          "end_line": 76
        },
        {
          "name": "ask",
          "parameters": [
            {
              "name": "cls",
              "type": null
            },
            {
              "name": null,
              "type": "DefaultType"
            }
          ],
          "return_type": "Union[DefaultType, PromptType]",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 80,
          "end_line": 93
        },
        {
          "name": "ask",
          "parameters": [
            {
              "name": "cls",
              "type": null
            }
          ],
          "return_type": "PromptType",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 97,
          "end_line": 109
        },
        {
          "name": "ask",
          "parameters": [
            {
              "name": "cls",
              "type": null
            }
          ],
          "return_type": "Any",
          "docstring": null,
          "calls": [
            "_prompt",
            "cls"
          ],
          "variables": [
            "_prompt"
          ],
          "start_line": 112,
          "end_line": 149
        },
        {
          "name": "render_default",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "DefaultType"
            }
          ],
          "return_type": "Text",
          "docstring": null,
          "calls": [
            "Text"
          ],
          "variables": [],
          "start_line": 151,
          "end_line": 160
        },
        {
          "name": "make_prompt",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "DefaultType"
            }
          ],
          "return_type": "Text",
          "docstring": null,
          "calls": [
            "\"/\".join",
            "self.render_default",
            "isinstance",
            "prompt.append",
            "self.prompt.copy"
          ],
          "variables": [
            "prompt",
            "_choices",
            "choices",
            "_default"
          ],
          "start_line": 162,
          "end_line": 191
        },
        {
          "name": "get_input",
          "parameters": [
            {
              "name": "cls",
              "type": null
            },
            {
              "name": null,
              "type": "Console"
            },
            {
              "name": null,
              "type": "TextType"
            },
            {
              "name": null,
              "type": "bool"
            }
          ],
          "return_type": "str",
          "docstring": null,
          "calls": [
            "console.input"
          ],
          "variables": [],
          "start_line": 194,
          "end_line": 211
        },
        {
          "name": "check_choice",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "str"
            }
          ],
          "return_type": "bool",
          "docstring": null,
          "calls": [
            "choice.lower",
            "value.strip().lower",
            "value.strip"
          ],
          "variables": [],
          "start_line": 213,
          "end_line": 225
        },
        {
          "name": "process_response",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "str"
            }
          ],
          "return_type": "PromptType",
          "docstring": null,
          "calls": [
            "InvalidResponse",
            "[choice.lower() for choice in self.choices].index",
            "value.strip",
            "self.response_type",
            "choice.lower",
            "value.lower",
            "self.check_choice"
          ],
          "variables": [
            "value",
            "return_value",
            "return_value"
          ],
          "start_line": 227,
          "end_line": 256
        },
        {
          "name": "on_validate_error",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "str"
            },
            {
              "name": null,
              "type": "InvalidResponse"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "self.console.print"
          ],
          "variables": [],
          "start_line": 258,
          "end_line": 265
        },
        {
          "name": "pre_prompt",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 267,
          "end_line": 268
        },
        {
          "name": "__call__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "PromptType",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 271,
          "end_line": 272
        },
        {
          "name": "__call__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "DefaultType"
            }
          ],
          "return_type": "Union[PromptType, DefaultType]",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 275,
          "end_line": 278
        },
        {
          "name": "__call__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "Any",
          "docstring": null,
          "calls": [
            "self.make_prompt",
            "self.process_response",
            "self.pre_prompt",
            "self.on_validate_error",
            "self.get_input"
          ],
          "variables": [
            "prompt",
            "value",
            "return_value"
          ],
          "start_line": 280,
          "end_line": 301
        },
        {
          "name": "render_default",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "DefaultType"
            }
          ],
          "return_type": "Text",
          "docstring": null,
          "calls": [
            "Text"
          ],
          "variables": [],
          "start_line": 353,
          "end_line": 356
        },
        {
          "name": "process_response",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "str"
            }
          ],
          "return_type": "bool",
          "docstring": null,
          "calls": [
            "InvalidResponse",
            "value.strip().lower",
            "value.strip"
          ],
          "variables": [
            "value"
          ],
          "start_line": 358,
          "end_line": 363
        }
      ],
      "variables": [
        "PromptType",
        "DefaultType",
        "response_type",
        "validate_error_message",
        "illegal_choice_message",
        "prompt_suffix",
        "choices",
        "_prompt",
        "prompt",
        "_choices",
        "choices",
        "_default",
        "value",
        "return_value",
        "return_value",
        "prompt",
        "value",
        "return_value",
        "response_type",
        "response_type",
        "validate_error_message",
        "response_type",
        "validate_error_message",
        "response_type",
        "validate_error_message",
        "choices",
        "value",
        "result",
        "password",
        "fruit",
        "doggie"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\rich\\protocol.py",
      "imports": [
        "from typing import Any, cast, Set, TYPE_CHECKING",
        "from inspect import isclass",
        "from rich.console import RenderableType",
        "from rich.console import RenderableType"
      ],
      "classes": [],
      "functions": [
        {
          "name": "is_renderable",
          "parameters": [
            {
              "name": null,
              "type": "Any"
            }
          ],
          "return_type": "bool",
          "docstring": null,
          "calls": [
            "hasattr",
            "isinstance"
          ],
          "variables": [],
          "start_line": 10,
          "end_line": 16
        },
        {
          "name": "rich_cast",
          "parameters": [
            {
              "name": null,
              "type": "object"
            }
          ],
          "return_type": "\"RenderableType\"",
          "docstring": null,
          "calls": [
            "repr",
            "getattr",
            "set",
            "cast_method",
            "type",
            "isclass",
            "hasattr",
            "cast",
            "rich_visited_set.add"
          ],
          "variables": [
            "rich_visited_set",
            "cast_method",
            "renderable",
            "renderable_type"
          ],
          "start_line": 19,
          "end_line": 42
        }
      ],
      "variables": [
        "_GIBBERISH",
        "rich_visited_set",
        "cast_method",
        "renderable",
        "renderable_type"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\rich\\region.py",
      "imports": [
        "from typing import NamedTuple"
      ],
      "classes": [
        {
          "name": "Region",
          "base_classes": "(NamedTuple)",
          "docstring": null,
          "methods": []
        }
      ],
      "functions": [],
      "variables": [
        "x",
        "y",
        "width",
        "height"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\rich\\repr.py",
      "imports": [
        "import inspect",
        "from functools import partial",
        "from typing import (\n    Any,\n    Callable,\n    Iterable,\n    List,\n    Optional,\n    Tuple,\n    Type,\n    TypeVar,\n    Union,\n    overload,\n)",
        "from rich.console import Console"
      ],
      "classes": [
        {
          "name": "ReprError",
          "base_classes": "(Exception)",
          "docstring": null,
          "methods": []
        },
        {
          "name": "Foo",
          "base_classes": null,
          "docstring": null,
          "methods": []
        }
      ],
      "functions": [
        {
          "name": "auto",
          "parameters": [
            {
              "name": null,
              "type": "Optional[Type[T]]"
            }
          ],
          "return_type": "Type[T]",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 28,
          "end_line": 29
        },
        {
          "name": "auto",
          "parameters": [],
          "return_type": "Callable[[Type[T]], Type[T]]",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 33,
          "end_line": 34
        },
        {
          "name": "auto",
          "parameters": [],
          "return_type": "Union[Type[T], Callable[[Type[T]], Type[T]]]",
          "docstring": null,
          "calls": [
            "len",
            "getattr",
            "repr",
            "do_replace",
            "append",
            "' '.join",
            "', '.join",
            "signature.parameters.items",
            "hasattr",
            "isinstance",
            "self.__rich_repr__",
            "inspect.signature",
            "ReprError",
            "partial"
          ],
          "variables": [
            "repr_str",
            "append",
            "angular",
            "signature"
          ],
          "start_line": 37,
          "end_line": 101
        },
        {
          "name": "do_replace",
          "parameters": [
            {
              "name": null,
              "type": "Type[T]"
            }
          ],
          "return_type": "Type[T]",
          "docstring": null,
          "calls": [
            "len",
            "getattr",
            "repr",
            "append",
            "' '.join",
            "', '.join",
            "signature.parameters.items",
            "hasattr",
            "isinstance",
            "self.__rich_repr__",
            "inspect.signature",
            "ReprError"
          ],
          "variables": [
            "repr_str",
            "append",
            "angular",
            "signature"
          ],
          "start_line": 42,
          "end_line": 96
        },
        {
          "name": "auto_repr",
          "parameters": [
            {
              "name": null,
              "type": "T"
            }
          ],
          "return_type": "str",
          "docstring": null,
          "calls": [
            "len",
            "getattr",
            "repr",
            "append",
            "' '.join",
            "', '.join",
            "isinstance",
            "self.__rich_repr__"
          ],
          "variables": [
            "repr_str",
            "append",
            "angular"
          ],
          "start_line": 43,
          "end_line": 66
        },
        {
          "name": "auto_rich_repr",
          "parameters": [
            {
              "name": null,
              "type": "Type[T]"
            }
          ],
          "return_type": "Result",
          "docstring": null,
          "calls": [
            "ReprError",
            "getattr",
            "signature.parameters.items",
            "inspect.signature"
          ],
          "variables": [
            "signature"
          ],
          "start_line": 68,
          "end_line": 86
        },
        {
          "name": "rich_repr",
          "parameters": [
            {
              "name": null,
              "type": "Optional[Type[T]]"
            }
          ],
          "return_type": "Type[T]",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 105,
          "end_line": 106
        },
        {
          "name": "rich_repr",
          "parameters": [],
          "return_type": "Callable[[Type[T]], Type[T]]",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 110,
          "end_line": 111
        },
        {
          "name": "rich_repr",
          "parameters": [],
          "return_type": "Union[Type[T], Callable[[Type[T]], Type[T]]]",
          "docstring": null,
          "calls": [
            "auto"
          ],
          "variables": [],
          "start_line": 114,
          "end_line": 120
        },
        {
          "name": "__rich_repr__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "Result",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 127,
          "end_line": 130
        }
      ],
      "variables": [
        "T",
        "Result",
        "RichReprResult",
        "repr_str",
        "append",
        "angular",
        "signature",
        "foo",
        "console"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\rich\\rule.py",
      "imports": [
        "from typing import Union",
        "from .align import AlignMethod",
        "from .cells import cell_len, set_cell_size",
        "from .console import Console, ConsoleOptions, RenderResult",
        "from .jupyter import JupyterMixin",
        "from .measure import Measurement",
        "from .style import Style",
        "from .text import Text",
        "import sys",
        "from rich.console import Console"
      ],
      "classes": [
        {
          "name": "Rule",
          "base_classes": "(JupyterMixin)",
          "docstring": null,
          "methods": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "ValueError",
            "cell_len"
          ],
          "variables": [],
          "start_line": 23,
          "end_line": 44
        },
        {
          "name": "__repr__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "str",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 46,
          "end_line": 47
        },
        {
          "name": "__rich_console__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "Console"
            },
            {
              "name": null,
              "type": "ConsoleOptions"
            }
          ],
          "return_type": "RenderResult",
          "docstring": null,
          "calls": [
            "console.render_str",
            "right.truncate",
            "set_cell_size",
            "title_text.plain.replace",
            "max",
            "left.truncate",
            "rule_text.append",
            "isinstance",
            "self.characters.isascii",
            "self._rule_line",
            "cell_len",
            "title_text.expand_tabs",
            "Text",
            "title_text.truncate"
          ],
          "variables": [
            "width",
            "characters",
            "chars_len",
            "title_text",
            "title_text",
            "required_space",
            "truncate_width",
            "rule_text",
            "side_width",
            "left",
            "right_length",
            "right"
          ],
          "start_line": 49,
          "end_line": 103
        },
        {
          "name": "_rule_line",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "int"
            },
            {
              "name": null,
              "type": "int"
            }
          ],
          "return_type": "Text",
          "docstring": null,
          "calls": [
            "rule_text.truncate",
            "set_cell_size",
            "Text"
          ],
          "variables": [
            "rule_text"
          ],
          "start_line": 105,
          "end_line": 109
        },
        {
          "name": "__rich_measure__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "Console"
            },
            {
              "name": null,
              "type": "ConsoleOptions"
            }
          ],
          "return_type": "Measurement",
          "docstring": null,
          "calls": [
            "Measurement"
          ],
          "variables": [],
          "start_line": 111,
          "end_line": 114
        }
      ],
      "variables": [
        "width",
        "characters",
        "chars_len",
        "title_text",
        "title_text",
        "required_space",
        "truncate_width",
        "rule_text",
        "side_width",
        "left",
        "right_length",
        "right",
        "rule_text",
        "text",
        "text",
        "console",
        "console"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\rich\\scope.py",
      "imports": [
        "from collections.abc import Mapping",
        "from typing import TYPE_CHECKING, Any, Optional, Tuple",
        "from .highlighter import ReprHighlighter",
        "from .panel import Panel",
        "from .pretty import Pretty",
        "from .table import Table",
        "from .text import Text, TextType",
        "from .console import ConsoleRenderable",
        "from rich import print"
      ],
      "classes": [],
      "functions": [
        {
          "name": "render_scope",
          "parameters": [
            {
              "name": null,
              "type": "\"Mapping[str, Any]\""
            }
          ],
          "return_type": "\"ConsoleRenderable\"",
          "docstring": null,
          "calls": [
            "Panel.fit",
            "ReprHighlighter",
            "items_table.add_column",
            "Table.grid",
            "scope.items",
            "sorted",
            "Text.assemble",
            "items_table.add_row",
            "key.lower",
            "key.startswith",
            "Pretty"
          ],
          "variables": [
            "highlighter",
            "items_table",
            "items",
            "key_text"
          ],
          "start_line": 14,
          "end_line": 67
        },
        {
          "name": "sort_items",
          "parameters": [
            {
              "name": null,
              "type": "Tuple[str, Any]"
            }
          ],
          "return_type": "Tuple[bool, str]",
          "docstring": null,
          "calls": [
            "key.lower",
            "key.startswith"
          ],
          "variables": [],
          "start_line": 41,
          "end_line": 44
        },
        {
          "name": "test",
          "parameters": [
            {
              "name": null,
              "type": "float"
            },
            {
              "name": null,
              "type": "float"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "render_scope",
            "locals",
            "print"
          ],
          "variables": [
            "list_of_things",
            "dict_of_things"
          ],
          "start_line": 75,
          "end_line": 83
        }
      ],
      "variables": [
        "highlighter",
        "items_table",
        "items",
        "key_text",
        "list_of_things",
        "dict_of_things"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\rich\\screen.py",
      "imports": [
        "from typing import Optional, TYPE_CHECKING",
        "from .segment import Segment",
        "from .style import StyleType",
        "from ._loop import loop_last",
        "from .console import (\n        Console,\n        ConsoleOptions,\n        RenderResult,\n        RenderableType,\n        Group,\n    )",
        "from rich.console import Group"
      ],
      "classes": [
        {
          "name": "Screen",
          "base_classes": null,
          "docstring": null,
          "methods": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "\"RenderableType\""
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "Group"
          ],
          "variables": [],
          "start_line": 28,
          "end_line": 38
        },
        {
          "name": "__rich_console__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "\"Console\""
            },
            {
              "name": null,
              "type": "\"ConsoleOptions\""
            }
          ],
          "return_type": "\"RenderResult\"",
          "docstring": null,
          "calls": [
            "Segment.set_shape",
            "console.get_style",
            "loop_last",
            "Segment",
            "options.update",
            "Segment.line",
            "console.render_lines"
          ],
          "variables": [
            "style",
            "render_options",
            "lines",
            "lines",
            "new_line"
          ],
          "start_line": 40,
          "end_line": 54
        }
      ],
      "variables": [
        "renderable",
        "style",
        "render_options",
        "lines",
        "lines",
        "new_line"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\rich\\segment.py",
      "imports": [
        "from enum import IntEnum",
        "from functools import lru_cache",
        "from itertools import filterfalse",
        "from logging import getLogger",
        "from operator import attrgetter",
        "from typing import (\n    TYPE_CHECKING,\n    Dict,\n    Iterable,\n    List,\n    NamedTuple,\n    Optional,\n    Sequence,\n    Tuple,\n    Type,\n    Union,\n)",
        "from .cells import (\n    _is_single_cell_widths,\n    cached_cell_len,\n    cell_len,\n    get_character_cell_size,\n    set_cell_size,\n)",
        "from .repr import Result, rich_repr",
        "from .style import Style",
        "from .console import Console, ConsoleOptions, RenderResult",
        "from rich.console import Console",
        "from rich.syntax import Syntax",
        "from rich.text import Text"
      ],
      "classes": [
        {
          "name": "ControlType",
          "base_classes": "(IntEnum)",
          "docstring": null,
          "methods": []
        },
        {
          "name": "Segment",
          "base_classes": "(NamedTuple)",
          "docstring": null,
          "methods": []
        },
        {
          "name": "Segments",
          "base_classes": null,
          "docstring": null,
          "methods": []
        },
        {
          "name": "SegmentLines",
          "base_classes": null,
          "docstring": null,
          "methods": []
        }
      ],
      "functions": [
        {
          "name": "cell_length",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "int",
          "docstring": null,
          "calls": [
            "cell_len"
          ],
          "variables": [],
          "start_line": 82,
          "end_line": 89
        },
        {
          "name": "__rich_repr__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "Result",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 91,
          "end_line": 98
        },
        {
          "name": "__bool__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "bool",
          "docstring": null,
          "calls": [
            "bool"
          ],
          "variables": [],
          "start_line": 100,
          "end_line": 102
        },
        {
          "name": "is_control",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "bool",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 105,
          "end_line": 107
        },
        {
          "name": "_split_cells",
          "parameters": [
            {
              "name": "cls",
              "type": null
            },
            {
              "name": null,
              "type": "\"Segment\""
            },
            {
              "name": null,
              "type": "int"
            }
          ],
          "return_type": "Tuple[\"Segment\", \"Segment\"]",
          "docstring": null,
          "calls": [
            "int",
            "len",
            "_Segment",
            "cell_size",
            "cell_len"
          ],
          "variables": [
            "_Segment",
            "cell_length",
            "cell_size",
            "pos",
            "before",
            "cell_pos",
            "out_by"
          ],
          "start_line": 111,
          "end_line": 156
        },
        {
          "name": "split_cells",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "int"
            }
          ],
          "return_type": "Tuple[\"Segment\", \"Segment\"]",
          "docstring": null,
          "calls": [
            "self._split_cells",
            "len",
            "Segment",
            "_is_single_cell_widths"
          ],
          "variables": [],
          "start_line": 158,
          "end_line": 182
        },
        {
          "name": "line",
          "parameters": [
            {
              "name": "cls",
              "type": null
            }
          ],
          "return_type": "\"Segment\"",
          "docstring": null,
          "calls": [
            "cls"
          ],
          "variables": [],
          "start_line": 185,
          "end_line": 187
        },
        {
          "name": "apply_style",
          "parameters": [
            {
              "name": "cls",
              "type": null
            },
            {
              "name": null,
              "type": "Iterable[\"Segment\"]"
            }
          ],
          "return_type": "Iterable[\"Segment\"]",
          "docstring": null,
          "calls": [
            "cls",
            "apply"
          ],
          "variables": [
            "result_segments",
            "apply",
            "result_segments",
            "result_segments"
          ],
          "start_line": 190,
          "end_line": 228
        },
        {
          "name": "filter_control",
          "parameters": [
            {
              "name": "cls",
              "type": null
            },
            {
              "name": null,
              "type": "Iterable[\"Segment\"]"
            }
          ],
          "return_type": "Iterable[\"Segment\"]",
          "docstring": null,
          "calls": [
            "attrgetter",
            "filter",
            "filterfalse"
          ],
          "variables": [],
          "start_line": 231,
          "end_line": 247
        },
        {
          "name": "split_lines",
          "parameters": [
            {
              "name": "cls",
              "type": null
            },
            {
              "name": null,
              "type": "Iterable[\"Segment\"]"
            }
          ],
          "return_type": "Iterable[List[\"Segment\"]]",
          "docstring": null,
          "calls": [
            "append",
            "cls",
            "text.partition"
          ],
          "variables": [
            "line",
            "append",
            "line",
            "append"
          ],
          "start_line": 250,
          "end_line": 276
        },
        {
          "name": "split_and_crop_lines",
          "parameters": [
            {
              "name": "cls",
              "type": null
            },
            {
              "name": null,
              "type": "Iterable[\"Segment\"]"
            },
            {
              "name": null,
              "type": "int"
            }
          ],
          "return_type": "Iterable[List[\"Segment\"]]",
          "docstring": null,
          "calls": [
            "cropped_line.append",
            "cls",
            "line.clear",
            "append",
            "text.partition",
            "adjust_line_length"
          ],
          "variables": [
            "line",
            "append",
            "adjust_line_length",
            "new_line_segment",
            "cropped_line"
          ],
          "start_line": 279,
          "end_line": 323
        },
        {
          "name": "adjust_line_length",
          "parameters": [
            {
              "name": "cls",
              "type": null
            },
            {
              "name": null,
              "type": "List[\"Segment\"]"
            },
            {
              "name": null,
              "type": "int"
            }
          ],
          "return_type": "List[\"Segment\"]",
          "docstring": null,
          "calls": [
            "append",
            "set_cell_size",
            "cls",
            "sum"
          ],
          "variables": [
            "line_length",
            "new_line",
            "new_line",
            "new_line",
            "new_line",
            "append",
            "line_length",
            "segment_length",
            "text",
            "new_line"
          ],
          "start_line": 326,
          "end_line": 368
        },
        {
          "name": "get_line_length",
          "parameters": [
            {
              "name": "cls",
              "type": null
            },
            {
              "name": null,
              "type": "List[\"Segment\"]"
            }
          ],
          "return_type": "int",
          "docstring": null,
          "calls": [
            "_cell_len",
            "sum"
          ],
          "variables": [
            "_cell_len"
          ],
          "start_line": 371,
          "end_line": 381
        },
        {
          "name": "get_shape",
          "parameters": [
            {
              "name": "cls",
              "type": null
            },
            {
              "name": null,
              "type": "List[List[\"Segment\"]]"
            }
          ],
          "return_type": "Tuple[int, int]",
          "docstring": null,
          "calls": [
            "len",
            "get_line_length",
            "max"
          ],
          "variables": [
            "get_line_length",
            "max_width"
          ],
          "start_line": 384,
          "end_line": 395
        },
        {
          "name": "set_shape",
          "parameters": [
            {
              "name": "cls",
              "type": null
            },
            {
              "name": null,
              "type": "List[List[\"Segment\"]]"
            },
            {
              "name": null,
              "type": "int"
            }
          ],
          "return_type": "List[List[\"Segment\"]]",
          "docstring": null,
          "calls": [
            "len",
            "cls",
            "adjust_line_length",
            "shaped_lines.extend"
          ],
          "variables": [
            "_height",
            "blank",
            "adjust_line_length",
            "shaped_lines"
          ],
          "start_line": 398,
          "end_line": 431
        },
        {
          "name": "align_top",
          "parameters": [
            {
              "name": null,
              "type": "Type[\"Segment\"]"
            },
            {
              "name": null,
              "type": "List[List[\"Segment\"]]"
            },
            {
              "name": null,
              "type": "int"
            },
            {
              "name": null,
              "type": "int"
            },
            {
              "name": null,
              "type": "Style"
            }
          ],
          "return_type": "List[List[\"Segment\"]]",
          "docstring": null,
          "calls": [
            "len",
            "cls"
          ],
          "variables": [
            "extra_lines",
            "lines",
            "blank",
            "lines"
          ],
          "start_line": 434,
          "end_line": 460
        },
        {
          "name": "align_bottom",
          "parameters": [
            {
              "name": null,
              "type": "Type[\"Segment\"]"
            },
            {
              "name": null,
              "type": "List[List[\"Segment\"]]"
            },
            {
              "name": null,
              "type": "int"
            },
            {
              "name": null,
              "type": "int"
            },
            {
              "name": null,
              "type": "Style"
            }
          ],
          "return_type": "List[List[\"Segment\"]]",
          "docstring": null,
          "calls": [
            "len",
            "cls"
          ],
          "variables": [
            "extra_lines",
            "lines",
            "blank",
            "lines"
          ],
          "start_line": 463,
          "end_line": 489
        },
        {
          "name": "align_middle",
          "parameters": [
            {
              "name": null,
              "type": "Type[\"Segment\"]"
            },
            {
              "name": null,
              "type": "List[List[\"Segment\"]]"
            },
            {
              "name": null,
              "type": "int"
            },
            {
              "name": null,
              "type": "int"
            },
            {
              "name": null,
              "type": "Style"
            }
          ],
          "return_type": "List[List[\"Segment\"]]",
          "docstring": null,
          "calls": [
            "len",
            "cls"
          ],
          "variables": [
            "extra_lines",
            "lines",
            "blank",
            "top_lines",
            "bottom_lines",
            "lines"
          ],
          "start_line": 492,
          "end_line": 520
        },
        {
          "name": "simplify",
          "parameters": [
            {
              "name": "cls",
              "type": null
            },
            {
              "name": null,
              "type": "Iterable[\"Segment\"]"
            }
          ],
          "return_type": "Iterable[\"Segment\"]",
          "docstring": null,
          "calls": [
            "iter",
            "_Segment",
            "next"
          ],
          "variables": [
            "iter_segments",
            "last_segment",
            "_Segment",
            "last_segment",
            "last_segment"
          ],
          "start_line": 523,
          "end_line": 547
        },
        {
          "name": "strip_links",
          "parameters": [
            {
              "name": "cls",
              "type": null
            },
            {
              "name": null,
              "type": "Iterable[\"Segment\"]"
            }
          ],
          "return_type": "Iterable[\"Segment\"]",
          "docstring": null,
          "calls": [
            "style.update_link",
            "cls"
          ],
          "variables": [],
          "start_line": 550,
          "end_line": 564
        },
        {
          "name": "strip_styles",
          "parameters": [
            {
              "name": "cls",
              "type": null
            },
            {
              "name": null,
              "type": "Iterable[\"Segment\"]"
            }
          ],
          "return_type": "Iterable[\"Segment\"]",
          "docstring": null,
          "calls": [
            "cls"
          ],
          "variables": [],
          "start_line": 567,
          "end_line": 577
        },
        {
          "name": "remove_color",
          "parameters": [
            {
              "name": "cls",
              "type": null
            },
            {
              "name": null,
              "type": "Iterable[\"Segment\"]"
            }
          ],
          "return_type": "Iterable[\"Segment\"]",
          "docstring": null,
          "calls": [
            "cache.get",
            "cls"
          ],
          "variables": [
            "cache",
            "colorless_style",
            "colorless_style"
          ],
          "start_line": 580,
          "end_line": 599
        },
        {
          "name": "divide",
          "parameters": [
            {
              "name": "cls",
              "type": null
            },
            {
              "name": null,
              "type": "Iterable[\"Segment\"]"
            },
            {
              "name": null,
              "type": "Iterable[int]"
            }
          ],
          "return_type": "Iterable[List[\"Segment\"]]",
          "docstring": null,
          "calls": [
            "iter",
            "segments_clear",
            "segment.split_cells",
            "_cell_len",
            "segments_copy",
            "next",
            "add_segment"
          ],
          "variables": [
            "split_segments",
            "add_segment",
            "iter_cuts",
            "cut",
            "pos",
            "segments_clear",
            "segments_copy",
            "_cell_len",
            "end_pos",
            "pos",
            "pos",
            "cut",
            "pos",
            "cut"
          ],
          "start_line": 602,
          "end_line": 668
        },
        {
          "name": "__init__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "Iterable[Segment]"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "list"
          ],
          "variables": [],
          "start_line": 680,
          "end_line": 682
        },
        {
          "name": "__rich_console__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "\"Console\""
            },
            {
              "name": null,
              "type": "\"ConsoleOptions\""
            }
          ],
          "return_type": "\"RenderResult\"",
          "docstring": null,
          "calls": [
            "Segment.line"
          ],
          "variables": [
            "line"
          ],
          "start_line": 684,
          "end_line": 693
        },
        {
          "name": "__init__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "Iterable[List[Segment]]"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "list"
          ],
          "variables": [],
          "start_line": 697,
          "end_line": 706
        },
        {
          "name": "__rich_console__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "\"Console\""
            },
            {
              "name": null,
              "type": "\"ConsoleOptions\""
            }
          ],
          "return_type": "\"RenderResult\"",
          "docstring": null,
          "calls": [
            "Segment.line"
          ],
          "variables": [
            "new_line"
          ],
          "start_line": 708,
          "end_line": 718
        }
      ],
      "variables": [
        "log",
        "BELL",
        "CARRIAGE_RETURN",
        "HOME",
        "CLEAR",
        "SHOW_CURSOR",
        "HIDE_CURSOR",
        "ENABLE_ALT_SCREEN",
        "DISABLE_ALT_SCREEN",
        "CURSOR_UP",
        "CURSOR_DOWN",
        "CURSOR_FORWARD",
        "CURSOR_BACKWARD",
        "CURSOR_MOVE_TO_COLUMN",
        "CURSOR_MOVE_TO",
        "ERASE_IN_LINE",
        "SET_WINDOW_TITLE",
        "ControlCode",
        "text",
        "style",
        "control",
        "_Segment",
        "cell_length",
        "cell_size",
        "pos",
        "before",
        "cell_pos",
        "out_by",
        "result_segments",
        "apply",
        "result_segments",
        "result_segments",
        "line",
        "append",
        "line",
        "append",
        "line",
        "append",
        "adjust_line_length",
        "new_line_segment",
        "cropped_line",
        "line_length",
        "new_line",
        "new_line",
        "new_line",
        "new_line",
        "append",
        "line_length",
        "segment_length",
        "text",
        "new_line",
        "_cell_len",
        "get_line_length",
        "max_width",
        "_height",
        "blank",
        "adjust_line_length",
        "shaped_lines",
        "extra_lines",
        "lines",
        "blank",
        "lines",
        "extra_lines",
        "lines",
        "blank",
        "lines",
        "extra_lines",
        "lines",
        "blank",
        "top_lines",
        "bottom_lines",
        "lines",
        "iter_segments",
        "last_segment",
        "_Segment",
        "last_segment",
        "last_segment",
        "cache",
        "colorless_style",
        "colorless_style",
        "split_segments",
        "add_segment",
        "iter_cuts",
        "cut",
        "pos",
        "segments_clear",
        "segments_copy",
        "_cell_len",
        "end_pos",
        "pos",
        "pos",
        "cut",
        "pos",
        "cut",
        "line",
        "new_line",
        "code",
        "text",
        "console",
        "fragments"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\rich\\spinner.py",
      "imports": [
        "from typing import TYPE_CHECKING, List, Optional, Union, cast",
        "from ._spinners import SPINNERS",
        "from .measure import Measurement",
        "from .table import Table",
        "from .text import Text",
        "from .console import Console, ConsoleOptions, RenderableType, RenderResult",
        "from .style import StyleType",
        "from time import sleep",
        "from .console import Group",
        "from .live import Live"
      ],
      "classes": [
        {
          "name": "Spinner",
          "base_classes": null,
          "docstring": null,
          "methods": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "str"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "Text.from_markup",
            "isinstance",
            "cast",
            "KeyError"
          ],
          "variables": [
            "spinner"
          ],
          "start_line": 26,
          "end_line": 48
        },
        {
          "name": "__rich_console__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "\"Console\""
            },
            {
              "name": null,
              "type": "\"ConsoleOptions\""
            }
          ],
          "return_type": "\"RenderResult\"",
          "docstring": null,
          "calls": [
            "console.get_time",
            "self.render"
          ],
          "variables": [],
          "start_line": 50,
          "end_line": 53
        },
        {
          "name": "__rich_measure__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "\"Console\""
            },
            {
              "name": null,
              "type": "\"ConsoleOptions\""
            }
          ],
          "return_type": "Measurement",
          "docstring": null,
          "calls": [
            "Measurement.get",
            "self.render"
          ],
          "variables": [
            "text"
          ],
          "start_line": 55,
          "end_line": 59
        },
        {
          "name": "render",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "float"
            }
          ],
          "return_type": "\"RenderableType\"",
          "docstring": null,
          "calls": [
            "int",
            "len",
            "Table.grid",
            "table.add_row",
            "Text.assemble",
            "isinstance",
            "Text"
          ],
          "variables": [
            "frame_no",
            "frame",
            "table"
          ],
          "start_line": 61,
          "end_line": 93
        },
        {
          "name": "update",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "Text.from_markup",
            "isinstance"
          ],
          "variables": [],
          "start_line": 95,
          "end_line": 114
        }
      ],
      "variables": [
        "spinner",
        "text",
        "frame_no",
        "frame",
        "table",
        "all_spinners"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\rich\\status.py",
      "imports": [
        "from types import TracebackType",
        "from typing import Optional, Type",
        "from .console import Console, RenderableType",
        "from .jupyter import JupyterMixin",
        "from .live import Live",
        "from .spinner import Spinner",
        "from .style import StyleType",
        "from time import sleep",
        "from .console import Console"
      ],
      "classes": [
        {
          "name": "Status",
          "base_classes": "(JupyterMixin)",
          "docstring": null,
          "methods": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "RenderableType"
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Spinner",
            "Live"
          ],
          "variables": [],
          "start_line": 23,
          "end_line": 42
        },
        {
          "name": "renderable",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "Spinner",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 45,
          "end_line": 46
        },
        {
          "name": "console",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "\"Console\"",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 49,
          "end_line": 51
        },
        {
          "name": "update",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "self._live.update",
            "Spinner",
            "self._spinner.update"
          ],
          "variables": [],
          "start_line": 53,
          "end_line": 83
        },
        {
          "name": "start",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "self._live.start"
          ],
          "variables": [],
          "start_line": 85,
          "end_line": 87
        },
        {
          "name": "stop",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "self._live.stop"
          ],
          "variables": [],
          "start_line": 89,
          "end_line": 91
        },
        {
          "name": "__rich__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "RenderableType",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 93,
          "end_line": 94
        },
        {
          "name": "__enter__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "\"Status\"",
          "docstring": null,
          "calls": [
            "self.start"
          ],
          "variables": [],
          "start_line": 96,
          "end_line": 98
        },
        {
          "name": "__exit__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "Optional[Type[BaseException]]"
            },
            {
              "name": null,
              "type": "Optional[BaseException]"
            },
            {
              "name": null,
              "type": "Optional[TracebackType]"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "self.stop"
          ],
          "variables": [],
          "start_line": 100,
          "end_line": 106
        }
      ],
      "variables": [
        "console"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\rich\\style.py",
      "imports": [
        "import sys",
        "from functools import lru_cache",
        "from operator import attrgetter",
        "from pickle import dumps, loads",
        "from random import randint",
        "from typing import Any, Dict, Iterable, List, Optional, Type, Union, cast",
        "from . import errors",
        "from .color import Color, ColorParseError, ColorSystem, blend_rgb",
        "from .repr import Result, rich_repr",
        "from .terminal_theme import DEFAULT_TERMINAL_THEME, TerminalTheme"
      ],
      "classes": [
        {
          "name": "_Bit",
          "base_classes": null,
          "docstring": null,
          "methods": []
        },
        {
          "name": "Style",
          "base_classes": null,
          "docstring": null,
          "methods": []
        },
        {
          "name": "StyleStack",
          "base_classes": null,
          "docstring": null,
          "methods": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "int"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 26,
          "end_line": 27
        },
        {
          "name": "__get__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "\"Style\""
            },
            {
              "name": null,
              "type": "Type[\"Style\"]"
            }
          ],
          "return_type": "Optional[bool]",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 29,
          "end_line": 32
        },
        {
          "name": "__init__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "sum",
            "Color.parse",
            "isinstance",
            "hash",
            "randint",
            "dumps",
            "_make_color"
          ],
          "variables": [],
          "start_line": 127,
          "end_line": 201
        },
        {
          "name": "_make_color",
          "parameters": [
            {
              "name": null,
              "type": "Union[Color, str]"
            }
          ],
          "return_type": "Color",
          "docstring": null,
          "calls": [
            "isinstance",
            "Color.parse"
          ],
          "variables": [],
          "start_line": 151,
          "end_line": 152
        },
        {
          "name": "null",
          "parameters": [
            {
              "name": "cls",
              "type": null
            }
          ],
          "return_type": "\"Style\"",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 204,
          "end_line": 206
        },
        {
          "name": "from_color",
          "parameters": [
            {
              "name": "cls",
              "type": null
            }
          ],
          "return_type": "\"Style\"",
          "docstring": null,
          "calls": [
            "cls.__new__"
          ],
          "variables": [
            "style"
          ],
          "start_line": 209,
          "end_line": 230
        },
        {
          "name": "from_meta",
          "parameters": [
            {
              "name": "cls",
              "type": null
            },
            {
              "name": null,
              "type": "Optional[Dict[str, Any]]"
            }
          ],
          "return_type": "\"Style\"",
          "docstring": null,
          "calls": [
            "dumps",
            "cls.__new__",
            "hash",
            "randint"
          ],
          "variables": [
            "style"
          ],
          "start_line": 233,
          "end_line": 251
        },
        {
          "name": "on",
          "parameters": [
            {
              "name": "cls",
              "type": null
            },
            {
              "name": null,
              "type": "Any"
            }
          ],
          "return_type": "\"Style\"",
          "docstring": null,
          "calls": [
            "meta.update",
            "handlers.items",
            "cls.from_meta"
          ],
          "variables": [
            "meta"
          ],
          "start_line": 254,
          "end_line": 269
        },
        {
          "name": "link_id",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "str",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 286,
          "end_line": 288
        },
        {
          "name": "__str__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "str",
          "docstring": null,
          "calls": [
            "append",
            "\" \".join"
          ],
          "variables": [
            "attributes",
            "append",
            "bits"
          ],
          "start_line": 290,
          "end_line": 334
        },
        {
          "name": "__bool__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "bool",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 336,
          "end_line": 338
        },
        {
          "name": "_make_ansi_codes",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "ColorSystem"
            }
          ],
          "return_type": "str",
          "docstring": null,
          "calls": [
            "\";\".join",
            "self._color.downgrade(color_system).get_ansi_codes",
            "self._color.downgrade",
            "append",
            "range",
            "sgr.extend",
            "self._bgcolor.downgrade(color_system).get_ansi_codes",
            "self._bgcolor.downgrade"
          ],
          "variables": [
            "sgr",
            "append",
            "_style_map",
            "attributes"
          ],
          "start_line": 340,
          "end_line": 381
        },
        {
          "name": "normalize",
          "parameters": [
            {
              "name": "cls",
              "type": null
            },
            {
              "name": null,
              "type": "str"
            }
          ],
          "return_type": "str",
          "docstring": null,
          "calls": [
            "cls.parse",
            "style.strip().lower",
            "str",
            "style.strip"
          ],
          "variables": [],
          "start_line": 385,
          "end_line": 398
        },
        {
          "name": "pick_first",
          "parameters": [
            {
              "name": "cls",
              "type": null
            },
            {
              "name": null,
              "type": "Optional[StyleType]"
            }
          ],
          "return_type": "StyleType",
          "docstring": null,
          "calls": [
            "ValueError"
          ],
          "variables": [],
          "start_line": 401,
          "end_line": 406
        },
        {
          "name": "__rich_repr__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "Result",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 408,
          "end_line": 425
        },
        {
          "name": "__eq__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "Any"
            }
          ],
          "return_type": "bool",
          "docstring": null,
          "calls": [
            "self.__hash__",
            "isinstance",
            "other.__hash__"
          ],
          "variables": [],
          "start_line": 427,
          "end_line": 430
        },
        {
          "name": "__ne__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "Any"
            }
          ],
          "return_type": "bool",
          "docstring": null,
          "calls": [
            "self.__hash__",
            "isinstance",
            "other.__hash__"
          ],
          "variables": [],
          "start_line": 432,
          "end_line": 435
        },
        {
          "name": "__hash__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "int",
          "docstring": null,
          "calls": [
            "hash",
            "_hash_getter"
          ],
          "variables": [],
          "start_line": 437,
          "end_line": 441
        },
        {
          "name": "color",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "Optional[Color]",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 444,
          "end_line": 446
        },
        {
          "name": "bgcolor",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "Optional[Color]",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 449,
          "end_line": 451
        },
        {
          "name": "link",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "Optional[str]",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 454,
          "end_line": 456
        },
        {
          "name": "transparent_background",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "bool",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 459,
          "end_line": 461
        },
        {
          "name": "background_style",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "\"Style\"",
          "docstring": null,
          "calls": [
            "Style"
          ],
          "variables": [],
          "start_line": 464,
          "end_line": 466
        },
        {
          "name": "meta",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "Dict[str, Any]",
          "docstring": null,
          "calls": [
            "loads",
            "cast"
          ],
          "variables": [],
          "start_line": 469,
          "end_line": 471
        },
        {
          "name": "without_color",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "\"Style\"",
          "docstring": null,
          "calls": [
            "self.__new__",
            "randint"
          ],
          "variables": [
            "style"
          ],
          "start_line": 474,
          "end_line": 490
        },
        {
          "name": "parse",
          "parameters": [
            {
              "name": "cls",
              "type": null
            },
            {
              "name": null,
              "type": "str"
            }
          ],
          "return_type": "\"Style\"",
          "docstring": null,
          "calls": [
            "iter",
            "errors.StyleSyntaxError",
            "style_definition.strip",
            "Color.parse",
            "STYLE_ATTRIBUTES.get",
            "style_definition.split",
            "cls.null",
            "next",
            "original_word.lower",
            "Style"
          ],
          "variables": [
            "STYLE_ATTRIBUTES",
            "color",
            "bgcolor",
            "attributes",
            "link",
            "words",
            "word",
            "word",
            "bgcolor",
            "word",
            "attribute",
            "word",
            "link",
            "color",
            "style"
          ],
          "start_line": 494,
          "end_line": 557
        },
        {
          "name": "get_html_style",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "str",
          "docstring": null,
          "calls": [
            "bgcolor.get_truecolor",
            "color.get_truecolor",
            "append",
            "blend_rgb",
            "\"; \".join",
            "Color.from_triplet"
          ],
          "variables": [
            "theme",
            "css",
            "append",
            "color",
            "bgcolor",
            "foreground_color",
            "color",
            "theme_color",
            "theme_color"
          ],
          "start_line": 560,
          "end_line": 594
        },
        {
          "name": "combine",
          "parameters": [
            {
              "name": "cls",
              "type": null
            },
            {
              "name": null,
              "type": "Iterable[\"Style\"]"
            }
          ],
          "return_type": "\"Style\"",
          "docstring": null,
          "calls": [
            "iter",
            "sum",
            "next"
          ],
          "variables": [
            "iter_styles"
          ],
          "start_line": 597,
          "end_line": 607
        },
        {
          "name": "chain",
          "parameters": [
            {
              "name": "cls",
              "type": null
            },
            {
              "name": null,
              "type": "\"Style\""
            }
          ],
          "return_type": "\"Style\"",
          "docstring": null,
          "calls": [
            "iter",
            "sum",
            "next"
          ],
          "variables": [
            "iter_styles"
          ],
          "start_line": 610,
          "end_line": 620
        },
        {
          "name": "copy",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "\"Style\"",
          "docstring": null,
          "calls": [
            "self.__new__",
            "randint"
          ],
          "variables": [
            "style"
          ],
          "start_line": 622,
          "end_line": 642
        },
        {
          "name": "clear_meta_and_links",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "\"Style\"",
          "docstring": null,
          "calls": [
            "self.__new__"
          ],
          "variables": [
            "style"
          ],
          "start_line": 645,
          "end_line": 665
        },
        {
          "name": "update_link",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "\"Style\"",
          "docstring": null,
          "calls": [
            "self.__new__",
            "randint"
          ],
          "variables": [
            "style"
          ],
          "start_line": 667,
          "end_line": 688
        },
        {
          "name": "render",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "str",
          "docstring": null,
          "calls": [
            "self._make_ansi_codes"
          ],
          "variables": [
            "attrs",
            "rendered",
            "rendered"
          ],
          "start_line": 690,
          "end_line": 714
        },
        {
          "name": "test",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "sys.stdout.write",
            "str",
            "self.render"
          ],
          "variables": [
            "text"
          ],
          "start_line": 716,
          "end_line": 726
        },
        {
          "name": "_add",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "Optional[\"Style\"]"
            }
          ],
          "return_type": "\"Style\"",
          "docstring": null,
          "calls": [
            "dumps",
            "self.__new__"
          ],
          "variables": [
            "new_style"
          ],
          "start_line": 729,
          "end_line": 751
        },
        {
          "name": "__add__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "Optional[\"Style\"]"
            }
          ],
          "return_type": "\"Style\"",
          "docstring": null,
          "calls": [
            "combined_style.copy",
            "self._add"
          ],
          "variables": [
            "combined_style"
          ],
          "start_line": 753,
          "end_line": 755
        },
        {
          "name": "__init__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "\"Style\""
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 766,
          "end_line": 767
        },
        {
          "name": "__repr__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "str",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 769,
          "end_line": 770
        },
        {
          "name": "current",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "Style",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 773,
          "end_line": 775
        },
        {
          "name": "push",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "Style"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "self._stack.append"
          ],
          "variables": [],
          "start_line": 777,
          "end_line": 783
        },
        {
          "name": "pop",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "Style",
          "docstring": null,
          "calls": [
            "self._stack.pop"
          ],
          "variables": [],
          "start_line": 785,
          "end_line": 792
        }
      ],
      "variables": [
        "_hash_getter",
        "StyleType",
        "__slots__",
        "_color",
        "_bgcolor",
        "_attributes",
        "_set_attributes",
        "_hash",
        "_null",
        "_meta",
        "__slots__",
        "_style_map",
        "STYLE_ATTRIBUTES",
        "style",
        "style",
        "meta",
        "bold",
        "dim",
        "italic",
        "underline",
        "blink",
        "blink2",
        "reverse",
        "conceal",
        "strike",
        "underline2",
        "frame",
        "encircle",
        "overline",
        "attributes",
        "append",
        "bits",
        "sgr",
        "append",
        "_style_map",
        "attributes",
        "style",
        "STYLE_ATTRIBUTES",
        "color",
        "bgcolor",
        "attributes",
        "link",
        "words",
        "word",
        "word",
        "bgcolor",
        "word",
        "attribute",
        "word",
        "link",
        "color",
        "style",
        "theme",
        "css",
        "append",
        "color",
        "bgcolor",
        "foreground_color",
        "color",
        "theme_color",
        "theme_color",
        "iter_styles",
        "iter_styles",
        "style",
        "style",
        "style",
        "attrs",
        "rendered",
        "rendered",
        "text",
        "new_style",
        "combined_style",
        "NULL_STYLE",
        "__slots__"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\rich\\styled.py",
      "imports": [
        "from typing import TYPE_CHECKING",
        "from .measure import Measurement",
        "from .segment import Segment",
        "from .style import StyleType",
        "from .console import Console, ConsoleOptions, RenderResult, RenderableType",
        "from rich import print",
        "from rich.panel import Panel"
      ],
      "classes": [
        {
          "name": "Styled",
          "base_classes": null,
          "docstring": null,
          "methods": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "\"RenderableType\""
            },
            {
              "name": null,
              "type": "\"StyleType\""
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 19,
          "end_line": 21
        },
        {
          "name": "__rich_console__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "\"Console\""
            },
            {
              "name": null,
              "type": "\"ConsoleOptions\""
            }
          ],
          "return_type": "\"RenderResult\"",
          "docstring": null,
          "calls": [
            "Segment.apply_style",
            "console.render",
            "console.get_style"
          ],
          "variables": [
            "style",
            "rendered_segments",
            "segments"
          ],
          "start_line": 23,
          "end_line": 29
        },
        {
          "name": "__rich_measure__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "\"Console\""
            },
            {
              "name": null,
              "type": "\"ConsoleOptions\""
            }
          ],
          "return_type": "Measurement",
          "docstring": null,
          "calls": [
            "Measurement.get"
          ],
          "variables": [],
          "start_line": 31,
          "end_line": 34
        }
      ],
      "variables": [
        "style",
        "rendered_segments",
        "segments",
        "panel"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\rich\\syntax.py",
      "imports": [
        "import os.path",
        "import re",
        "import sys",
        "import textwrap",
        "from abc import ABC, abstractmethod",
        "from pathlib import Path",
        "from typing import (\n    Any,\n    Dict,\n    Iterable,\n    List,\n    NamedTuple,\n    Optional,\n    Sequence,\n    Set,\n    Tuple,\n    Type,\n    Union,\n)",
        "from pygments.lexer import Lexer",
        "from pygments.lexers import get_lexer_by_name, guess_lexer_for_filename",
        "from pygments.style import Style as PygmentsStyle",
        "from pygments.styles import get_style_by_name",
        "from pygments.token import (\n    Comment,\n    Error,\n    Generic,\n    Keyword,\n    Name,\n    Number,\n    Operator,\n    String,\n    Token,\n    Whitespace,\n)",
        "from pygments.util import ClassNotFound",
        "from rich.containers import Lines",
        "from rich.padding import Padding, PaddingDimensions",
        "from ._loop import loop_first",
        "from .cells import cell_len",
        "from .color import Color, blend_rgb",
        "from .console import Console, ConsoleOptions, JustifyMethod, RenderResult",
        "from .jupyter import JupyterMixin",
        "from .measure import Measurement",
        "from .segment import Segment, Segments",
        "from .style import Style, StyleType",
        "from .text import Text",
        "import argparse",
        "import sys",
        "from rich.console import Console"
      ],
      "classes": [
        {
          "name": "SyntaxTheme",
          "base_classes": "(ABC)",
          "docstring": null,
          "methods": []
        },
        {
          "name": "PygmentsSyntaxTheme",
          "base_classes": "(SyntaxTheme)",
          "docstring": null,
          "methods": []
        },
        {
          "name": "ANSISyntaxTheme",
          "base_classes": "(SyntaxTheme)",
          "docstring": null,
          "methods": []
        },
        {
          "name": "_SyntaxHighlightRange",
          "base_classes": "(NamedTuple)",
          "docstring": null,
          "methods": []
        },
        {
          "name": "PaddingProperty",
          "base_classes": null,
          "docstring": null,
          "methods": []
        },
        {
          "name": "Syntax",
          "base_classes": "(JupyterMixin)",
          "docstring": null,
          "methods": []
        }
      ],
      "functions": [
        {
          "name": "get_style_for_token",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "TokenType"
            }
          ],
          "return_type": "Style",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 128,
          "end_line": 130
        },
        {
          "name": "get_background_style",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "Style",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 133,
          "end_line": 135
        },
        {
          "name": "__init__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "Union[str, Type[PygmentsStyle]]"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "get_style_by_name",
            "isinstance",
            "Style"
          ],
          "variables": [],
          "start_line": 141,
          "end_line": 152
        },
        {
          "name": "get_style_for_token",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "TokenType"
            }
          ],
          "return_type": "Style",
          "docstring": null,
          "calls": [
            "Style",
            "self._pygments_style_class.style_for_token",
            "Style.null"
          ],
          "variables": [
            "pygments_style",
            "style",
            "color",
            "bgcolor",
            "style"
          ],
          "start_line": 154,
          "end_line": 174
        },
        {
          "name": "get_background_style",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "Style",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 176,
          "end_line": 177
        },
        {
          "name": "__init__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "Dict[TokenType, Style]"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "Style.null"
          ],
          "variables": [],
          "start_line": 183,
          "end_line": 187
        },
        {
          "name": "get_style_for_token",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "TokenType"
            }
          ],
          "return_type": "Style",
          "docstring": null,
          "calls": [
            "get_style",
            "tuple"
          ],
          "variables": [
            "get_style",
            "token",
            "style",
            "_style",
            "style",
            "token"
          ],
          "start_line": 189,
          "end_line": 207
        },
        {
          "name": "get_background_style",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "Style",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 209,
          "end_line": 210
        },
        {
          "name": "__get__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "Syntax"
            },
            {
              "name": null,
              "type": "Type[Syntax]"
            }
          ],
          "return_type": "Tuple[int, int, int, int]",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 232,
          "end_line": 234
        },
        {
          "name": "__set__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "Syntax"
            },
            {
              "name": null,
              "type": "PaddingDimensions"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "Padding.unpack"
          ],
          "variables": [],
          "start_line": 236,
          "end_line": 237
        },
        {
          "name": "get_theme",
          "parameters": [
            {
              "name": "cls",
              "type": null
            },
            {
              "name": null,
              "type": "Union[str, SyntaxTheme]"
            }
          ],
          "return_type": "SyntaxTheme",
          "docstring": null,
          "calls": [
            "PygmentsSyntaxTheme",
            "isinstance",
            "ANSISyntaxTheme"
          ],
          "variables": [
            "theme",
            "theme",
            "theme"
          ],
          "start_line": 265,
          "end_line": 274
        },
        {
          "name": "__init__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "str"
            },
            {
              "name": null,
              "type": "Union[Lexer, str]"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "Padding.unpack",
            "set",
            "self.get_theme",
            "Style"
          ],
          "variables": [],
          "start_line": 276,
          "end_line": 312
        },
        {
          "name": "from_path",
          "parameters": [
            {
              "name": "cls",
              "type": null
            },
            {
              "name": null,
              "type": "str"
            }
          ],
          "return_type": "\"Syntax\"",
          "docstring": null,
          "calls": [
            "cls.guess_lexer",
            "Path(path).read_text",
            "cls",
            "Path"
          ],
          "variables": [
            "code",
            "lexer"
          ],
          "start_line": 317,
          "end_line": 377
        },
        {
          "name": "guess_lexer",
          "parameters": [
            {
              "name": "cls",
              "type": null
            },
            {
              "name": null,
              "type": "str"
            }
          ],
          "return_type": "str",
          "docstring": null,
          "calls": [
            "ext.lstrip",
            "os.path.splitext",
            "get_lexer_by_name",
            "guess_lexer_for_filename",
            "ext.lstrip(\".\").lower"
          ],
          "variables": [
            "lexer",
            "lexer_name",
            "lexer",
            "extension",
            "lexer",
            "lexer_name",
            "lexer_name"
          ],
          "start_line": 380,
          "end_line": 419
        },
        {
          "name": "_get_base_style",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "Style",
          "docstring": null,
          "calls": [
            "self._theme.get_background_style"
          ],
          "variables": [
            "default_style"
          ],
          "start_line": 421,
          "end_line": 424
        },
        {
          "name": "_get_token_color",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "TokenType"
            }
          ],
          "return_type": "Optional[Color]",
          "docstring": null,
          "calls": [
            "self._theme.get_style_for_token"
          ],
          "variables": [
            "style"
          ],
          "start_line": 426,
          "end_line": 436
        },
        {
          "name": "lexer",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "Optional[Lexer]",
          "docstring": null,
          "calls": [
            "isinstance",
            "get_lexer_by_name"
          ],
          "variables": [],
          "start_line": 439,
          "end_line": 455
        },
        {
          "name": "default_lexer",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "Lexer",
          "docstring": null,
          "calls": [
            "get_lexer_by_name"
          ],
          "variables": [],
          "start_line": 458,
          "end_line": 465
        },
        {
          "name": "highlight",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "str"
            }
          ],
          "return_type": "Text",
          "docstring": null,
          "calls": [
            "lexer.get_tokens",
            "text.append",
            "_get_theme_style",
            "iter",
            "token.endswith",
            "tokens_to_spans",
            "line_tokenize",
            "text.stylize",
            "self._get_base_style",
            "self._apply_stylized_ranges",
            "Text",
            "next",
            "text.append_tokens",
            "token.partition"
          ],
          "variables": [
            "base_style",
            "justify",
            "text",
            "_get_theme_style",
            "lexer",
            "tokens",
            "line_no",
            "_line_start"
          ],
          "start_line": 467,
          "end_line": 550
        },
        {
          "name": "line_tokenize",
          "parameters": [],
          "return_type": "Iterable[Tuple[Any, str]]",
          "docstring": null,
          "calls": [
            "lexer.get_tokens",
            "token.partition"
          ],
          "variables": [],
          "start_line": 505,
          "end_line": 512
        },
        {
          "name": "tokens_to_spans",
          "parameters": [],
          "return_type": "Iterable[Tuple[str, Optional[Style]]]",
          "docstring": null,
          "calls": [
            "_get_theme_style",
            "iter",
            "token.endswith",
            "line_tokenize",
            "next"
          ],
          "variables": [
            "tokens",
            "line_no",
            "_line_start"
          ],
          "start_line": 514,
          "end_line": 535
        },
        {
          "name": "stylize_range",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "StyleType"
            },
            {
              "name": null,
              "type": "SyntaxPosition"
            },
            {
              "name": null,
              "type": "SyntaxPosition"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "self._stylized_ranges.append",
            "_SyntaxHighlightRange"
          ],
          "variables": [],
          "start_line": 552,
          "end_line": 571
        },
        {
          "name": "_get_line_numbers_color",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "Color",
          "docstring": null,
          "calls": [
            "Color.from_triplet",
            "foreground_color.get_truecolor",
            "self._get_token_color",
            "blend_rgb",
            "Color.default",
            "background_color.get_truecolor",
            "self._theme.get_background_style"
          ],
          "variables": [
            "background_style",
            "background_color",
            "foreground_color",
            "new_color"
          ],
          "start_line": 573,
          "end_line": 586
        },
        {
          "name": "_numbers_column_width",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "int",
          "docstring": null,
          "calls": [
            "len",
            "str",
            "self.code.count"
          ],
          "variables": [
            "column_width",
            "column_width"
          ],
          "start_line": 589,
          "end_line": 597
        },
        {
          "name": "_get_number_styles",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "Console"
            }
          ],
          "return_type": "Tuple[Style, Style, Style]",
          "docstring": null,
          "calls": [
            "Style.null",
            "self._get_line_numbers_color",
            "self._get_base_style",
            "Style.chain",
            "Style",
            "self._theme.get_style_for_token"
          ],
          "variables": [
            "background_style",
            "number_style",
            "highlight_number_style",
            "number_style",
            "highlight_number_style"
          ],
          "start_line": 599,
          "end_line": 620
        },
        {
          "name": "__rich_measure__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "\"Console\""
            },
            {
              "name": null,
              "type": "\"ConsoleOptions\""
            }
          ],
          "return_type": "\"Measurement\"",
          "docstring": null,
          "calls": [
            "Measurement",
            "self.code.splitlines",
            "max",
            "cell_len"
          ],
          "variables": [
            "padding",
            "width",
            "lines",
            "width"
          ],
          "start_line": 622,
          "end_line": 638
        },
        {
          "name": "__rich_console__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "Console"
            },
            {
              "name": null,
              "type": "ConsoleOptions"
            }
          ],
          "return_type": "RenderResult",
          "docstring": null,
          "calls": [
            "Padding",
            "self._get_syntax",
            "self._get_base_style",
            "any",
            "Segments"
          ],
          "variables": [
            "segments"
          ],
          "start_line": 640,
          "end_line": 647
        },
        {
          "name": "_get_syntax",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "Console"
            },
            {
              "name": null,
              "type": "ConsoleOptions"
            }
          ],
          "return_type": "Iterable[Segment]",
          "docstring": null,
          "calls": [
            "_Segment",
            "max",
            "console.render",
            "Text",
            "text.split",
            "Style",
            "Text(\"\\n\")\n                .join",
            "self.highlight",
            "console.render_lines",
            "self._theme.get_style_for_token",
            "line.render",
            "str",
            "text.remove_suffix",
            "list",
            "str(line_no).rjust",
            "render_options.update",
            "enumerate",
            "options.update",
            "Text(\"\\n\")\n                .join(lines)\n                .with_indent_guides",
            "text.with_indent_guides",
            "Text(\"\\n\")\n                .join(lines)\n                .with_indent_guides(self.tab_size, style=style + Style(italic=False))\n                .split",
            "len",
            "_Segment.adjust_line_length",
            "self._get_base_style",
            "loop_first",
            "self._process_code",
            "highlight_line",
            "self._get_number_styles"
          ],
          "variables": [
            "transparent_background",
            "horizontal_padding",
            "code_width",
            "code_width",
            "text",
            "style",
            "text",
            "syntax_lines",
            "line_offset",
            "line_offset",
            "lines",
            "lines",
            "style",
            "lines",
            "numbers_column_width",
            "render_options",
            "highlight_line",
            "_Segment",
            "new_line",
            "line_pointer",
            "wrapped_lines",
            "segments",
            "wrapped_lines",
            "wrapped_lines",
            "wrapped_line_left_pad",
            "line_column"
          ],
          "start_line": 649,
          "end_line": 785
        },
        {
          "name": "_apply_stylized_ranges",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "Text"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "len",
            "text.stylize_before",
            "text.stylize",
            "_get_code_index_for_syntax_position",
            "match.start",
            "re.finditer"
          ],
          "variables": [
            "code",
            "newlines_offsets",
            "start",
            "end"
          ],
          "start_line": 787,
          "end_line": 818
        },
        {
          "name": "_process_code",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "str"
            }
          ],
          "return_type": "Tuple[bool, str]",
          "docstring": null,
          "calls": [
            "code.endswith",
            "textwrap.dedent",
            "processed_code.expandtabs"
          ],
          "variables": [
            "ends_on_nl",
            "processed_code",
            "processed_code",
            "processed_code"
          ],
          "start_line": 820,
          "end_line": 838
        },
        {
          "name": "_get_code_index_for_syntax_position",
          "parameters": [
            {
              "name": null,
              "type": "Sequence[int]"
            },
            {
              "name": null,
              "type": "SyntaxPosition"
            }
          ],
          "return_type": "Optional[int]",
          "docstring": null,
          "calls": [
            "len",
            "min"
          ],
          "variables": [
            "lines_count",
            "line_index",
            "line_length",
            "column_index"
          ],
          "start_line": 841,
          "end_line": 865
        }
      ],
      "variables": [
        "TokenType",
        "WINDOWS",
        "DEFAULT_THEME",
        "ANSI_LIGHT",
        "ANSI_DARK",
        "RICH_SYNTAX_THEMES",
        "NUMBERS_COLUMN_DEFAULT_PADDING",
        "pygments_style",
        "style",
        "color",
        "bgcolor",
        "style",
        "get_style",
        "token",
        "style",
        "_style",
        "style",
        "token",
        "SyntaxPosition",
        "style",
        "start",
        "end",
        "style_before",
        "_pygments_style_class",
        "_theme",
        "theme",
        "theme",
        "theme",
        "padding",
        "code",
        "lexer",
        "lexer",
        "lexer_name",
        "lexer",
        "extension",
        "lexer",
        "lexer_name",
        "lexer_name",
        "default_style",
        "style",
        "base_style",
        "justify",
        "text",
        "_get_theme_style",
        "lexer",
        "tokens",
        "line_no",
        "_line_start",
        "background_style",
        "background_color",
        "foreground_color",
        "new_color",
        "column_width",
        "column_width",
        "background_style",
        "number_style",
        "highlight_number_style",
        "number_style",
        "highlight_number_style",
        "padding",
        "width",
        "lines",
        "width",
        "segments",
        "transparent_background",
        "horizontal_padding",
        "code_width",
        "code_width",
        "text",
        "style",
        "text",
        "syntax_lines",
        "line_offset",
        "line_offset",
        "lines",
        "lines",
        "style",
        "lines",
        "numbers_column_width",
        "render_options",
        "highlight_line",
        "_Segment",
        "new_line",
        "line_pointer",
        "wrapped_lines",
        "segments",
        "wrapped_lines",
        "wrapped_lines",
        "wrapped_line_left_pad",
        "line_column",
        "code",
        "newlines_offsets",
        "start",
        "end",
        "ends_on_nl",
        "processed_code",
        "processed_code",
        "processed_code",
        "lines_count",
        "line_index",
        "line_length",
        "column_index",
        "parser",
        "args",
        "console",
        "code",
        "syntax",
        "syntax"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\rich\\table.py",
      "imports": [
        "from dataclasses import dataclass, field, replace",
        "from typing import (\n    TYPE_CHECKING,\n    Dict,\n    Iterable,\n    List,\n    NamedTuple,\n    Optional,\n    Sequence,\n    Tuple,\n    Union,\n)",
        "from . import box, errors",
        "from ._loop import loop_first_last, loop_last",
        "from ._pick import pick_bool",
        "from ._ratio import ratio_distribute, ratio_reduce",
        "from .align import VerticalAlignMethod",
        "from .jupyter import JupyterMixin",
        "from .measure import Measurement",
        "from .padding import Padding, PaddingDimensions",
        "from .protocol import is_renderable",
        "from .segment import Segment",
        "from .style import Style, StyleType",
        "from .text import Text, TextType",
        "from .console import (\n        Console,\n        ConsoleOptions,\n        JustifyMethod,\n        OverflowMethod,\n        RenderableType,\n        RenderResult,\n    )",
        "from rich.console import Console",
        "from rich.highlighter import ReprHighlighter",
        "from ._timer import timer"
      ],
      "classes": [
        {
          "name": "Column",
          "base_classes": null,
          "docstring": null,
          "methods": []
        },
        {
          "name": "Row",
          "base_classes": null,
          "docstring": null,
          "methods": []
        },
        {
          "name": "_Cell",
          "base_classes": "(NamedTuple)",
          "docstring": null,
          "methods": []
        },
        {
          "name": "Table",
          "base_classes": "(JupyterMixin)",
          "docstring": null,
          "methods": []
        }
      ],
      "functions": [
        {
          "name": "copy",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "\"Column\"",
          "docstring": null,
          "calls": [
            "replace"
          ],
          "variables": [],
          "start_line": 117,
          "end_line": 119
        },
        {
          "name": "cells",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "Iterable[\"RenderableType\"]",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 122,
          "end_line": 124
        },
        {
          "name": "flexible",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "bool",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 127,
          "end_line": 129
        },
        {
          "name": "__init__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "Union[Column, str]"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "len",
            "Padding.unpack",
            "self.add_column",
            "append_column",
            "list",
            "isinstance"
          ],
          "variables": [
            "append_column"
          ],
          "start_line": 189,
          "end_line": 251
        },
        {
          "name": "grid",
          "parameters": [
            {
              "name": "cls",
              "type": null
            },
            {
              "name": null,
              "type": "Union[Column, str]"
            }
          ],
          "return_type": "\"Table\"",
          "docstring": null,
          "calls": [
            "cls"
          ],
          "variables": [],
          "start_line": 254,
          "end_line": 284
        },
        {
          "name": "expand",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "bool",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 287,
          "end_line": 289
        },
        {
          "name": "expand",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "bool"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 292,
          "end_line": 294
        },
        {
          "name": "_extra_width",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "int",
          "docstring": null,
          "calls": [
            "len"
          ],
          "variables": [
            "width"
          ],
          "start_line": 297,
          "end_line": 304
        },
        {
          "name": "row_count",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "int",
          "docstring": null,
          "calls": [
            "len"
          ],
          "variables": [],
          "start_line": 307,
          "end_line": 309
        },
        {
          "name": "get_row_style",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "\"Console\""
            },
            {
              "name": null,
              "type": "int"
            }
          ],
          "return_type": "StyleType",
          "docstring": null,
          "calls": [
            "len",
            "console.get_style",
            "Style.null"
          ],
          "variables": [
            "style",
            "row_style"
          ],
          "start_line": 311,
          "end_line": 319
        },
        {
          "name": "__rich_measure__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "\"Console\""
            },
            {
              "name": null,
              "type": "\"ConsoleOptions\""
            }
          ],
          "return_type": "Measurement",
          "docstring": null,
          "calls": [
            "options.update_width",
            "Measurement",
            "sum",
            "self._calculate_column_widths",
            "measurement.clamp",
            "_measure_column"
          ],
          "variables": [
            "max_width",
            "max_width",
            "extra_width",
            "max_width",
            "_measure_column",
            "measurements",
            "minimum_width",
            "maximum_width",
            "measurement",
            "measurement"
          ],
          "start_line": 321,
          "end_line": 352
        },
        {
          "name": "padding",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "Tuple[int, int, int, int]",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 355,
          "end_line": 357
        },
        {
          "name": "padding",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "PaddingDimensions"
            }
          ],
          "return_type": "\"Table\"",
          "docstring": null,
          "calls": [
            "Padding.unpack"
          ],
          "variables": [],
          "start_line": 360,
          "end_line": 363
        },
        {
          "name": "add_column",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "len",
            "self.columns.append",
            "Column"
          ],
          "variables": [
            "column"
          ],
          "start_line": 365,
          "end_line": 421
        },
        {
          "name": "add_row",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "Optional[\"RenderableType\"]"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "len",
            "enumerate",
            "is_renderable",
            "self.rows.append",
            "add_cell",
            "errors.NotRenderableError",
            "type",
            "column._cells.append",
            "list",
            "Text",
            "Column",
            "Row",
            "self.columns.append"
          ],
          "variables": [
            "cell_renderables",
            "columns",
            "cell_renderables",
            "column",
            "column"
          ],
          "start_line": 423,
          "end_line": 468
        },
        {
          "name": "add_cell",
          "parameters": [
            {
              "name": null,
              "type": "Column"
            },
            {
              "name": null,
              "type": "\"RenderableType\""
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "column._cells.append"
          ],
          "variables": [],
          "start_line": 441,
          "end_line": 442
        },
        {
          "name": "add_section",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 470,
          "end_line": 474
        },
        {
          "name": "__rich_console__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "\"Console\""
            },
            {
              "name": null,
              "type": "\"ConsoleOptions\""
            }
          ],
          "return_type": "\"RenderResult\"",
          "docstring": null,
          "calls": [
            "console.render_str",
            "Style.pick_first",
            "options.update_width",
            "sum",
            "self._calculate_column_widths",
            "render_annotation",
            "self._render",
            "isinstance",
            "Segment",
            "options.update",
            "console.render",
            "render_options.update"
          ],
          "variables": [
            "max_width",
            "max_width",
            "extra_width",
            "widths",
            "table_width",
            "render_options",
            "render_text"
          ],
          "start_line": 476,
          "end_line": 521
        },
        {
          "name": "render_annotation",
          "parameters": [
            {
              "name": null,
              "type": "TextType"
            },
            {
              "name": null,
              "type": "StyleType"
            }
          ],
          "return_type": "\"RenderResult\"",
          "docstring": null,
          "calls": [
            "console.render_str",
            "isinstance",
            "console.render",
            "render_options.update"
          ],
          "variables": [
            "render_text"
          ],
          "start_line": 497,
          "end_line": 507
        },
        {
          "name": "_calculate_column_widths",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "\"Console\""
            },
            {
              "name": null,
              "type": "\"ConsoleOptions\""
            }
          ],
          "return_type": "List[int]",
          "docstring": null,
          "calls": [
            "len",
            "enumerate",
            "iter",
            "self._measure_column",
            "sum",
            "options.update_width",
            "zip",
            "any",
            "ratio_reduce",
            "self._collapse_widths",
            "min",
            "next",
            "ratio_distribute",
            "get_padding_width"
          ],
          "variables": [
            "max_width",
            "columns",
            "width_ranges",
            "widths",
            "get_padding_width",
            "extra_width",
            "ratios",
            "fixed_widths",
            "flex_minimum",
            "flexible_width",
            "flex_widths",
            "iter_flex_widths",
            "table_width",
            "widths",
            "table_width",
            "excess_width",
            "widths",
            "table_width",
            "width_ranges",
            "widths",
            "_max_width",
            "pad_widths",
            "widths"
          ],
          "start_line": 523,
          "end_line": 585
        },
        {
          "name": "_collapse_widths",
          "parameters": [
            {
              "name": "cls",
              "type": null
            },
            {
              "name": null,
              "type": "List[int]"
            },
            {
              "name": null,
              "type": "List[bool]"
            },
            {
              "name": null,
              "type": "int"
            }
          ],
          "return_type": "List[int]",
          "docstring": null,
          "calls": [
            "len",
            "sum",
            "zip",
            "max",
            "any",
            "ratio_reduce",
            "min"
          ],
          "variables": [
            "total_width",
            "excess_width",
            "max_column",
            "second_max_column",
            "column_difference",
            "ratios",
            "max_reduce",
            "widths",
            "total_width",
            "excess_width"
          ],
          "start_line": 588,
          "end_line": 624
        },
        {
          "name": "_get_cells",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "\"Console\""
            },
            {
              "name": null,
              "type": "int"
            },
            {
              "name": null,
              "type": "Column"
            }
          ],
          "return_type": "Iterable[_Cell]",
          "docstring": null,
          "calls": [
            "len",
            "getattr",
            "_padding_cache.get",
            "_Padding",
            "loop_first_last",
            "_append",
            "_Cell",
            "get_padding",
            "max",
            "any",
            "get_style"
          ],
          "variables": [
            "collapse_padding",
            "pad_edge",
            "padding",
            "any_padding",
            "first_column",
            "last_column",
            "_padding_cache",
            "cached",
            "left",
            "bottom",
            "left",
            "right",
            "top",
            "bottom",
            "_padding",
            "raw_cells",
            "_append",
            "get_style",
            "header_style",
            "cell_style",
            "footer_style",
            "_Padding"
          ],
          "start_line": 626,
          "end_line": 697
        },
        {
          "name": "get_padding",
          "parameters": [
            {
              "name": null,
              "type": "bool"
            },
            {
              "name": null,
              "type": "bool"
            }
          ],
          "return_type": "Tuple[int, int, int, int]",
          "docstring": null,
          "calls": [
            "_padding_cache.get",
            "max"
          ],
          "variables": [
            "cached",
            "left",
            "bottom",
            "left",
            "right",
            "top",
            "bottom",
            "_padding"
          ],
          "start_line": 641,
          "end_line": 664
        },
        {
          "name": "_get_padding_width",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "int"
            }
          ],
          "return_type": "int",
          "docstring": null,
          "calls": [
            "max"
          ],
          "variables": [
            "pad_left"
          ],
          "start_line": 699,
          "end_line": 705
        },
        {
          "name": "_measure_column",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "\"Console\""
            },
            {
              "name": null,
              "type": "\"ConsoleOptions\""
            },
            {
              "name": null,
              "type": "Column"
            }
          ],
          "return_type": "Measurement",
          "docstring": null,
          "calls": [
            "get_render_width",
            "Measurement",
            "self._get_padding_width",
            "Measurement(\n                column.width + padding_width, column.width + padding_width\n            ).with_maximum",
            "self._get_cells",
            "Measurement(\n            max(min_widths) if min_widths else 1,\n            max(max_widths) if max_widths else max_width,\n        ).with_maximum",
            "max",
            "measurement.clamp",
            "append_min",
            "append_max"
          ],
          "variables": [
            "max_width",
            "padding_width",
            "min_widths",
            "max_widths",
            "append_min",
            "append_max",
            "get_render_width",
            "measurement",
            "measurement"
          ],
          "start_line": 707,
          "end_line": 745
        },
        {
          "name": "_render",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "\"Console\""
            },
            {
              "name": null,
              "type": "\"ConsoleOptions\""
            },
            {
              "name": null,
              "type": "List[int]"
            }
          ],
          "return_type": "\"RenderResult\"",
          "docstring": null,
          "calls": [
            "_Segment",
            "Style.null",
            "zip",
            "_Segment.align_top",
            "max",
            "Segment.line",
            "get_style",
            "_divider.text.strip",
            "console.render_lines",
            "list",
            "range",
            "pick_bool",
            "enumerate",
            "_Segment.align_middle",
            "console.get_style",
            "loop_first_last",
            "_box.get_top",
            "_box.get_row",
            "options.update",
            "_box.get_bottom",
            "align_cell",
            "len",
            "cells.append",
            "self._get_cells",
            "self.box.substitute",
            "loop_last",
            "get_row_style",
            "_Segment.set_shape",
            "_box.get_plain_headed_box",
            "_Segment.align_bottom"
          ],
          "variables": [
            "table_style",
            "border_style",
            "_column_cells",
            "row_cells",
            "_box",
            "_box",
            "new_line",
            "columns",
            "show_header",
            "show_footer",
            "show_edge",
            "show_lines",
            "leading",
            "_Segment",
            "box_segments",
            "box_segments",
            "get_row_style",
            "get_style",
            "header_row",
            "footer_row",
            "row",
            "max_height",
            "cells",
            "row_style",
            "row_style",
            "render_options",
            "lines",
            "max_height",
            "row_height",
            "vertical",
            "vertical",
            "divider",
            "end_section"
          ],
          "start_line": 747,
          "end_line": 926
        },
        {
          "name": "align_cell",
          "parameters": [
            {
              "name": null,
              "type": "List[List[Segment]]"
            },
            {
              "name": null,
              "type": "\"VerticalAlignMethod\""
            },
            {
              "name": null,
              "type": "int"
            },
            {
              "name": null,
              "type": "Style"
            }
          ],
          "return_type": "List[List[Segment]]",
          "docstring": null,
          "calls": [
            "_Segment.align_top",
            "_Segment.align_middle",
            "_Segment.align_bottom"
          ],
          "variables": [
            "vertical",
            "vertical"
          ],
          "start_line": 839,
          "end_line": 854
        },
        {
          "name": "header",
          "parameters": [
            {
              "name": null,
              "type": "str"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "console.rule",
            "highlight",
            "console.print"
          ],
          "variables": [],
          "start_line": 967,
          "end_line": 970
        }
      ],
      "variables": [
        "header",
        "footer",
        "header_style",
        "footer_style",
        "style",
        "justify",
        "vertical",
        "overflow",
        "width",
        "min_width",
        "max_width",
        "ratio",
        "no_wrap",
        "highlight",
        "_index",
        "_cells",
        "style",
        "end_section",
        "style",
        "renderable",
        "vertical",
        "columns",
        "rows",
        "append_column",
        "width",
        "style",
        "row_style",
        "max_width",
        "max_width",
        "extra_width",
        "max_width",
        "_measure_column",
        "measurements",
        "minimum_width",
        "maximum_width",
        "measurement",
        "measurement",
        "column",
        "cell_renderables",
        "columns",
        "cell_renderables",
        "column",
        "column",
        "max_width",
        "max_width",
        "extra_width",
        "widths",
        "table_width",
        "render_options",
        "render_text",
        "max_width",
        "columns",
        "width_ranges",
        "widths",
        "get_padding_width",
        "extra_width",
        "ratios",
        "fixed_widths",
        "flex_minimum",
        "flexible_width",
        "flex_widths",
        "iter_flex_widths",
        "table_width",
        "widths",
        "table_width",
        "excess_width",
        "widths",
        "table_width",
        "width_ranges",
        "widths",
        "_max_width",
        "pad_widths",
        "widths",
        "total_width",
        "excess_width",
        "max_column",
        "second_max_column",
        "column_difference",
        "ratios",
        "max_reduce",
        "widths",
        "total_width",
        "excess_width",
        "collapse_padding",
        "pad_edge",
        "padding",
        "any_padding",
        "first_column",
        "last_column",
        "_padding_cache",
        "cached",
        "left",
        "bottom",
        "left",
        "right",
        "top",
        "bottom",
        "_padding",
        "raw_cells",
        "_append",
        "get_style",
        "header_style",
        "cell_style",
        "footer_style",
        "_Padding",
        "pad_left",
        "max_width",
        "padding_width",
        "min_widths",
        "max_widths",
        "append_min",
        "append_max",
        "get_render_width",
        "measurement",
        "measurement",
        "table_style",
        "border_style",
        "_column_cells",
        "row_cells",
        "_box",
        "_box",
        "new_line",
        "columns",
        "show_header",
        "show_footer",
        "show_edge",
        "show_lines",
        "leading",
        "_Segment",
        "box_segments",
        "box_segments",
        "get_row_style",
        "get_style",
        "header_row",
        "footer_row",
        "row",
        "max_height",
        "cells",
        "row_style",
        "row_style",
        "render_options",
        "lines",
        "max_height",
        "row_height",
        "vertical",
        "vertical",
        "divider",
        "end_section",
        "table",
        "console",
        "highlight"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\rich\\terminal_theme.py",
      "imports": [
        "from typing import List, Optional, Tuple",
        "from .color_triplet import ColorTriplet",
        "from .palette import Palette"
      ],
      "classes": [
        {
          "name": "TerminalTheme",
          "base_classes": null,
          "docstring": null,
          "methods": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "_ColorTuple"
            },
            {
              "name": null,
              "type": "_ColorTuple"
            },
            {
              "name": null,
              "type": "List[_ColorTuple]"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "Palette",
            "ColorTriplet"
          ],
          "variables": [],
          "start_line": 20,
          "end_line": 29
        }
      ],
      "variables": [
        "_ColorTuple",
        "DEFAULT_TERMINAL_THEME",
        "MONOKAI",
        "DIMMED_MONOKAI",
        "NIGHT_OWLISH",
        "SVG_EXPORT_THEME"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\rich\\text.py",
      "imports": [
        "import re",
        "from functools import partial, reduce",
        "from math import gcd",
        "from operator import itemgetter",
        "from typing import (\n    TYPE_CHECKING,\n    Any,\n    Callable,\n    Dict,\n    Iterable,\n    List,\n    NamedTuple,\n    Optional,\n    Pattern,\n    Tuple,\n    Union,\n)",
        "from ._loop import loop_last",
        "from ._pick import pick_bool",
        "from ._wrap import divide_line",
        "from .align import AlignMethod",
        "from .cells import cell_len, set_cell_size",
        "from .containers import Lines",
        "from .control import strip_control_codes",
        "from .emoji import EmojiVariant",
        "from .jupyter import JupyterMixin",
        "from .measure import Measurement",
        "from .segment import Segment",
        "from .style import Style, StyleType",
        "from .console import Console, ConsoleOptions, JustifyMethod, OverflowMethod",
        "from .markup import escape",
        "from .markup import render",
        "from .ansi import AnsiDecoder",
        "from rich.console import Console"
      ],
      "classes": [
        {
          "name": "Span",
          "base_classes": "(NamedTuple)",
          "docstring": null,
          "methods": []
        },
        {
          "name": "Text",
          "base_classes": "(JupyterMixin)",
          "docstring": null,
          "methods": []
        }
      ],
      "functions": [
        {
          "name": "__repr__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "str",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 57,
          "end_line": 58
        },
        {
          "name": "__bool__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "bool",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 60,
          "end_line": 61
        },
        {
          "name": "split",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "int"
            }
          ],
          "return_type": "Tuple[\"Span\", Optional[\"Span\"]]",
          "docstring": null,
          "calls": [
            "Span",
            "min"
          ],
          "variables": [
            "span1",
            "span2"
          ],
          "start_line": 63,
          "end_line": 74
        },
        {
          "name": "move",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "int"
            }
          ],
          "return_type": "\"Span\"",
          "docstring": null,
          "calls": [
            "Span"
          ],
          "variables": [],
          "start_line": 76,
          "end_line": 86
        },
        {
          "name": "right_crop",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "int"
            }
          ],
          "return_type": "\"Span\"",
          "docstring": null,
          "calls": [
            "Span",
            "min"
          ],
          "variables": [],
          "start_line": 88,
          "end_line": 100
        },
        {
          "name": "extend",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "int"
            }
          ],
          "return_type": "\"Span\"",
          "docstring": null,
          "calls": [
            "Span"
          ],
          "variables": [],
          "start_line": 102,
          "end_line": 115
        },
        {
          "name": "__init__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "len",
            "strip_control_codes"
          ],
          "variables": [
            "sanitized_text"
          ],
          "start_line": 144,
          "end_line": 165
        },
        {
          "name": "__len__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "int",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 167,
          "end_line": 168
        },
        {
          "name": "__bool__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "bool",
          "docstring": null,
          "calls": [
            "bool"
          ],
          "variables": [],
          "start_line": 170,
          "end_line": 171
        },
        {
          "name": "__str__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "str",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 173,
          "end_line": 174
        },
        {
          "name": "__repr__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "str",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 176,
          "end_line": 177
        },
        {
          "name": "__add__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "Any"
            }
          ],
          "return_type": "\"Text\"",
          "docstring": null,
          "calls": [
            "result.append",
            "isinstance",
            "self.copy"
          ],
          "variables": [
            "result"
          ],
          "start_line": 179,
          "end_line": 184
        },
        {
          "name": "__eq__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "object"
            }
          ],
          "return_type": "bool",
          "docstring": null,
          "calls": [
            "isinstance"
          ],
          "variables": [],
          "start_line": 186,
          "end_line": 189
        },
        {
          "name": "__contains__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "object"
            }
          ],
          "return_type": "bool",
          "docstring": null,
          "calls": [
            "isinstance"
          ],
          "variables": [],
          "start_line": 191,
          "end_line": 196
        },
        {
          "name": "__getitem__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "Union[int, slice]"
            }
          ],
          "return_type": "\"Text\"",
          "docstring": null,
          "calls": [
            "len",
            "get_text_at",
            "self.divide",
            "isinstance",
            "_Span",
            "TypeError",
            "slice.indices",
            "Text"
          ],
          "variables": [
            "_Span",
            "text",
            "lines"
          ],
          "start_line": 198,
          "end_line": 222
        },
        {
          "name": "get_text_at",
          "parameters": [
            {
              "name": null,
              "type": "int"
            }
          ],
          "return_type": "\"Text\"",
          "docstring": null,
          "calls": [
            "_Span",
            "Text"
          ],
          "variables": [
            "_Span",
            "text"
          ],
          "start_line": 199,
          "end_line": 210
        },
        {
          "name": "cell_len",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "int",
          "docstring": null,
          "calls": [
            "cell_len"
          ],
          "variables": [],
          "start_line": 225,
          "end_line": 227
        },
        {
          "name": "markup",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "str",
          "docstring": null,
          "calls": [
            "len",
            "append",
            "\"\".join",
            "escape",
            "itemgetter",
            "markup_spans.sort"
          ],
          "variables": [
            "output",
            "plain",
            "markup_spans",
            "position",
            "append",
            "position",
            "markup"
          ],
          "start_line": 230,
          "end_line": 257
        },
        {
          "name": "from_markup",
          "parameters": [
            {
              "name": "cls",
              "type": null
            },
            {
              "name": null,
              "type": "str"
            }
          ],
          "return_type": "\"Text\"",
          "docstring": null,
          "calls": [
            "render"
          ],
          "variables": [
            "rendered_text"
          ],
          "start_line": 260,
          "end_line": 291
        },
        {
          "name": "from_ansi",
          "parameters": [
            {
              "name": "cls",
              "type": null
            },
            {
              "name": null,
              "type": "str"
            }
          ],
          "return_type": "\"Text\"",
          "docstring": null,
          "calls": [
            "AnsiDecoder",
            "joiner.join",
            "Text",
            "decoder.decode"
          ],
          "variables": [
            "joiner",
            "decoder",
            "result"
          ],
          "start_line": 294,
          "end_line": 329
        },
        {
          "name": "styled",
          "parameters": [
            {
              "name": "cls",
              "type": null
            },
            {
              "name": null,
              "type": "str"
            }
          ],
          "return_type": "\"Text\"",
          "docstring": null,
          "calls": [
            "styled_text.stylize",
            "cls"
          ],
          "variables": [
            "styled_text"
          ],
          "start_line": 332,
          "end_line": 354
        },
        {
          "name": "assemble",
          "parameters": [
            {
              "name": "cls",
              "type": null
            },
            {
              "name": null,
              "type": "Union[str, \"Text\", Tuple[str, StyleType]]"
            }
          ],
          "return_type": "\"Text\"",
          "docstring": null,
          "calls": [
            "append",
            "isinstance",
            "cls",
            "text.apply_meta"
          ],
          "variables": [
            "text",
            "append",
            "_Text"
          ],
          "start_line": 357,
          "end_line": 400
        },
        {
          "name": "plain",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "str",
          "docstring": null,
          "calls": [
            "len",
            "\"\".join"
          ],
          "variables": [],
          "start_line": 403,
          "end_line": 407
        },
        {
          "name": "plain",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "str"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "len",
            "strip_control_codes",
            "self._trim_spans"
          ],
          "variables": [
            "sanitized_text",
            "old_length"
          ],
          "start_line": 410,
          "end_line": 418
        },
        {
          "name": "spans",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "List[Span]",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 421,
          "end_line": 423
        },
        {
          "name": "spans",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "List[Span]"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 426,
          "end_line": 428
        },
        {
          "name": "blank_copy",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "\"Text\"",
          "docstring": null,
          "calls": [
            "Text"
          ],
          "variables": [
            "copy_self"
          ],
          "start_line": 430,
          "end_line": 441
        },
        {
          "name": "copy",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "\"Text\"",
          "docstring": null,
          "calls": [
            "Text"
          ],
          "variables": [
            "copy_self"
          ],
          "start_line": 443,
          "end_line": 455
        },
        {
          "name": "stylize",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "Union[str, Style]"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "self._spans.append",
            "len",
            "min",
            "Span"
          ],
          "variables": [
            "length",
            "start",
            "end",
            "end"
          ],
          "start_line": 457,
          "end_line": 481
        },
        {
          "name": "stylize_before",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "Union[str, Style]"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "Span",
            "len",
            "min",
            "self._spans.insert"
          ],
          "variables": [
            "length",
            "start",
            "end",
            "end"
          ],
          "start_line": 483,
          "end_line": 507
        },
        {
          "name": "apply_meta",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "Dict[str, Any]"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "Style.from_meta",
            "self.stylize"
          ],
          "variables": [
            "style"
          ],
          "start_line": 509,
          "end_line": 521
        },
        {
          "name": "on",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "Any"
            }
          ],
          "return_type": "\"Text\"",
          "docstring": null,
          "calls": [
            "Style.from_meta",
            "meta.update",
            "handlers.items",
            "self.stylize"
          ],
          "variables": [
            "meta"
          ],
          "start_line": 523,
          "end_line": 541
        },
        {
          "name": "remove_suffix",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "str"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "len",
            "self.right_crop",
            "self.plain.endswith"
          ],
          "variables": [],
          "start_line": 543,
          "end_line": 550
        },
        {
          "name": "get_style_at_offset",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "\"Console\""
            },
            {
              "name": null,
              "type": "int"
            }
          ],
          "return_type": "Style",
          "docstring": null,
          "calls": [
            "get_style(self.style).copy",
            "len",
            "get_style"
          ],
          "variables": [
            "offset",
            "get_style",
            "style"
          ],
          "start_line": 552,
          "end_line": 570
        },
        {
          "name": "extend_style",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "int"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "self._text.append",
            "len",
            "span.extend"
          ],
          "variables": [
            "spans",
            "new_spaces",
            "end_offset"
          ],
          "start_line": 572,
          "end_line": 591
        },
        {
          "name": "highlight_regex",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "Union[Pattern[str], str]"
            }
          ],
          "return_type": "int",
          "docstring": null,
          "calls": [
            "callable",
            "style",
            "get_span",
            "match.groupdict().keys",
            "match.groupdict",
            "re.compile",
            "isinstance",
            "_Span",
            "append_span",
            "re_highlight.finditer"
          ],
          "variables": [
            "count",
            "append_span",
            "_Span",
            "plain",
            "re_highlight",
            "get_span",
            "match_style"
          ],
          "start_line": 593,
          "end_line": 631
        },
        {
          "name": "highlight_words",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "Iterable[str]"
            },
            {
              "name": null,
              "type": "Union[str, Style]"
            }
          ],
          "return_type": "int",
          "docstring": null,
          "calls": [
            "match.span",
            "add_span",
            "\"|\".join",
            "_Span",
            "re.escape",
            "re.finditer"
          ],
          "variables": [
            "re_words",
            "add_span",
            "count",
            "_Span"
          ],
          "start_line": 633,
          "end_line": 660
        },
        {
          "name": "rstrip",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "self.plain.rstrip"
          ],
          "variables": [],
          "start_line": 662,
          "end_line": 664
        },
        {
          "name": "rstrip_end",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "int"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "len",
            "self.right_crop",
            "_re_whitespace.search",
            "whitespace_match.group",
            "min"
          ],
          "variables": [
            "text_length",
            "excess",
            "whitespace_match",
            "whitespace_count"
          ],
          "start_line": 666,
          "end_line": 678
        },
        {
          "name": "set_length",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "int"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "len",
            "self.right_crop",
            "self.pad_right"
          ],
          "variables": [
            "length"
          ],
          "start_line": 680,
          "end_line": 687
        },
        {
          "name": "__rich_console__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "\"Console\""
            },
            {
              "name": null,
              "type": "\"ConsoleOptions\""
            }
          ],
          "return_type": "Iterable[Segment]",
          "docstring": null,
          "calls": [
            "Text(\"\\n\").join",
            "all_lines.render",
            "Text",
            "pick_bool",
            "self.wrap"
          ],
          "variables": [
            "tab_size",
            "justify",
            "overflow",
            "lines",
            "all_lines"
          ],
          "start_line": 689,
          "end_line": 706
        },
        {
          "name": "__rich_measure__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "\"Console\""
            },
            {
              "name": null,
              "type": "\"ConsoleOptions\""
            }
          ],
          "return_type": "Measurement",
          "docstring": null,
          "calls": [
            "Measurement",
            "max",
            "text.splitlines",
            "cell_len",
            "text.split"
          ],
          "variables": [
            "text",
            "lines",
            "max_text_width",
            "words",
            "min_text_width"
          ],
          "start_line": 708,
          "end_line": 718
        },
        {
          "name": "render",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "\"Console\""
            }
          ],
          "return_type": "Iterable[\"Segment\"]",
          "docstring": null,
          "calls": [
            "len",
            "enumerate",
            "_Segment",
            "Style.null",
            "zip",
            "get_current_style",
            "itemgetter",
            "tuple",
            "list",
            "sorted",
            "style_cache_get",
            "Segment",
            "spans.sort",
            "stack_pop",
            "stack_append",
            "combine",
            "get_style",
            "partial"
          ],
          "variables": [
            "_Segment",
            "text",
            "get_style",
            "enumerated_spans",
            "style_map",
            "spans",
            "stack",
            "stack_append",
            "stack_pop",
            "style_cache",
            "style_cache_get",
            "combine",
            "styles",
            "cached_style",
            "current_style"
          ],
          "start_line": 720,
          "end_line": 777
        },
        {
          "name": "get_current_style",
          "parameters": [],
          "return_type": "Style",
          "docstring": null,
          "calls": [
            "style_cache_get",
            "combine",
            "sorted",
            "tuple"
          ],
          "variables": [
            "styles",
            "cached_style",
            "current_style"
          ],
          "start_line": 759,
          "end_line": 767
        },
        {
          "name": "join",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "Iterable[\"Text\"]"
            }
          ],
          "return_type": "\"Text\"",
          "docstring": null,
          "calls": [
            "len",
            "self.blank_copy",
            "iter_text",
            "extend_text",
            "extend_spans",
            "loop_last",
            "_Span",
            "append_span"
          ],
          "variables": [
            "new_text",
            "extend_text",
            "append_span",
            "extend_spans",
            "offset",
            "_Span"
          ],
          "start_line": 779,
          "end_line": 816
        },
        {
          "name": "iter_text",
          "parameters": [],
          "return_type": "Iterable[\"Text\"]",
          "docstring": null,
          "calls": [
            "loop_last"
          ],
          "variables": [],
          "start_line": 791,
          "end_line": 798
        },
        {
          "name": "expand_tabs",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "line.split",
            "len",
            "self.split",
            "append",
            "Text(\"\").join",
            "part.extend_style",
            "part.plain.endswith",
            "Text"
          ],
          "variables": [
            "tab_size",
            "tab_size",
            "new_text",
            "append",
            "cell_position",
            "parts",
            "tab_remainder",
            "spaces",
            "result"
          ],
          "start_line": 818,
          "end_line": 858
        },
        {
          "name": "truncate",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "int"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "len",
            "set_cell_size",
            "cell_len"
          ],
          "variables": [
            "_overflow",
            "length",
            "spaces"
          ],
          "start_line": 860,
          "end_line": 885
        },
        {
          "name": "_trim_spans",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "len",
            "_Span",
            "min"
          ],
          "variables": [
            "max_offset",
            "_Span"
          ],
          "start_line": 887,
          "end_line": 899
        },
        {
          "name": "pad",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "int"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "len",
            "_Span"
          ],
          "variables": [
            "pad_characters",
            "_Span"
          ],
          "start_line": 901,
          "end_line": 916
        },
        {
          "name": "pad_left",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "int"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "len",
            "_Span"
          ],
          "variables": [
            "_Span"
          ],
          "start_line": 918,
          "end_line": 932
        },
        {
          "name": "pad_right",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "int"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "len"
          ],
          "variables": [],
          "start_line": 934,
          "end_line": 943
        },
        {
          "name": "align",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "AlignMethod"
            },
            {
              "name": null,
              "type": "int"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "self.truncate",
            "self.pad_left",
            "self.pad_right",
            "cell_len"
          ],
          "variables": [
            "excess_space",
            "left"
          ],
          "start_line": 945,
          "end_line": 963
        },
        {
          "name": "append",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "Union[\"Text\", str]"
            }
          ],
          "return_type": "\"Text\"",
          "docstring": null,
          "calls": [
            "self._spans.append",
            "len",
            "ValueError",
            "strip_control_codes",
            "self._text.append",
            "text._spans.copy",
            "isinstance",
            "_Span",
            "TypeError",
            "self._spans.extend",
            "Span"
          ],
          "variables": [
            "sanitized_text",
            "offset",
            "text_length",
            "_Span",
            "text_length"
          ],
          "start_line": 965,
          "end_line": 1007
        },
        {
          "name": "append_text",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "\"Text\""
            }
          ],
          "return_type": "\"Text\"",
          "docstring": null,
          "calls": [
            "self._spans.append",
            "len",
            "self._text.append",
            "text._spans.copy",
            "_Span",
            "self._spans.extend"
          ],
          "variables": [
            "_Span",
            "text_length"
          ],
          "start_line": 1009,
          "end_line": 1029
        },
        {
          "name": "append_tokens",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "Iterable[Tuple[str, Optional[StyleType]]]"
            }
          ],
          "return_type": "\"Text\"",
          "docstring": null,
          "calls": [
            "len",
            "strip_control_codes",
            "append_text",
            "_Span",
            "append_span"
          ],
          "variables": [
            "append_text",
            "append_span",
            "_Span",
            "offset",
            "content"
          ],
          "start_line": 1031,
          "end_line": 1053
        },
        {
          "name": "copy_styles",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "\"Text\""
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "self._spans.extend"
          ],
          "variables": [],
          "start_line": 1055,
          "end_line": 1061
        },
        {
          "name": "split",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "Lines",
          "docstring": null,
          "calls": [
            "self.divide",
            "text.endswith",
            "match.span",
            "match.end",
            "self.copy",
            "re.escape",
            "Lines",
            "flatten_spans",
            "lines.pop",
            "re.finditer"
          ],
          "variables": [
            "text",
            "lines",
            "lines"
          ],
          "start_line": 1063,
          "end_line": 1105
        },
        {
          "name": "flatten_spans",
          "parameters": [],
          "return_type": "Iterable[int]",
          "docstring": null,
          "calls": [
            "match.span",
            "re.escape",
            "re.finditer"
          ],
          "variables": [],
          "start_line": 1092,
          "end_line": 1096
        },
        {
          "name": "divide",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "Iterable[int]"
            }
          ],
          "return_type": "Lines",
          "docstring": null,
          "calls": [
            "len",
            "zip",
            "max",
            "list",
            "range",
            "_Span",
            "_Text",
            "self.copy",
            "min",
            "_line_appends[line_no]",
            "Lines"
          ],
          "variables": [
            "_offsets",
            "text",
            "text_length",
            "divide_offsets",
            "line_ranges",
            "style",
            "justify",
            "overflow",
            "_Text",
            "new_lines",
            "_line_appends",
            "line_count",
            "_Span",
            "lower_bound",
            "upper_bound",
            "start_line_no",
            "upper_bound",
            "lower_bound",
            "start_line_no",
            "end_line_no",
            "end_line_no",
            "lower_bound",
            "upper_bound",
            "upper_bound",
            "lower_bound",
            "end_line_no",
            "new_start",
            "new_end"
          ],
          "start_line": 1107,
          "end_line": 1184
        },
        {
          "name": "right_crop",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "len",
            "_Span",
            "min"
          ],
          "variables": [
            "max_offset",
            "_Span"
          ],
          "start_line": 1186,
          "end_line": 1200
        },
        {
          "name": "wrap",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "\"Console\""
            },
            {
              "name": null,
              "type": "int"
            }
          ],
          "return_type": "Lines",
          "docstring": null,
          "calls": [
            "divide_line",
            "self.split",
            "str",
            "line.truncate",
            "line.rstrip_end",
            "line.divide",
            "lines.extend",
            "pick_bool",
            "Lines",
            "line.expand_tabs",
            "new_lines.justify"
          ],
          "variables": [
            "wrap_justify",
            "wrap_overflow",
            "no_wrap",
            "lines",
            "new_lines",
            "offsets",
            "new_lines"
          ],
          "start_line": 1202,
          "end_line": 1248
        },
        {
          "name": "fit",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "int"
            }
          ],
          "return_type": "Lines",
          "docstring": null,
          "calls": [
            "Lines",
            "append",
            "line.set_length",
            "self.split"
          ],
          "variables": [
            "lines",
            "append"
          ],
          "start_line": 1250,
          "end_line": 1264
        },
        {
          "name": "detect_indentation",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "int",
          "docstring": null,
          "calls": [
            "len",
            "reduce",
            "match.group",
            "re.finditer"
          ],
          "variables": [
            "_indentations",
            "indentation",
            "indentation"
          ],
          "start_line": 1266,
          "end_line": 1285
        },
        {
          "name": "with_indent_guides",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "\"Text\"",
          "docstring": null,
          "calls": [
            "len",
            "text.blank_copy(\"\\n\").join",
            "self.detect_indentation",
            "new_lines.extend",
            "divmod",
            "re.compile",
            "match.group",
            "self.copy",
            "Text",
            "re_indent.match",
            "line.stylize",
            "text.split",
            "text.expand_tabs",
            "text.blank_copy",
            "add_line"
          ],
          "variables": [
            "_indent_size",
            "text",
            "indent_line",
            "re_indent",
            "new_lines",
            "add_line",
            "blank_lines",
            "match",
            "indent",
            "new_indent",
            "blank_lines",
            "new_text"
          ],
          "start_line": 1287,
          "end_line": 1333
        }
      ],
      "variables": [
        "DEFAULT_JUSTIFY",
        "DEFAULT_OVERFLOW",
        "_re_whitespace",
        "TextType",
        "GetStyleCallable",
        "start",
        "end",
        "style",
        "span1",
        "span2",
        "__slots__",
        "sanitized_text",
        "result",
        "_Span",
        "text",
        "lines",
        "output",
        "plain",
        "markup_spans",
        "position",
        "append",
        "position",
        "markup",
        "rendered_text",
        "joiner",
        "decoder",
        "result",
        "styled_text",
        "text",
        "append",
        "_Text",
        "sanitized_text",
        "old_length",
        "copy_self",
        "copy_self",
        "length",
        "start",
        "end",
        "end",
        "length",
        "start",
        "end",
        "end",
        "style",
        "meta",
        "offset",
        "get_style",
        "style",
        "spans",
        "new_spaces",
        "end_offset",
        "count",
        "append_span",
        "_Span",
        "plain",
        "re_highlight",
        "get_span",
        "match_style",
        "re_words",
        "add_span",
        "count",
        "_Span",
        "text_length",
        "excess",
        "whitespace_match",
        "whitespace_count",
        "length",
        "tab_size",
        "justify",
        "overflow",
        "lines",
        "all_lines",
        "text",
        "lines",
        "max_text_width",
        "words",
        "min_text_width",
        "_Segment",
        "text",
        "get_style",
        "enumerated_spans",
        "style_map",
        "spans",
        "stack",
        "stack_append",
        "stack_pop",
        "style_cache",
        "style_cache_get",
        "combine",
        "styles",
        "cached_style",
        "current_style",
        "new_text",
        "extend_text",
        "append_span",
        "extend_spans",
        "offset",
        "_Span",
        "tab_size",
        "tab_size",
        "new_text",
        "append",
        "cell_position",
        "parts",
        "tab_remainder",
        "spaces",
        "result",
        "_overflow",
        "length",
        "spaces",
        "max_offset",
        "_Span",
        "pad_characters",
        "_Span",
        "_Span",
        "excess_space",
        "left",
        "sanitized_text",
        "offset",
        "text_length",
        "_Span",
        "text_length",
        "_Span",
        "text_length",
        "append_text",
        "append_span",
        "_Span",
        "offset",
        "content",
        "text",
        "lines",
        "lines",
        "_offsets",
        "text",
        "text_length",
        "divide_offsets",
        "line_ranges",
        "style",
        "justify",
        "overflow",
        "_Text",
        "new_lines",
        "_line_appends",
        "line_count",
        "_Span",
        "lower_bound",
        "upper_bound",
        "start_line_no",
        "upper_bound",
        "lower_bound",
        "start_line_no",
        "end_line_no",
        "end_line_no",
        "lower_bound",
        "lower_bound",
        "upper_bound",
        "upper_bound",
        "lower_bound",
        "end_line_no",
        "new_start",
        "new_end",
        "max_offset",
        "_Span",
        "wrap_justify",
        "wrap_overflow",
        "no_wrap",
        "lines",
        "new_lines",
        "offsets",
        "new_lines",
        "lines",
        "append",
        "_indentations",
        "indentation",
        "indentation",
        "_indent_size",
        "text",
        "indent_line",
        "re_indent",
        "new_lines",
        "add_line",
        "blank_lines",
        "match",
        "indent",
        "new_indent",
        "blank_lines",
        "new_text",
        "text",
        "console"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\rich\\theme.py",
      "imports": [
        "import configparser",
        "from typing import IO, Dict, List, Mapping, Optional",
        "from .default_styles import DEFAULT_STYLES",
        "from .style import Style, StyleType"
      ],
      "classes": [
        {
          "name": "Theme",
          "base_classes": null,
          "docstring": null,
          "methods": []
        },
        {
          "name": "ThemeStackError",
          "base_classes": "(Exception)",
          "docstring": null,
          "methods": []
        },
        {
          "name": "ThemeStack",
          "base_classes": null,
          "docstring": null,
          "methods": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Style.parse",
            "isinstance",
            "self.styles.update",
            "styles.items",
            "DEFAULT_STYLES.copy"
          ],
          "variables": [],
          "start_line": 18,
          "end_line": 28
        },
        {
          "name": "config",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "str",
          "docstring": null,
          "calls": [
            "\"\\n\".join",
            "self.styles.items",
            "sorted"
          ],
          "variables": [
            "config"
          ],
          "start_line": 31,
          "end_line": 36
        },
        {
          "name": "from_file",
          "parameters": [
            {
              "name": "cls",
              "type": null
            },
            {
              "name": null,
              "type": "IO[str]"
            }
          ],
          "return_type": "\"Theme\"",
          "docstring": null,
          "calls": [
            "Theme",
            "Style.parse",
            "config.read_file",
            "config.items",
            "configparser.ConfigParser"
          ],
          "variables": [
            "config",
            "styles",
            "theme"
          ],
          "start_line": 39,
          "end_line": 56
        },
        {
          "name": "read",
          "parameters": [
            {
              "name": "cls",
              "type": null
            },
            {
              "name": null,
              "type": "str"
            }
          ],
          "return_type": "\"Theme\"",
          "docstring": null,
          "calls": [
            "open",
            "cls.from_file"
          ],
          "variables": [],
          "start_line": 59,
          "end_line": 73
        },
        {
          "name": "__init__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "Theme"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 87,
          "end_line": 89
        },
        {
          "name": "push_theme",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "Theme"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "theme.styles.copy",
            "self._entries.append"
          ],
          "variables": [
            "styles",
            "styles"
          ],
          "start_line": 91,
          "end_line": 103
        },
        {
          "name": "pop_theme",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "len",
            "self._entries.pop",
            "ThemeStackError"
          ],
          "variables": [],
          "start_line": 105,
          "end_line": 110
        }
      ],
      "variables": [
        "styles",
        "config",
        "config",
        "styles",
        "theme",
        "styles",
        "styles",
        "theme"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\rich\\themes.py",
      "imports": [
        "from .default_styles import DEFAULT_STYLES",
        "from .theme import Theme"
      ],
      "classes": [],
      "functions": [],
      "variables": [
        "DEFAULT"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\rich\\traceback.py",
      "imports": [
        "import inspect",
        "import linecache",
        "import os",
        "import sys",
        "from dataclasses import dataclass, field",
        "from itertools import islice",
        "from traceback import walk_tb",
        "from types import ModuleType, TracebackType",
        "from typing import (\n    Any,\n    Callable,\n    Dict,\n    Iterable,\n    List,\n    Optional,\n    Sequence,\n    Set,\n    Tuple,\n    Type,\n    Union,\n)",
        "from pygments.lexers import guess_lexer_for_filename",
        "from pygments.token import Comment, Keyword, Name, Number, Operator, String",
        "from pygments.token import Text as TextToken",
        "from pygments.token import Token",
        "from pygments.util import ClassNotFound",
        "from . import pretty",
        "from ._loop import loop_first_last, loop_last",
        "from .columns import Columns",
        "from .console import (\n    Console,\n    ConsoleOptions,\n    ConsoleRenderable,\n    Group,\n    RenderResult,\n    group,\n)",
        "from .constrain import Constrain",
        "from .highlighter import RegexHighlighter, ReprHighlighter",
        "from .panel import Panel",
        "from .scope import render_scope",
        "from .style import Style",
        "from .syntax import Syntax, SyntaxPosition",
        "from .text import Text",
        "from .theme import Theme",
        "from rich import _IMPORT_CWD",
        "import sys"
      ],
      "classes": [
        {
          "name": "Frame",
          "base_classes": null,
          "docstring": null,
          "methods": []
        },
        {
          "name": "_SyntaxError",
          "base_classes": null,
          "docstring": null,
          "methods": []
        },
        {
          "name": "Stack",
          "base_classes": null,
          "docstring": null,
          "methods": []
        },
        {
          "name": "Trace",
          "base_classes": null,
          "docstring": null,
          "methods": []
        },
        {
          "name": "PathHighlighter",
          "base_classes": "(RegexHighlighter)",
          "docstring": null,
          "methods": []
        },
        {
          "name": "Traceback",
          "base_classes": null,
          "docstring": null,
          "methods": []
        }
      ],
      "functions": [
        {
          "name": "_iter_syntax_lines",
          "parameters": [
            {
              "name": null,
              "type": "SyntaxPosition"
            },
            {
              "name": null,
              "type": "SyntaxPosition"
            }
          ],
          "return_type": "Iterable[Tuple[int, int, int]]",
          "docstring": null,
          "calls": [
            "range",
            "loop_first_last"
          ],
          "variables": [],
          "start_line": 55,
          "end_line": 80
        },
        {
          "name": "install",
          "parameters": [],
          "return_type": "Callable[[Type[BaseException], BaseException, Optional[TracebackType]], Any]",
          "docstring": null,
          "calls": [
            "get_ipython",
            "tb_data.get",
            "ip._get_exc_info",
            "bool",
            "default_showtraceback",
            "traceback_console.print",
            "ipy_excepthook_closure",
            "Traceback.from_exception",
            "Console",
            "range",
            "excepthook",
            "ipy_display_traceback"
          ],
          "variables": [
            "traceback_console",
            "locals_hide_sunder",
            "exception_traceback",
            "tb_data",
            "default_showtraceback",
            "tb_data",
            "exc_tuple",
            "tb",
            "compiled",
            "tb_offset",
            "tb_offset",
            "tb",
            "tb_data",
            "ip",
            "old_excepthook"
          ],
          "start_line": 83,
          "end_line": 211
        },
        {
          "name": "excepthook",
          "parameters": [
            {
              "name": null,
              "type": "Type[BaseException]"
            },
            {
              "name": null,
              "type": "BaseException"
            },
            {
              "name": null,
              "type": "Optional[TracebackType]"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "bool",
            "traceback_console.print",
            "Traceback.from_exception"
          ],
          "variables": [
            "exception_traceback"
          ],
          "start_line": 134,
          "end_line": 157
        },
        {
          "name": "ipy_excepthook_closure",
          "parameters": [
            {
              "name": null,
              "type": "Any"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "tb_data.get",
            "ip._get_exc_info",
            "default_showtraceback",
            "range",
            "excepthook",
            "ipy_display_traceback"
          ],
          "variables": [
            "tb_data",
            "default_showtraceback",
            "tb_data",
            "exc_tuple",
            "tb",
            "compiled",
            "tb_offset",
            "tb_offset",
            "tb",
            "tb_data"
          ],
          "start_line": 159,
          "end_line": 200
        },
        {
          "name": "ipy_show_traceback",
          "parameters": [
            {
              "name": null,
              "type": "Any"
            },
            {
              "name": null,
              "type": "Any"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "default_showtraceback"
          ],
          "variables": [
            "tb_data"
          ],
          "start_line": 163,
          "end_line": 167
        },
        {
          "name": "ipy_display_traceback",
          "parameters": [
            {
              "name": null,
              "type": "Any"
            },
            {
              "name": null,
              "type": "Any"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "range",
            "excepthook",
            "tb_data.get",
            "ip._get_exc_info"
          ],
          "variables": [
            "exc_tuple",
            "tb",
            "compiled",
            "tb_offset",
            "tb_offset",
            "tb",
            "tb_data"
          ],
          "start_line": 169,
          "end_line": 191
        },
        {
          "name": "__init__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "os.path.normpath",
            "max",
            "isinstance",
            "sys.exc_info",
            "os.path.abspath",
            "Syntax.get_theme",
            "ValueError",
            "self.suppress.append",
            "os.path.dirname",
            "self.extract"
          ],
          "variables": [
            "trace",
            "path",
            "path",
            "path"
          ],
          "start_line": 286,
          "end_line": 337
        },
        {
          "name": "from_exception",
          "parameters": [
            {
              "name": "cls",
              "type": null
            },
            {
              "name": null,
              "type": "Type[Any]"
            },
            {
              "name": null,
              "type": "BaseException"
            },
            {
              "name": null,
              "type": "Optional[TracebackType]"
            }
          ],
          "return_type": "\"Traceback\"",
          "docstring": null,
          "calls": [
            "cls",
            "cls.extract"
          ],
          "variables": [
            "rich_traceback"
          ],
          "start_line": 340,
          "end_line": 410
        },
        {
          "name": "extract",
          "parameters": [
            {
              "name": "cls",
              "type": null
            },
            {
              "name": null,
              "type": "Type[BaseException]"
            },
            {
              "name": null,
              "type": "BaseException"
            },
            {
              "name": null,
              "type": "Optional[TracebackType]"
            }
          ],
          "return_type": "Trace",
          "docstring": null,
          "calls": [
            "Frame",
            "getattr",
            "frame_summary.f_code.co_positions",
            "frame_summary.f_locals.get",
            "filename.startswith",
            "os.path.isabs",
            "next",
            "Trace",
            "safe_str",
            "str",
            "grouped_exceptions.add",
            "inspect.isfunction",
            "Stack",
            "walk_tb",
            "append",
            "Traceback.extract",
            "key.startswith",
            "stacks.append",
            "islice",
            "get_locals",
            "_SyntaxError",
            "set",
            "type",
            "stack.exceptions.append",
            "pretty.traverse",
            "isinstance",
            "frame_summary.f_locals.items",
            "inspect.isclass",
            "os.path.join"
          ],
          "variables": [
            "stacks",
            "is_cause",
            "notes",
            "grouped_exceptions",
            "stack",
            "append",
            "filename",
            "last_instruction",
            "last_instruction",
            "instruction_index",
            "instruction_position",
            "last_instruction",
            "filename",
            "frame",
            "cause",
            "exc_type",
            "exc_value",
            "traceback",
            "is_cause",
            "cause",
            "exc_type",
            "exc_value",
            "traceback",
            "is_cause",
            "trace"
          ],
          "start_line": 413,
          "end_line": 601
        },
        {
          "name": "safe_str",
          "parameters": [
            {
              "name": null,
              "type": "Any"
            }
          ],
          "return_type": "str",
          "docstring": null,
          "calls": [
            "str"
          ],
          "variables": [],
          "start_line": 454,
          "end_line": 459
        },
        {
          "name": "get_locals",
          "parameters": [
            {
              "name": null,
              "type": "Iterable[Tuple[str, object]]"
            }
          ],
          "return_type": "Iterable[Tuple[str, object]]",
          "docstring": null,
          "calls": [
            "key.startswith"
          ],
          "variables": [],
          "start_line": 502,
          "end_line": 514
        },
        {
          "name": "__rich_console__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "Console"
            },
            {
              "name": null,
              "type": "ConsoleOptions"
            }
          ],
          "return_type": "RenderResult",
          "docstring": null,
          "calls": [
            "Text.from_markup",
            "Constrain",
            "self._render_stack",
            "highlighter",
            "console.use_theme",
            "reversed",
            "self._render_syntax_error",
            "Style",
            "Group",
            "Theme",
            "render_stack",
            "enumerate",
            "Panel",
            "grouped_exceptions.append",
            "ReprHighlighter",
            "group",
            "Text.assemble",
            "loop_last",
            "theme.get_background_style",
            "token_style"
          ],
          "variables": [
            "theme",
            "background_style",
            "token_style",
            "traceback_theme",
            "highlighter",
            "stack_renderable",
            "stack_renderable",
            "grouped_exceptions"
          ],
          "start_line": 603,
          "end_line": 703
        },
        {
          "name": "render_stack",
          "parameters": [
            {
              "name": null,
              "type": "Stack"
            },
            {
              "name": null,
              "type": "bool"
            }
          ],
          "return_type": "RenderResult",
          "docstring": null,
          "calls": [
            "Text.from_markup",
            "Constrain",
            "enumerate",
            "self._render_stack",
            "highlighter",
            "Text.assemble",
            "console.use_theme",
            "Panel",
            "loop_last",
            "grouped_exceptions.append",
            "self._render_syntax_error",
            "render_stack",
            "Group"
          ],
          "variables": [
            "stack_renderable",
            "stack_renderable",
            "grouped_exceptions"
          ],
          "start_line": 635,
          "end_line": 700
        },
        {
          "name": "_render_syntax_error",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "_SyntaxError"
            }
          ],
          "return_type": "RenderResult",
          "docstring": null,
          "calls": [
            "Text.from_markup",
            "len",
            "ReprHighlighter",
            "str",
            "PathHighlighter",
            "highlighter",
            "os.path.exists",
            "path_highlighter",
            "syntax_error.line.rstrip",
            "syntax_error_text.stylize",
            "Text.assemble",
            "min"
          ],
          "variables": [
            "highlighter",
            "path_highlighter",
            "text",
            "syntax_error_text",
            "offset"
          ],
          "start_line": 706,
          "end_line": 726
        },
        {
          "name": "_guess_lexer",
          "parameters": [
            {
              "name": "cls",
              "type": null
            },
            {
              "name": null,
              "type": "str"
            },
            {
              "name": null,
              "type": "str"
            }
          ],
          "return_type": "str",
          "docstring": null,
          "calls": [
            "code.index",
            "first_line.lower",
            "first_line.startswith",
            "cls.LEXERS.get",
            "guess_lexer_for_filename",
            "os.path.splitext"
          ],
          "variables": [
            "ext",
            "new_line_index",
            "first_line"
          ],
          "start_line": 729,
          "end_line": 742
        },
        {
          "name": "_render_stack",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "Stack"
            }
          ],
          "return_type": "RenderResult",
          "docstring": null,
          "calls": [
            "render_scope",
            "\"\".join",
            "Text",
            "linecache.getlines",
            "line.lstrip",
            "str",
            "path_highlighter",
            "any",
            "range",
            "enumerate",
            "Syntax",
            "PathHighlighter",
            "os.path.exists",
            "syntax.stylize_range",
            "frame_filename.startswith",
            "frame.filename.startswith",
            "render_locals",
            "len",
            "Columns",
            "Text.assemble",
            "_iter_syntax_lines",
            "self._guess_lexer"
          ],
          "variables": [
            "path_highlighter",
            "theme",
            "exclude_frames",
            "exclude_frames",
            "excluded",
            "excluded",
            "excluded",
            "first",
            "frame_filename",
            "suppressed",
            "text",
            "text",
            "code_lines",
            "code",
            "lexer_name",
            "syntax",
            "line",
            "column1",
            "column2"
          ],
          "start_line": 745,
          "end_line": 870
        },
        {
          "name": "render_locals",
          "parameters": [
            {
              "name": null,
              "type": "Frame"
            }
          ],
          "return_type": "Iterable[ConsoleRenderable]",
          "docstring": null,
          "calls": [
            "render_scope"
          ],
          "variables": [],
          "start_line": 749,
          "end_line": 757
        },
        {
          "name": "bar",
          "parameters": [
            {
              "name": null,
              "type": "Any"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "print"
          ],
          "variables": [
            "one"
          ],
          "start_line": 877,
          "end_line": 881
        },
        {
          "name": "foo",
          "parameters": [
            {
              "name": null,
              "type": "Any"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "bar"
          ],
          "variables": [
            "_rich_traceback_guard",
            "zed"
          ],
          "start_line": 883,
          "end_line": 894
        },
        {
          "name": "error",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "foo"
          ],
          "variables": [],
          "start_line": 896,
          "end_line": 897
        }
      ],
      "variables": [
        "WINDOWS",
        "LOCALS_MAX_LENGTH",
        "LOCALS_MAX_STRING",
        "traceback_console",
        "locals_hide_sunder",
        "exception_traceback",
        "tb_data",
        "default_showtraceback",
        "tb_data",
        "exc_tuple",
        "tb",
        "compiled",
        "tb_offset",
        "tb_offset",
        "tb",
        "tb_data",
        "ip",
        "old_excepthook",
        "filename",
        "lineno",
        "name",
        "line",
        "locals",
        "last_instruction",
        "offset",
        "filename",
        "line",
        "lineno",
        "msg",
        "notes",
        "exc_type",
        "exc_value",
        "syntax_error",
        "is_cause",
        "frames",
        "notes",
        "is_group",
        "exceptions",
        "stacks",
        "highlights",
        "LEXERS",
        "trace",
        "path",
        "path",
        "path",
        "rich_traceback",
        "stacks",
        "is_cause",
        "notes",
        "grouped_exceptions",
        "stack",
        "append",
        "filename",
        "last_instruction",
        "last_instruction",
        "instruction_index",
        "instruction_position",
        "last_instruction",
        "filename",
        "frame",
        "cause",
        "exc_type",
        "exc_value",
        "traceback",
        "is_cause",
        "cause",
        "exc_type",
        "exc_value",
        "traceback",
        "is_cause",
        "trace",
        "theme",
        "background_style",
        "token_style",
        "traceback_theme",
        "highlighter",
        "stack_renderable",
        "stack_renderable",
        "grouped_exceptions",
        "highlighter",
        "path_highlighter",
        "text",
        "syntax_error_text",
        "offset",
        "ext",
        "new_line_index",
        "first_line",
        "path_highlighter",
        "theme",
        "exclude_frames",
        "exclude_frames",
        "excluded",
        "excluded",
        "excluded",
        "first",
        "frame_filename",
        "suppressed",
        "text",
        "text",
        "code_lines",
        "code",
        "lexer_name",
        "syntax",
        "line",
        "column1",
        "column2",
        "one",
        "_rich_traceback_guard",
        "zed"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\rich\\tree.py",
      "imports": [
        "from typing import Iterator, List, Optional, Tuple",
        "from ._loop import loop_first, loop_last",
        "from .console import Console, ConsoleOptions, RenderableType, RenderResult",
        "from .jupyter import JupyterMixin",
        "from .measure import Measurement",
        "from .segment import Segment",
        "from .style import Style, StyleStack, StyleType",
        "from .styled import Styled",
        "from rich.console import Group",
        "from rich.markdown import Markdown",
        "from rich.panel import Panel",
        "from rich.syntax import Syntax",
        "from rich.table import Table"
      ],
      "classes": [
        {
          "name": "Tree",
          "base_classes": "(JupyterMixin)",
          "docstring": null,
          "methods": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "RenderableType"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 37,
          "end_line": 53
        },
        {
          "name": "add",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "RenderableType"
            }
          ],
          "return_type": "\"Tree\"",
          "docstring": null,
          "calls": [
            "self.children.append",
            "Tree"
          ],
          "variables": [
            "node"
          ],
          "start_line": 55,
          "end_line": 84
        },
        {
          "name": "__rich_console__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "\"Console\""
            },
            {
              "name": null,
              "type": "\"ConsoleOptions\""
            }
          ],
          "return_type": "\"RenderResult\"",
          "docstring": null,
          "calls": [
            "_Segment",
            "Style.null",
            "Styled",
            "make_guide",
            "next",
            "style_stack.push",
            "Style",
            "Segment.line",
            "get_style",
            "console.render_lines",
            "levels.pop",
            "pop",
            "sum",
            "levels.append",
            "range",
            "guide_style_stack.push",
            "push",
            "guide_style_stack.pop",
            "style_stack.pop",
            "StyleStack",
            "options.update",
            "len",
            "iter",
            "loop_first",
            "loop_last",
            "_Segment.apply_style"
          ],
          "variables": [
            "stack",
            "pop",
            "push",
            "new_line",
            "get_style",
            "null_style",
            "guide_style",
            "_Segment",
            "line",
            "guide",
            "line",
            "levels",
            "guide_style_stack",
            "style_stack",
            "remove_guide_styles",
            "depth",
            "stack_node",
            "guide_style",
            "guide_style",
            "style",
            "prefix",
            "renderable_lines"
          ],
          "start_line": 86,
          "end_line": 174
        },
        {
          "name": "make_guide",
          "parameters": [
            {
              "name": null,
              "type": "int"
            },
            {
              "name": null,
              "type": "Style"
            }
          ],
          "return_type": "Segment",
          "docstring": null,
          "calls": [
            "_Segment"
          ],
          "variables": [
            "line",
            "guide",
            "line"
          ],
          "start_line": 101,
          "end_line": 108
        },
        {
          "name": "__rich_measure__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "\"Console\""
            },
            {
              "name": null,
              "type": "\"ConsoleOptions\""
            }
          ],
          "return_type": "\"Measurement\"",
          "docstring": null,
          "calls": [
            "pop",
            "iter",
            "Measurement",
            "max",
            "measure",
            "push",
            "next"
          ],
          "variables": [
            "stack",
            "pop",
            "push",
            "minimum",
            "maximum",
            "measure",
            "level",
            "iter_tree",
            "tree",
            "indent",
            "minimum",
            "maximum"
          ],
          "start_line": 176,
          "end_line": 201
        }
      ],
      "variables": [
        "GuideType",
        "ASCII_GUIDES",
        "TREE_GUIDES",
        "node",
        "stack",
        "pop",
        "push",
        "new_line",
        "get_style",
        "null_style",
        "guide_style",
        "_Segment",
        "line",
        "guide",
        "line",
        "levels",
        "guide_style_stack",
        "style_stack",
        "remove_guide_styles",
        "depth",
        "stack_node",
        "guide_style",
        "guide_style",
        "style",
        "prefix",
        "renderable_lines",
        "stack",
        "pop",
        "push",
        "minimum",
        "maximum",
        "measure",
        "level",
        "iter_tree",
        "tree",
        "indent",
        "minimum",
        "maximum",
        "table",
        "code",
        "syntax",
        "markdown",
        "root",
        "node",
        "simple_node",
        "containers_node",
        "panel",
        "console"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\rich\\_cell_widths.py",
      "imports": [],
      "classes": [],
      "functions": [],
      "variables": [
        "CELL_WIDTHS"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\rich\\_emoji_codes.py",
      "imports": [],
      "classes": [],
      "functions": [],
      "variables": [
        "EMOJI"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\rich\\_emoji_replace.py",
      "imports": [
        "from typing import Callable, Match, Optional",
        "import re",
        "from ._emoji_codes import EMOJI"
      ],
      "classes": [],
      "functions": [
        {
          "name": "_emoji_replace",
          "parameters": [
            {
              "name": null,
              "type": "str"
            }
          ],
          "return_type": "str",
          "docstring": null,
          "calls": [
            "variants.get",
            "emoji_name.lower",
            "_emoji_sub",
            "match.groups",
            "get_emoji",
            "get_variant"
          ],
          "variables": [
            "get_emoji",
            "variants",
            "get_variant",
            "default_variant_code"
          ],
          "start_line": 12,
          "end_line": 32
        },
        {
          "name": "do_replace",
          "parameters": [
            {
              "name": null,
              "type": "Match[str]"
            }
          ],
          "return_type": "str",
          "docstring": null,
          "calls": [
            "get_emoji",
            "get_variant",
            "match.groups",
            "emoji_name.lower"
          ],
          "variables": [],
          "start_line": 23,
          "end_line": 30
        }
      ],
      "variables": [
        "_ReStringMatch",
        "_ReSubCallable",
        "_EmojiSubMethod",
        "get_emoji",
        "variants",
        "get_variant",
        "default_variant_code"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\rich\\_export_format.py",
      "imports": [],
      "classes": [],
      "functions": [],
      "variables": [
        "CONSOLE_HTML_FORMAT",
        "CONSOLE_SVG_FORMAT",
        "_SVG_FONT_FAMILY",
        "_SVG_CLASSES_PREFIX"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\rich\\_extension.py",
      "imports": [
        "from typing import Any",
        "from rich.pretty import install",
        "from rich.traceback import install as tr_install"
      ],
      "classes": [],
      "functions": [
        {
          "name": "load_ipython_extension",
          "parameters": [
            {
              "name": null,
              "type": "Any"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "tr_install",
            "install"
          ],
          "variables": [],
          "start_line": 4,
          "end_line": 10
        }
      ],
      "variables": []
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\rich\\_fileno.py",
      "imports": [
        "from typing import IO, Callable"
      ],
      "classes": [],
      "functions": [
        {
          "name": "get_fileno",
          "parameters": [
            {
              "name": null,
              "type": "IO[str]"
            }
          ],
          "return_type": "int | None",
          "docstring": null,
          "calls": [
            "fileno",
            "getattr"
          ],
          "variables": [
            "fileno"
          ],
          "start_line": 6,
          "end_line": 24
        }
      ],
      "variables": [
        "fileno"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\rich\\_inspect.py",
      "imports": [
        "import inspect",
        "from inspect import cleandoc, getdoc, getfile, isclass, ismodule, signature",
        "from typing import Any, Collection, Iterable, Optional, Tuple, Type, Union",
        "from .console import Group, RenderableType",
        "from .control import escape_control_codes",
        "from .highlighter import ReprHighlighter",
        "from .jupyter import JupyterMixin",
        "from .panel import Panel",
        "from .pretty import Pretty",
        "from .table import Table",
        "from .text import Text, TextType"
      ],
      "classes": [
        {
          "name": "Inspect",
          "base_classes": "(JupyterMixin)",
          "docstring": null,
          "methods": []
        }
      ],
      "functions": [
        {
          "name": "_first_paragraph",
          "parameters": [
            {
              "name": null,
              "type": "str"
            }
          ],
          "return_type": "str",
          "docstring": null,
          "calls": [
            "doc.partition"
          ],
          "variables": [],
          "start_line": 15,
          "end_line": 18
        },
        {
          "name": "__init__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "Any"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "ReprHighlighter",
            "self._make_title"
          ],
          "variables": [
            "methods",
            "private",
            "dunder"
          ],
          "start_line": 37,
          "end_line": 62
        },
        {
          "name": "_make_title",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "Any"
            }
          ],
          "return_type": "Text",
          "docstring": null,
          "calls": [
            "callable",
            "str",
            "ismodule",
            "type",
            "isclass",
            "self.highlighter"
          ],
          "variables": [
            "title_str",
            "title_text"
          ],
          "start_line": 64,
          "end_line": 72
        },
        {
          "name": "__rich__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "Panel",
          "docstring": null,
          "calls": [
            "Panel.fit",
            "Group",
            "self._render"
          ],
          "variables": [],
          "start_line": 74,
          "end_line": 80
        },
        {
          "name": "_get_signature",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "str"
            },
            {
              "name": null,
              "type": "Any"
            }
          ],
          "return_type": "Optional[Text]",
          "docstring": null,
          "calls": [
            "callable_name.stylize",
            "getattr",
            "str",
            "signature",
            "inspect.iscoroutinefunction",
            "prefix.replace",
            "Text.assemble",
            "inspect.isclass",
            "self.highlighter",
            "Text",
            "getfile"
          ],
          "variables": [
            "_signature",
            "_signature",
            "source_filename",
            "source_filename",
            "callable_name",
            "signature_text",
            "qualname",
            "prefix",
            "prefix",
            "prefix",
            "qual_signature"
          ],
          "start_line": 82,
          "end_line": 119
        },
        {
          "name": "_render",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "Iterable[RenderableType]",
          "docstring": null,
          "calls": [
            "Text.from_markup",
            "getattr",
            "repr",
            "highlighter",
            "isclass",
            "Text",
            "Table.grid",
            "ismodule",
            "safe_getattr",
            "items.sort",
            "key.strip",
            "callable",
            "items_table.add_column",
            "key.strip(\"_\").lower",
            "add_row",
            "self._get_signature",
            "Panel",
            "warning.stylize",
            "key.startswith",
            "self._get_formatted_doc",
            "len",
            "Text.assemble",
            "dir",
            "_signature_text.append",
            "key_text.copy",
            "doc.stylize",
            "Pretty"
          ],
          "variables": [
            "obj",
            "keys",
            "total_items",
            "keys",
            "keys",
            "not_shown_count",
            "items",
            "items_table",
            "add_row",
            "highlighter",
            "signature",
            "_doc",
            "doc_text",
            "doc_text",
            "key_text",
            "warning",
            "_signature_text",
            "docs",
            "doc"
          ],
          "start_line": 121,
          "end_line": 212
        },
        {
          "name": "sort_items",
          "parameters": [
            {
              "name": null,
              "type": "Tuple[str, Any]"
            }
          ],
          "return_type": "Tuple[bool, str]",
          "docstring": null,
          "calls": [
            "key.strip",
            "callable",
            "key.strip(\"_\").lower"
          ],
          "variables": [],
          "start_line": 124,
          "end_line": 126
        },
        {
          "name": "safe_getattr",
          "parameters": [
            {
              "name": null,
              "type": "str"
            }
          ],
          "return_type": "Tuple[Any, Any]",
          "docstring": null,
          "calls": [
            "getattr"
          ],
          "variables": [],
          "start_line": 128,
          "end_line": 133
        },
        {
          "name": "_get_formatted_doc",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "Any"
            }
          ],
          "return_type": "Optional[str]",
          "docstring": null,
          "calls": [
            "cleandoc(docs).strip",
            "escape_control_codes",
            "_first_paragraph",
            "cleandoc",
            "getdoc"
          ],
          "variables": [
            "docs",
            "docs",
            "docs"
          ],
          "start_line": 214,
          "end_line": 233
        },
        {
          "name": "get_object_types_mro",
          "parameters": [
            {
              "name": null,
              "type": "Union[object, Type[Any]]"
            }
          ],
          "return_type": "Tuple[type, ...]",
          "docstring": null,
          "calls": [
            "hasattr",
            "type",
            "getattr"
          ],
          "variables": [
            "obj"
          ],
          "start_line": 236,
          "end_line": 242
        },
        {
          "name": "get_object_types_mro_as_strings",
          "parameters": [
            {
              "name": null,
              "type": "object"
            }
          ],
          "return_type": "Collection[str]",
          "docstring": null,
          "calls": [
            "getattr",
            "get_object_types_mro"
          ],
          "variables": [],
          "start_line": 245,
          "end_line": 255
        },
        {
          "name": "is_object_one_of_types",
          "parameters": [
            {
              "name": null,
              "type": "object"
            },
            {
              "name": null,
              "type": "Collection[str]"
            }
          ],
          "return_type": "bool",
          "docstring": null,
          "calls": [
            "get_object_types_mro_as_strings"
          ],
          "variables": [],
          "start_line": 258,
          "end_line": 268
        }
      ],
      "variables": [
        "methods",
        "private",
        "dunder",
        "private",
        "dunder",
        "dunder",
        "title_str",
        "title_text",
        "_signature",
        "_signature",
        "source_filename",
        "source_filename",
        "callable_name",
        "signature_text",
        "qualname",
        "prefix",
        "prefix",
        "prefix",
        "qual_signature",
        "obj",
        "keys",
        "total_items",
        "keys",
        "keys",
        "not_shown_count",
        "items",
        "items_table",
        "add_row",
        "highlighter",
        "signature",
        "_doc",
        "doc_text",
        "doc_text",
        "key_text",
        "warning",
        "_signature_text",
        "docs",
        "doc",
        "docs",
        "docs",
        "docs",
        "obj"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\rich\\_log_render.py",
      "imports": [
        "from datetime import datetime",
        "from typing import Iterable, List, Optional, TYPE_CHECKING, Union, Callable",
        "from .text import Text, TextType",
        "from .console import Console, ConsoleRenderable, RenderableType",
        "from .table import Table",
        "from .containers import Renderables",
        "from .table import Table",
        "from rich.console import Console"
      ],
      "classes": [
        {
          "name": "LogRender",
          "base_classes": null,
          "docstring": null,
          "methods": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 15,
          "end_line": 30
        },
        {
          "name": "__call__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "\"Console\""
            },
            {
              "name": null,
              "type": "Iterable[\"ConsoleRenderable\"]"
            }
          ],
          "return_type": "\"Table\"",
          "docstring": null,
          "calls": [
            "len",
            "callable",
            "Table.grid",
            "output.add_column",
            "output.add_row",
            "time_format",
            "path_text.append",
            "log_time.strftime",
            "Renderables",
            "console.get_datetime",
            "Text",
            "row.append"
          ],
          "variables": [
            "output",
            "row",
            "log_time",
            "time_format",
            "log_time_display",
            "log_time_display",
            "path_text"
          ],
          "start_line": 32,
          "end_line": 86
        }
      ],
      "variables": [
        "FormatTimeCallable",
        "output",
        "row",
        "log_time",
        "time_format",
        "log_time_display",
        "log_time_display",
        "path_text",
        "c"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\rich\\_loop.py",
      "imports": [
        "from typing import Iterable, Tuple, TypeVar"
      ],
      "classes": [],
      "functions": [
        {
          "name": "loop_first",
          "parameters": [
            {
              "name": null,
              "type": "Iterable[T]"
            }
          ],
          "return_type": "Iterable[Tuple[bool, T]]",
          "docstring": null,
          "calls": [
            "iter",
            "next"
          ],
          "variables": [
            "iter_values",
            "value"
          ],
          "start_line": 6,
          "end_line": 15
        },
        {
          "name": "loop_last",
          "parameters": [
            {
              "name": null,
              "type": "Iterable[T]"
            }
          ],
          "return_type": "Iterable[Tuple[bool, T]]",
          "docstring": null,
          "calls": [
            "iter",
            "next"
          ],
          "variables": [
            "iter_values",
            "previous_value",
            "previous_value"
          ],
          "start_line": 18,
          "end_line": 28
        },
        {
          "name": "loop_first_last",
          "parameters": [
            {
              "name": null,
              "type": "Iterable[T]"
            }
          ],
          "return_type": "Iterable[Tuple[bool, bool, T]]",
          "docstring": null,
          "calls": [
            "iter",
            "next"
          ],
          "variables": [
            "iter_values",
            "previous_value",
            "first",
            "first",
            "previous_value"
          ],
          "start_line": 31,
          "end_line": 43
        }
      ],
      "variables": [
        "T",
        "iter_values",
        "value",
        "iter_values",
        "previous_value",
        "previous_value",
        "iter_values",
        "previous_value",
        "first",
        "first",
        "previous_value"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\rich\\_null_file.py",
      "imports": [
        "from types import TracebackType",
        "from typing import IO, Iterable, Iterator, List, Optional, Type"
      ],
      "classes": [
        {
          "name": "NullFile",
          "base_classes": "(IO[str])",
          "docstring": null,
          "methods": []
        }
      ],
      "functions": [
        {
          "name": "close",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 6,
          "end_line": 7
        },
        {
          "name": "isatty",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "bool",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 9,
          "end_line": 10
        },
        {
          "name": "read",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "str",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 12,
          "end_line": 13
        },
        {
          "name": "readable",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "bool",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 15,
          "end_line": 16
        },
        {
          "name": "readline",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "str",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 18,
          "end_line": 19
        },
        {
          "name": "readlines",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "List[str]",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 21,
          "end_line": 22
        },
        {
          "name": "seek",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "int"
            }
          ],
          "return_type": "int",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 24,
          "end_line": 25
        },
        {
          "name": "seekable",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "bool",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 27,
          "end_line": 28
        },
        {
          "name": "tell",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "int",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 30,
          "end_line": 31
        },
        {
          "name": "truncate",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "int",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 33,
          "end_line": 34
        },
        {
          "name": "writable",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "bool",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 36,
          "end_line": 37
        },
        {
          "name": "writelines",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "Iterable[str]"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 39,
          "end_line": 40
        },
        {
          "name": "__next__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "str",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 42,
          "end_line": 43
        },
        {
          "name": "__iter__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "Iterator[str]",
          "docstring": null,
          "calls": [
            "iter"
          ],
          "variables": [],
          "start_line": 45,
          "end_line": 46
        },
        {
          "name": "__enter__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "IO[str]",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 48,
          "end_line": 49
        },
        {
          "name": "__exit__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "Optional[Type[BaseException]]"
            },
            {
              "name": null,
              "type": "Optional[BaseException]"
            },
            {
              "name": null,
              "type": "Optional[TracebackType]"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 51,
          "end_line": 57
        },
        {
          "name": "write",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "str"
            }
          ],
          "return_type": "int",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 59,
          "end_line": 60
        },
        {
          "name": "flush",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 62,
          "end_line": 63
        },
        {
          "name": "fileno",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "int",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 65,
          "end_line": 66
        }
      ],
      "variables": [
        "NULL_FILE"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\rich\\_palettes.py",
      "imports": [
        "from .palette import Palette"
      ],
      "classes": [],
      "functions": [],
      "variables": [
        "WINDOWS_PALETTE",
        "STANDARD_PALETTE",
        "EIGHT_BIT_PALETTE"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\rich\\_pick.py",
      "imports": [
        "from typing import Optional"
      ],
      "classes": [],
      "functions": [
        {
          "name": "pick_bool",
          "parameters": [
            {
              "name": null,
              "type": "Optional[bool]"
            }
          ],
          "return_type": "bool",
          "docstring": null,
          "calls": [
            "bool"
          ],
          "variables": [],
          "start_line": 4,
          "end_line": 17
        }
      ],
      "variables": []
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\rich\\_ratio.py",
      "imports": [
        "from fractions import Fraction",
        "from math import ceil",
        "from typing import cast, List, Optional, Sequence, Protocol",
        "from dataclasses import dataclass"
      ],
      "classes": [
        {
          "name": "Edge",
          "base_classes": "(Protocol)",
          "docstring": null,
          "methods": []
        },
        {
          "name": "E",
          "base_classes": null,
          "docstring": null,
          "methods": []
        }
      ],
      "functions": [
        {
          "name": "ratio_resolve",
          "parameters": [
            {
              "name": null,
              "type": "int"
            },
            {
              "name": null,
              "type": "Sequence[Edge]"
            }
          ],
          "return_type": "List[int]",
          "docstring": null,
          "calls": [
            "enumerate",
            "sum",
            "divmod",
            "zip",
            "_Fraction",
            "cast"
          ],
          "variables": [
            "sizes",
            "_Fraction",
            "flexible_edges",
            "remaining",
            "portion",
            "remainder"
          ],
          "start_line": 14,
          "end_line": 72
        },
        {
          "name": "ratio_reduce",
          "parameters": [
            {
              "name": null,
              "type": "int"
            },
            {
              "name": null,
              "type": "List[int]"
            },
            {
              "name": null,
              "type": "List[int]"
            },
            {
              "name": null,
              "type": "List[int]"
            }
          ],
          "return_type": "List[int]",
          "docstring": null,
          "calls": [
            "sum",
            "round",
            "append",
            "zip",
            "min"
          ],
          "variables": [
            "ratios",
            "total_ratio",
            "total_remaining",
            "result",
            "append",
            "distributed"
          ],
          "start_line": 75,
          "end_line": 104
        },
        {
          "name": "ratio_distribute",
          "parameters": [
            {
              "name": null,
              "type": "int"
            },
            {
              "name": null,
              "type": "List[int]"
            }
          ],
          "return_type": "List[int]",
          "docstring": null,
          "calls": [
            "len",
            "sum",
            "append",
            "zip",
            "max",
            "ceil"
          ],
          "variables": [
            "ratios",
            "total_ratio",
            "total_remaining",
            "distributed_total",
            "append",
            "_minimums",
            "_minimums",
            "distributed",
            "distributed"
          ],
          "start_line": 107,
          "end_line": 140
        }
      ],
      "variables": [
        "size",
        "ratio",
        "minimum_size",
        "sizes",
        "_Fraction",
        "flexible_edges",
        "remaining",
        "portion",
        "remainder",
        "ratios",
        "total_ratio",
        "total_remaining",
        "result",
        "append",
        "distributed",
        "ratios",
        "total_ratio",
        "total_remaining",
        "distributed_total",
        "append",
        "_minimums",
        "_minimums",
        "distributed",
        "distributed",
        "size",
        "ratio",
        "minimum_size",
        "resolved"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\rich\\_spinners.py",
      "imports": [],
      "classes": [],
      "functions": [],
      "variables": [
        "SPINNERS"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\rich\\_stack.py",
      "imports": [
        "from typing import List, TypeVar"
      ],
      "classes": [
        {
          "name": "Stack",
          "base_classes": "(List[T])",
          "docstring": null,
          "methods": []
        }
      ],
      "functions": [
        {
          "name": "top",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "T",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 10,
          "end_line": 12
        },
        {
          "name": "push",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "T"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "self.append"
          ],
          "variables": [],
          "start_line": 14,
          "end_line": 16
        }
      ],
      "variables": [
        "T"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\rich\\_timer.py",
      "imports": [
        "from time import time",
        "import contextlib",
        "from typing import Generator"
      ],
      "classes": [],
      "functions": [
        {
          "name": "timer",
          "parameters": [],
          "return_type": "Generator[None, None, None]",
          "docstring": null,
          "calls": [
            "print",
            "time"
          ],
          "variables": [
            "start",
            "elapsed",
            "elapsed_ms"
          ],
          "start_line": 13,
          "end_line": 19
        }
      ],
      "variables": [
        "start",
        "elapsed",
        "elapsed_ms"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\rich\\_win32_console.py",
      "imports": [
        "import ctypes",
        "import sys",
        "from typing import Any",
        "import time",
        "from ctypes import Structure, byref, wintypes",
        "from typing import IO, NamedTuple, Type, cast",
        "from rich.color import ColorSystem",
        "from rich.style import Style",
        "from rich.console import Console"
      ],
      "classes": [
        {
          "name": "LegacyWindowsError",
          "base_classes": "(Exception)",
          "docstring": null,
          "methods": []
        },
        {
          "name": "WindowsCoordinates",
          "base_classes": "(NamedTuple)",
          "docstring": null,
          "methods": []
        },
        {
          "name": "CONSOLE_SCREEN_BUFFER_INFO",
          "base_classes": "(Structure)",
          "docstring": null,
          "methods": []
        },
        {
          "name": "CONSOLE_CURSOR_INFO",
          "base_classes": "(ctypes.Structure)",
          "docstring": null,
          "methods": []
        },
        {
          "name": "LegacyWindowsTerm",
          "base_classes": null,
          "docstring": null,
          "methods": []
        }
      ],
      "functions": [
        {
          "name": "from_param",
          "parameters": [
            {
              "name": "cls",
              "type": null
            },
            {
              "name": null,
              "type": "\"WindowsCoordinates\""
            }
          ],
          "return_type": "COORD",
          "docstring": null,
          "calls": [
            "COORD"
          ],
          "variables": [],
          "start_line": 44,
          "end_line": 54
        },
        {
          "name": "GetStdHandle",
          "parameters": [],
          "return_type": "wintypes.HANDLE",
          "docstring": null,
          "calls": [
            "_GetStdHandle",
            "cast"
          ],
          "variables": [],
          "start_line": 78,
          "end_line": 87
        },
        {
          "name": "GetConsoleMode",
          "parameters": [
            {
              "name": null,
              "type": "wintypes.HANDLE"
            }
          ],
          "return_type": "int",
          "docstring": null,
          "calls": [
            "bool",
            "_GetConsoleMode",
            "wintypes.DWORD",
            "LegacyWindowsError"
          ],
          "variables": [
            "console_mode",
            "success"
          ],
          "start_line": 95,
          "end_line": 114
        },
        {
          "name": "FillConsoleOutputCharacter",
          "parameters": [
            {
              "name": null,
              "type": "wintypes.HANDLE"
            },
            {
              "name": null,
              "type": "str"
            },
            {
              "name": null,
              "type": "int"
            },
            {
              "name": null,
              "type": "WindowsCoordinates"
            }
          ],
          "return_type": "int",
          "docstring": null,
          "calls": [
            "char.encode",
            "wintypes.DWORD",
            "_FillConsoleOutputCharacterW",
            "ctypes.c_char",
            "byref"
          ],
          "variables": [
            "character",
            "num_characters",
            "num_written"
          ],
          "start_line": 128,
          "end_line": 155
        },
        {
          "name": "FillConsoleOutputAttribute",
          "parameters": [
            {
              "name": null,
              "type": "wintypes.HANDLE"
            },
            {
              "name": null,
              "type": "int"
            },
            {
              "name": null,
              "type": "int"
            },
            {
              "name": null,
              "type": "WindowsCoordinates"
            }
          ],
          "return_type": "int",
          "docstring": null,
          "calls": [
            "wintypes.WORD",
            "_FillConsoleOutputAttribute",
            "wintypes.DWORD",
            "byref"
          ],
          "variables": [
            "num_cells",
            "style_attrs",
            "num_written"
          ],
          "start_line": 169,
          "end_line": 193
        },
        {
          "name": "SetConsoleTextAttribute",
          "parameters": [
            {
              "name": null,
              "type": "wintypes.HANDLE"
            },
            {
              "name": null,
              "type": "wintypes.WORD"
            }
          ],
          "return_type": "bool",
          "docstring": null,
          "calls": [
            "_SetConsoleTextAttribute",
            "bool"
          ],
          "variables": [],
          "start_line": 204,
          "end_line": 217
        },
        {
          "name": "GetConsoleScreenBufferInfo",
          "parameters": [
            {
              "name": null,
              "type": "wintypes.HANDLE"
            }
          ],
          "return_type": "CONSOLE_SCREEN_BUFFER_INFO",
          "docstring": null,
          "calls": [
            "CONSOLE_SCREEN_BUFFER_INFO",
            "_GetConsoleScreenBufferInfo",
            "byref"
          ],
          "variables": [
            "console_screen_buffer_info"
          ],
          "start_line": 228,
          "end_line": 241
        },
        {
          "name": "SetConsoleCursorPosition",
          "parameters": [
            {
              "name": null,
              "type": "wintypes.HANDLE"
            },
            {
              "name": null,
              "type": "WindowsCoordinates"
            }
          ],
          "return_type": "bool",
          "docstring": null,
          "calls": [
            "bool",
            "_SetConsoleCursorPosition"
          ],
          "variables": [],
          "start_line": 252,
          "end_line": 264
        },
        {
          "name": "GetConsoleCursorInfo",
          "parameters": [
            {
              "name": null,
              "type": "wintypes.HANDLE"
            },
            {
              "name": null,
              "type": "CONSOLE_CURSOR_INFO"
            }
          ],
          "return_type": "bool",
          "docstring": null,
          "calls": [
            "bool",
            "_GetConsoleCursorInfo",
            "byref"
          ],
          "variables": [],
          "start_line": 275,
          "end_line": 288
        },
        {
          "name": "SetConsoleCursorInfo",
          "parameters": [
            {
              "name": null,
              "type": "wintypes.HANDLE"
            },
            {
              "name": null,
              "type": "CONSOLE_CURSOR_INFO"
            }
          ],
          "return_type": "bool",
          "docstring": null,
          "calls": [
            "bool",
            "_SetConsoleCursorInfo",
            "byref"
          ],
          "variables": [],
          "start_line": 299,
          "end_line": 311
        },
        {
          "name": "SetConsoleTitle",
          "parameters": [
            {
              "name": null,
              "type": "str"
            }
          ],
          "return_type": "bool",
          "docstring": null,
          "calls": [
            "bool",
            "_SetConsoleTitle"
          ],
          "variables": [],
          "start_line": 319,
          "end_line": 328
        },
        {
          "name": "__init__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "\"IO[str]\""
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "GetStdHandle",
            "GetConsoleScreenBufferInfo"
          ],
          "variables": [
            "handle",
            "default_text"
          ],
          "start_line": 362,
          "end_line": 374
        },
        {
          "name": "cursor_position",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "WindowsCoordinates",
          "docstring": null,
          "calls": [
            "WindowsCoordinates",
            "GetConsoleScreenBufferInfo"
          ],
          "variables": [
            "coord"
          ],
          "start_line": 377,
          "end_line": 384
        },
        {
          "name": "screen_size",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "WindowsCoordinates",
          "docstring": null,
          "calls": [
            "WindowsCoordinates",
            "GetConsoleScreenBufferInfo"
          ],
          "variables": [
            "screen_size"
          ],
          "start_line": 387,
          "end_line": 394
        },
        {
          "name": "write_text",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "str"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "self.write",
            "self.flush"
          ],
          "variables": [],
          "start_line": 396,
          "end_line": 403
        },
        {
          "name": "write_styled",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "str"
            },
            {
              "name": null,
              "type": "Style"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "ctypes.c_ushort",
            "SetConsoleTextAttribute",
            "color.downgrade",
            "self.write_text",
            "bgcolor.downgrade"
          ],
          "variables": [
            "color",
            "bgcolor",
            "fore",
            "fore",
            "fore",
            "fore",
            "fore",
            "fore",
            "back",
            "back",
            "back",
            "back"
          ],
          "start_line": 405,
          "end_line": 442
        },
        {
          "name": "move_cursor_to",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "WindowsCoordinates"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "SetConsoleCursorPosition"
          ],
          "variables": [],
          "start_line": 444,
          "end_line": 452
        },
        {
          "name": "erase_line",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "WindowsCoordinates",
            "FillConsoleOutputAttribute",
            "FillConsoleOutputCharacter"
          ],
          "variables": [
            "screen_size",
            "cursor_position",
            "cells_to_erase",
            "start_coordinates"
          ],
          "start_line": 454,
          "end_line": 468
        },
        {
          "name": "erase_end_of_line",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "FillConsoleOutputAttribute",
            "FillConsoleOutputCharacter"
          ],
          "variables": [
            "cursor_position",
            "cells_to_erase"
          ],
          "start_line": 470,
          "end_line": 482
        },
        {
          "name": "erase_start_of_line",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "WindowsCoordinates",
            "FillConsoleOutputAttribute",
            "FillConsoleOutputCharacter"
          ],
          "variables": [
            "start"
          ],
          "start_line": 484,
          "end_line": 491
        },
        {
          "name": "move_cursor_up",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "WindowsCoordinates",
            "SetConsoleCursorPosition"
          ],
          "variables": [
            "cursor_position"
          ],
          "start_line": 493,
          "end_line": 501
        },
        {
          "name": "move_cursor_down",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "WindowsCoordinates",
            "SetConsoleCursorPosition"
          ],
          "variables": [
            "cursor_position"
          ],
          "start_line": 503,
          "end_line": 512
        },
        {
          "name": "move_cursor_forward",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "WindowsCoordinates",
            "SetConsoleCursorPosition"
          ],
          "variables": [
            "col"
          ],
          "start_line": 514,
          "end_line": 524
        },
        {
          "name": "move_cursor_to_column",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "int"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "WindowsCoordinates",
            "SetConsoleCursorPosition"
          ],
          "variables": [],
          "start_line": 526,
          "end_line": 533
        },
        {
          "name": "move_cursor_backward",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "WindowsCoordinates",
            "SetConsoleCursorPosition"
          ],
          "variables": [
            "col"
          ],
          "start_line": 535,
          "end_line": 545
        },
        {
          "name": "hide_cursor",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "SetConsoleCursorInfo",
            "self._get_cursor_size",
            "CONSOLE_CURSOR_INFO"
          ],
          "variables": [
            "current_cursor_size",
            "invisible_cursor"
          ],
          "start_line": 547,
          "end_line": 551
        },
        {
          "name": "show_cursor",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "SetConsoleCursorInfo",
            "self._get_cursor_size",
            "CONSOLE_CURSOR_INFO"
          ],
          "variables": [
            "current_cursor_size",
            "visible_cursor"
          ],
          "start_line": 553,
          "end_line": 557
        },
        {
          "name": "set_title",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "str"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "len",
            "SetConsoleTitle"
          ],
          "variables": [],
          "start_line": 559,
          "end_line": 566
        },
        {
          "name": "_get_cursor_size",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "int",
          "docstring": null,
          "calls": [
            "GetConsoleCursorInfo",
            "int",
            "CONSOLE_CURSOR_INFO"
          ],
          "variables": [
            "cursor_info"
          ],
          "start_line": 568,
          "end_line": 572
        }
      ],
      "variables": [
        "windll",
        "windll",
        "STDOUT",
        "ENABLE_VIRTUAL_TERMINAL_PROCESSING",
        "COORD",
        "row",
        "col",
        "_fields_",
        "_fields_",
        "_GetStdHandle",
        "_GetConsoleMode",
        "console_mode",
        "success",
        "_FillConsoleOutputCharacterW",
        "character",
        "num_characters",
        "num_written",
        "_FillConsoleOutputAttribute",
        "num_cells",
        "style_attrs",
        "num_written",
        "_SetConsoleTextAttribute",
        "_GetConsoleScreenBufferInfo",
        "console_screen_buffer_info",
        "_SetConsoleCursorPosition",
        "_GetConsoleCursorInfo",
        "_SetConsoleCursorInfo",
        "_SetConsoleTitle",
        "BRIGHT_BIT",
        "ANSI_TO_WINDOWS",
        "handle",
        "default_text",
        "coord",
        "screen_size",
        "color",
        "bgcolor",
        "fore",
        "fore",
        "fore",
        "fore",
        "fore",
        "fore",
        "back",
        "back",
        "back",
        "back",
        "screen_size",
        "cursor_position",
        "cells_to_erase",
        "start_coordinates",
        "cursor_position",
        "cells_to_erase",
        "start",
        "cursor_position",
        "cursor_position",
        "col",
        "col",
        "current_cursor_size",
        "invisible_cursor",
        "current_cursor_size",
        "visible_cursor",
        "cursor_info",
        "handle",
        "console",
        "term",
        "style",
        "heading"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\rich\\_windows.py",
      "imports": [
        "import sys",
        "from dataclasses import dataclass",
        "import ctypes",
        "from ctypes import LibraryLoader",
        "from rich._win32_console import (\n        ENABLE_VIRTUAL_TERMINAL_PROCESSING,\n        GetConsoleMode,\n        GetStdHandle,\n        LegacyWindowsError,\n    )",
        "import platform",
        "from rich import print"
      ],
      "classes": [
        {
          "name": "WindowsConsoleFeatures",
          "base_classes": null,
          "docstring": null,
          "methods": []
        }
      ],
      "functions": [
        {
          "name": "get_windows_console_features",
          "parameters": [],
          "return_type": "WindowsConsoleFeatures",
          "docstring": null,
          "calls": [
            "WindowsConsoleFeatures"
          ],
          "variables": [
            "features"
          ],
          "start_line": 34,
          "end_line": 36
        },
        {
          "name": "get_windows_console_features",
          "parameters": [],
          "return_type": "WindowsConsoleFeatures",
          "docstring": null,
          "calls": [
            "GetConsoleMode",
            "bool",
            "sys.getwindowsversion",
            "WindowsConsoleFeatures",
            "GetStdHandle"
          ],
          "variables": [
            "handle",
            "console_mode",
            "success",
            "console_mode",
            "success",
            "vt",
            "truecolor",
            "win_version",
            "truecolor",
            "features"
          ],
          "start_line": 40,
          "end_line": 61
        }
      ],
      "variables": [
        "vt",
        "truecolor",
        "windll",
        "windll",
        "features",
        "handle",
        "console_mode",
        "success",
        "console_mode",
        "success",
        "vt",
        "truecolor",
        "win_version",
        "truecolor",
        "features",
        "features"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\rich\\_windows_renderer.py",
      "imports": [
        "from typing import Iterable, Sequence, Tuple, cast",
        "from rich._win32_console import LegacyWindowsTerm, WindowsCoordinates",
        "from rich.segment import ControlCode, ControlType, Segment"
      ],
      "classes": [],
      "functions": [
        {
          "name": "legacy_windows_render",
          "parameters": [
            {
              "name": null,
              "type": "Iterable[Segment]"
            },
            {
              "name": null,
              "type": "LegacyWindowsTerm"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "term.move_cursor_to",
            "term.write_text",
            "term.hide_cursor",
            "term.show_cursor",
            "term.erase_start_of_line",
            "term.move_cursor_forward",
            "term.move_cursor_down",
            "term.erase_end_of_line",
            "term.erase_line",
            "term.write_styled",
            "WindowsCoordinates",
            "cast",
            "term.move_cursor_to_column",
            "term.move_cursor_up",
            "term.move_cursor_backward",
            "term.set_title"
          ],
          "variables": [
            "control_codes",
            "control_type"
          ],
          "start_line": 7,
          "end_line": 56
        }
      ],
      "variables": [
        "control_codes",
        "control_type"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\rich\\_wrap.py",
      "imports": [
        "import re",
        "from typing import Iterable",
        "from ._loop import loop_last",
        "from .cells import cell_len, chop_cells",
        "from .console import Console"
      ],
      "classes": [],
      "functions": [
        {
          "name": "words",
          "parameters": [
            {
              "name": null,
              "type": "str"
            }
          ],
          "return_type": "Iterable[tuple[int, int, str]]",
          "docstring": null,
          "calls": [
            "word_match.group",
            "re_word.match",
            "word_match.span"
          ],
          "variables": [
            "position",
            "word_match",
            "word",
            "word_match"
          ],
          "start_line": 12,
          "end_line": 23
        },
        {
          "name": "divide_line",
          "parameters": [
            {
              "name": null,
              "type": "str"
            },
            {
              "name": null,
              "type": "int"
            }
          ],
          "return_type": "list[int]",
          "docstring": null,
          "calls": [
            "len",
            "word.rstrip",
            "append",
            "chop_cells",
            "_cell_len",
            "loop_last",
            "words"
          ],
          "variables": [
            "break_positions",
            "append",
            "cell_offset",
            "_cell_len",
            "word_length",
            "remaining_space",
            "word_fits_remaining_space",
            "folded_word",
            "cell_offset",
            "cell_offset",
            "cell_offset"
          ],
          "start_line": 26,
          "end_line": 78
        }
      ],
      "variables": [
        "re_word",
        "position",
        "word_match",
        "word",
        "word_match",
        "break_positions",
        "append",
        "cell_offset",
        "_cell_len",
        "word_length",
        "remaining_space",
        "word_fits_remaining_space",
        "folded_word",
        "cell_offset",
        "cell_offset",
        "cell_offset",
        "console",
        "console"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\rich\\__init__.py",
      "imports": [
        "import os",
        "from typing import IO, TYPE_CHECKING, Any, Callable, Optional, Union",
        "from ._extension import load_ipython_extension",
        "from .console import Console",
        "from .console import Console",
        "from rich.console import Console",
        "from .console import Console",
        "from rich._inspect import Inspect"
      ],
      "classes": [],
      "functions": [
        {
          "name": "get_console",
          "parameters": [],
          "return_type": "\"Console\"",
          "docstring": null,
          "calls": [
            "Console"
          ],
          "variables": [
            "_console"
          ],
          "start_line": 23,
          "end_line": 36
        },
        {
          "name": "reconfigure",
          "parameters": [
            {
              "name": null,
              "type": "Any"
            },
            {
              "name": null,
              "type": "Any"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "Console",
            "get_console"
          ],
          "variables": [
            "new_console",
            "_console"
          ],
          "start_line": 39,
          "end_line": 50
        },
        {
          "name": "print",
          "parameters": [
            {
              "name": null,
              "type": "Any"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "Console",
            "write_console.print",
            "get_console"
          ],
          "variables": [
            "write_console"
          ],
          "start_line": 53,
          "end_line": 74
        },
        {
          "name": "print_json",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "get_console().print_json",
            "get_console"
          ],
          "variables": [],
          "start_line": 77,
          "end_line": 117
        },
        {
          "name": "inspect",
          "parameters": [
            {
              "name": null,
              "type": "Any"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "_console.print",
            "get_console",
            "Inspect"
          ],
          "variables": [
            "_console",
            "is_inspect",
            "_inspect"
          ],
          "start_line": 120,
          "end_line": 173
        }
      ],
      "variables": [
        "__all__",
        "_console",
        "_IMPORT_CWD",
        "_IMPORT_CWD",
        "_console",
        "new_console",
        "_console",
        "write_console",
        "_console",
        "is_inspect",
        "_inspect"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\rich\\__main__.py",
      "imports": [
        "import colorsys",
        "import io",
        "from time import process_time",
        "from rich import box",
        "from rich.color import Color",
        "from rich.console import Console, ConsoleOptions, Group, RenderableType, RenderResult",
        "from rich.markdown import Markdown",
        "from rich.measure import Measurement",
        "from rich.pretty import Pretty",
        "from rich.segment import Segment",
        "from rich.style import Style",
        "from rich.syntax import Syntax",
        "from rich.table import Table",
        "from rich.text import Text",
        "from rich.panel import Panel"
      ],
      "classes": [
        {
          "name": "ColorBox",
          "base_classes": null,
          "docstring": null,
          "methods": []
        }
      ],
      "functions": [
        {
          "name": "__rich_console__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "Console"
            },
            {
              "name": null,
              "type": "ConsoleOptions"
            }
          ],
          "return_type": "RenderResult",
          "docstring": null,
          "calls": [
            "Color.from_rgb",
            "colorsys.hls_to_rgb",
            "Segment.line",
            "range",
            "Segment",
            "Style"
          ],
          "variables": [
            "h",
            "l",
            "bgcolor",
            "color"
          ],
          "start_line": 19,
          "end_line": 31
        },
        {
          "name": "__rich_measure__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "\"Console\""
            },
            {
              "name": null,
              "type": "ConsoleOptions"
            }
          ],
          "return_type": "Measurement",
          "docstring": null,
          "calls": [
            "Measurement"
          ],
          "variables": [],
          "start_line": 33,
          "end_line": 36
        },
        {
          "name": "make_test_card",
          "parameters": [],
          "return_type": "Table",
          "docstring": null,
          "calls": [
            "Text.from_markup",
            "Table.grid",
            "lorem_table.add_row",
            "example_table.add_row",
            "Syntax",
            "table.add_row",
            "example_table.add_column",
            "Table",
            "Pretty",
            "comparison",
            "ColorBox",
            "color_table.add_row",
            "Text",
            "Markdown",
            "table.add_column",
            "Group"
          ],
          "variables": [
            "table",
            "color_table",
            "lorem",
            "lorem_table",
            "table",
            "markup_example",
            "example_table",
            "code",
            "pretty_data",
            "markdown_example"
          ],
          "start_line": 39,
          "end_line": 206
        },
        {
          "name": "comparison",
          "parameters": [
            {
              "name": null,
              "type": "RenderableType"
            },
            {
              "name": null,
              "type": "RenderableType"
            }
          ],
          "return_type": "Table",
          "docstring": null,
          "calls": [
            "table.add_row",
            "table.add_column",
            "Table"
          ],
          "variables": [
            "table"
          ],
          "start_line": 90,
          "end_line": 95
        }
      ],
      "variables": [
        "h",
        "l",
        "bgcolor",
        "color",
        "table",
        "color_table",
        "lorem",
        "lorem_table",
        "table",
        "markup_example",
        "example_table",
        "code",
        "pretty_data",
        "markdown_example",
        "console",
        "test_card",
        "start",
        "pre_cache_taken",
        "start",
        "taken",
        "c",
        "console"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\tests\\conftest.py",
      "imports": [
        "import pytest"
      ],
      "classes": [],
      "functions": [
        {
          "name": "reset_color_envvars",
          "parameters": [
            {
              "name": "monkeypatch",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "monkeypatch.delenv"
          ],
          "variables": [],
          "start_line": 5,
          "end_line": 8
        }
      ],
      "variables": []
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\tests\\render.py",
      "imports": [
        "import io",
        "import re",
        "from rich.console import Console, RenderableType"
      ],
      "classes": [],
      "functions": [
        {
          "name": "replace_link_ids",
          "parameters": [
            {
              "name": null,
              "type": "str"
            }
          ],
          "return_type": "str",
          "docstring": null,
          "calls": [
            "re_link_ids.sub"
          ],
          "variables": [],
          "start_line": 10,
          "end_line": 15
        },
        {
          "name": "render",
          "parameters": [
            {
              "name": null,
              "type": "RenderableType"
            }
          ],
          "return_type": "str",
          "docstring": null,
          "calls": [
            "console.print",
            "console.file.getvalue",
            "Console",
            "replace_link_ids",
            "io.StringIO"
          ],
          "variables": [
            "console",
            "output"
          ],
          "start_line": 18,
          "end_line": 24
        }
      ],
      "variables": [
        "re_link_ids",
        "console",
        "output"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\tests\\test_align.py",
      "imports": [
        "import io",
        "import pytest",
        "from rich.console import Console",
        "from rich.align import Align, VerticalCenter",
        "from rich.measure import Measurement"
      ],
      "classes": [],
      "functions": [
        {
          "name": "test_bad_align_legal",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "pytest.raises",
            "Align"
          ],
          "variables": [],
          "start_line": 10,
          "end_line": 26
        },
        {
          "name": "test_repr",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "repr",
            "Align"
          ],
          "variables": [],
          "start_line": 29,
          "end_line": 32
        },
        {
          "name": "test_align_left",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "console.print",
            "console.file.getvalue",
            "Console",
            "Align",
            "io.StringIO"
          ],
          "variables": [
            "console"
          ],
          "start_line": 35,
          "end_line": 38
        },
        {
          "name": "test_align_center",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "console.print",
            "console.file.getvalue",
            "Console",
            "Align",
            "io.StringIO"
          ],
          "variables": [
            "console"
          ],
          "start_line": 41,
          "end_line": 44
        },
        {
          "name": "test_align_right",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "console.print",
            "console.file.getvalue",
            "Console",
            "Align",
            "io.StringIO"
          ],
          "variables": [
            "console"
          ],
          "start_line": 47,
          "end_line": 50
        },
        {
          "name": "test_align_top",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "repr",
            "console.print",
            "console.file.getvalue",
            "Console",
            "Align",
            "print",
            "io.StringIO"
          ],
          "variables": [
            "console",
            "expected",
            "result"
          ],
          "start_line": 53,
          "end_line": 59
        },
        {
          "name": "test_align_middle",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "repr",
            "console.print",
            "console.file.getvalue",
            "Console",
            "Align",
            "print",
            "io.StringIO"
          ],
          "variables": [
            "console",
            "expected",
            "result"
          ],
          "start_line": 62,
          "end_line": 68
        },
        {
          "name": "test_align_bottom",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "repr",
            "console.print",
            "console.file.getvalue",
            "Console",
            "Align",
            "print",
            "io.StringIO"
          ],
          "variables": [
            "console",
            "expected",
            "result"
          ],
          "start_line": 71,
          "end_line": 77
        },
        {
          "name": "test_align_center_middle",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "repr",
            "console.print",
            "console.file.getvalue",
            "Console",
            "Align",
            "print",
            "io.StringIO"
          ],
          "variables": [
            "console",
            "expected",
            "result"
          ],
          "start_line": 80,
          "end_line": 86
        },
        {
          "name": "test_align_fit",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "console.print",
            "console.file.getvalue",
            "Console",
            "Align",
            "io.StringIO"
          ],
          "variables": [
            "console"
          ],
          "start_line": 89,
          "end_line": 92
        },
        {
          "name": "test_align_right_style",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "console.print",
            "console.file.getvalue",
            "Console",
            "Align",
            "io.StringIO"
          ],
          "variables": [
            "console"
          ],
          "start_line": 95,
          "end_line": 104
        },
        {
          "name": "test_measure",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Console",
            "Measurement.get",
            "Align",
            "io.StringIO"
          ],
          "variables": [
            "console"
          ],
          "start_line": 107,
          "end_line": 111
        },
        {
          "name": "test_align_no_pad",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "console.print",
            "console.file.getvalue",
            "Console",
            "Align",
            "io.StringIO"
          ],
          "variables": [
            "console"
          ],
          "start_line": 114,
          "end_line": 118
        },
        {
          "name": "test_align_width",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "console.print",
            "console.file.getvalue",
            "Console",
            "Align",
            "io.StringIO"
          ],
          "variables": [
            "console",
            "words",
            "result",
            "expected"
          ],
          "start_line": 121,
          "end_line": 127
        },
        {
          "name": "test_shortcuts",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Align.left",
            "Align.right",
            "Align.center"
          ],
          "variables": [],
          "start_line": 130,
          "end_line": 136
        },
        {
          "name": "test_vertical_center",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "repr",
            "Measurement",
            "console.print",
            "VerticalCenter",
            "console.begin_capture",
            "Console",
            "console.end_capture",
            "Measurement.get",
            "print"
          ],
          "variables": [
            "console",
            "vertical_center",
            "result",
            "expected"
          ],
          "start_line": 139,
          "end_line": 151
        }
      ],
      "variables": [
        "console",
        "console",
        "console",
        "console",
        "expected",
        "result",
        "console",
        "expected",
        "result",
        "console",
        "expected",
        "result",
        "console",
        "expected",
        "result",
        "console",
        "console",
        "console",
        "console",
        "console",
        "words",
        "result",
        "expected",
        "console",
        "vertical_center",
        "result",
        "expected"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\tests\\test_ansi.py",
      "imports": [
        "import pytest",
        "from rich.ansi import AnsiDecoder",
        "from rich.console import Console",
        "from rich.style import Style",
        "from rich.text import Span, Text"
      ],
      "classes": [],
      "functions": [
        {
          "name": "test_decode",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Style.parse",
            "console.print",
            "AnsiDecoder",
            "console.end_capture",
            "Console",
            "console.begin_capture",
            "list",
            "decoder.decode",
            "Text",
            "Span"
          ],
          "variables": [
            "console",
            "terminal_codes",
            "decoder",
            "lines",
            "expected"
          ],
          "start_line": 9,
          "end_line": 32
        },
        {
          "name": "test_decode_example",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "console.capture",
            "repr",
            "console.print",
            "Text.from_ansi",
            "Console",
            "print",
            "ansi_bytes.decode",
            "capture.get"
          ],
          "variables": [
            "ansi_bytes",
            "ansi_text",
            "text",
            "console",
            "result",
            "expected"
          ],
          "start_line": 35,
          "end_line": 49
        },
        {
          "name": "test_decode_issue_2688",
          "parameters": [
            {
              "name": "ansi_bytes",
              "type": null
            },
            {
              "name": "expected_text",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "ansi_bytes.decode",
            "Text.from_ansi",
            "str"
          ],
          "variables": [
            "text"
          ],
          "start_line": 67,
          "end_line": 70
        },
        {
          "name": "test_strip_private_escape_sequences",
          "parameters": [
            {
              "name": "code",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "console.capture",
            "console.print",
            "Text.from_ansi",
            "Console",
            "capture.get"
          ],
          "variables": [
            "text",
            "console",
            "expected"
          ],
          "start_line": 74,
          "end_line": 84
        }
      ],
      "variables": [
        "console",
        "terminal_codes",
        "decoder",
        "lines",
        "expected",
        "ansi_bytes",
        "ansi_text",
        "text",
        "console",
        "result",
        "expected",
        "text",
        "text",
        "console",
        "expected"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\tests\\test_bar.py",
      "imports": [
        "from rich.console import Console",
        "from rich.progress_bar import ProgressBar",
        "from rich.segment import Segment",
        "from rich.style import Style",
        "from .render import render"
      ],
      "classes": [],
      "functions": [
        {
          "name": "test_init",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "repr",
            "ProgressBar"
          ],
          "variables": [
            "bar"
          ],
          "start_line": 9,
          "end_line": 12
        },
        {
          "name": "test_update",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "bar.update",
            "ProgressBar"
          ],
          "variables": [
            "bar"
          ],
          "start_line": 15,
          "end_line": 24
        },
        {
          "name": "test_render",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "render",
            "bar.update",
            "ProgressBar"
          ],
          "variables": [
            "bar",
            "bar_render",
            "bar_render"
          ],
          "start_line": 33,
          "end_line": 39
        },
        {
          "name": "test_measure",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Console",
            "bar.__rich_measure__",
            "ProgressBar"
          ],
          "variables": [
            "console",
            "bar",
            "measurement"
          ],
          "start_line": 42,
          "end_line": 47
        },
        {
          "name": "test_zero_total",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "render",
            "ProgressBar"
          ],
          "variables": [
            "bar"
          ],
          "start_line": 50,
          "end_line": 53
        },
        {
          "name": "test_pulse",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "repr",
            "render",
            "print",
            "ProgressBar"
          ],
          "variables": [
            "bar",
            "bar_render",
            "expected"
          ],
          "start_line": 56,
          "end_line": 61
        },
        {
          "name": "test_get_pulse_segments",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "repr",
            "Style.parse",
            "bar._get_pulse_segments",
            "Segment",
            "ProgressBar",
            "print"
          ],
          "variables": [
            "bar",
            "segments",
            "expected"
          ],
          "start_line": 64,
          "end_line": 92
        }
      ],
      "variables": [
        "bar",
        "bar",
        "expected",
        "bar",
        "bar_render",
        "bar_render",
        "console",
        "bar",
        "measurement",
        "bar",
        "bar",
        "bar_render",
        "expected",
        "bar",
        "segments",
        "expected",
        "bar",
        "bar_render",
        "bar_render"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\tests\\test_block_bar.py",
      "imports": [
        "from rich.bar import Bar",
        "from rich.console import Console",
        "from .render import render"
      ],
      "classes": [],
      "functions": [
        {
          "name": "test_repr",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "repr",
            "Bar"
          ],
          "variables": [
            "bar"
          ],
          "start_line": 14,
          "end_line": 16
        },
        {
          "name": "test_render",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "render",
            "Bar"
          ],
          "variables": [
            "bar",
            "bar_render",
            "bar",
            "bar_render",
            "bar",
            "bar_render"
          ],
          "start_line": 19,
          "end_line": 29
        },
        {
          "name": "test_measure",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Console",
            "bar.__rich_measure__",
            "Bar"
          ],
          "variables": [
            "console",
            "bar",
            "measurement"
          ],
          "start_line": 32,
          "end_line": 37
        },
        {
          "name": "test_zero_total",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "render",
            "Bar"
          ],
          "variables": [
            "bar"
          ],
          "start_line": 40,
          "end_line": 43
        }
      ],
      "variables": [
        "expected",
        "bar",
        "bar",
        "bar_render",
        "bar",
        "bar_render",
        "bar",
        "bar_render",
        "console",
        "bar",
        "measurement",
        "bar",
        "bar",
        "bar_render",
        "bar",
        "bar_render",
        "bar",
        "bar_render"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\tests\\test_box.py",
      "imports": [
        "import pytest",
        "from rich.console import ConsoleOptions, ConsoleDimensions",
        "from rich.box import (\n    ASCII,\n    DOUBLE,\n    ROUNDED,\n    HEAVY,\n    SQUARE,\n    MINIMAL_HEAVY_HEAD,\n    MINIMAL,\n    SIMPLE_HEAVY,\n    SIMPLE,\n    HEAVY_EDGE,\n    HEAVY_HEAD,\n)"
      ],
      "classes": [],
      "functions": [
        {
          "name": "test_str",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "str"
          ],
          "variables": [],
          "start_line": 19,
          "end_line": 20
        },
        {
          "name": "test_repr",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "repr"
          ],
          "variables": [],
          "start_line": 23,
          "end_line": 24
        },
        {
          "name": "test_get_top",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "HEAVY.get_top"
          ],
          "variables": [
            "top"
          ],
          "start_line": 27,
          "end_line": 29
        },
        {
          "name": "test_get_row",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "ROUNDED.get_row",
            "ASCII.get_row",
            "pytest.raises",
            "DOUBLE.get_row"
          ],
          "variables": [
            "head_row",
            "row",
            "foot_row"
          ],
          "start_line": 32,
          "end_line": 43
        },
        {
          "name": "test_get_bottom",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "HEAVY.get_bottom"
          ],
          "variables": [
            "bottom"
          ],
          "start_line": 46,
          "end_line": 48
        },
        {
          "name": "test_box_substitute_for_same_box",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "HEAVY.substitute",
            "ConsoleOptions",
            "MINIMAL_HEAVY_HEAD.substitute",
            "ConsoleDimensions",
            "ROUNDED.substitute",
            "SIMPLE_HEAVY.substitute",
            "HEAVY_HEAD.substitute",
            "HEAVY_EDGE.substitute"
          ],
          "variables": [
            "options"
          ],
          "start_line": 51,
          "end_line": 67
        },
        {
          "name": "test_box_substitute_for_different_box_legacy_windows",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "HEAVY.substitute",
            "ConsoleOptions",
            "MINIMAL_HEAVY_HEAD.substitute",
            "ConsoleDimensions",
            "ROUNDED.substitute",
            "SIMPLE_HEAVY.substitute",
            "HEAVY_HEAD.substitute",
            "HEAVY_EDGE.substitute"
          ],
          "variables": [
            "options"
          ],
          "start_line": 70,
          "end_line": 86
        },
        {
          "name": "test_box_substitute_for_different_box_ascii_encoding",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "HEAVY.substitute",
            "ConsoleOptions",
            "MINIMAL_HEAVY_HEAD.substitute",
            "ConsoleDimensions",
            "ROUNDED.substitute",
            "SIMPLE_HEAVY.substitute",
            "HEAVY_HEAD.substitute",
            "HEAVY_EDGE.substitute"
          ],
          "variables": [
            "options"
          ],
          "start_line": 89,
          "end_line": 105
        }
      ],
      "variables": [
        "top",
        "head_row",
        "row",
        "foot_row",
        "bottom",
        "options",
        "options",
        "options"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\tests\\test_card.py",
      "imports": [
        "import io",
        "import re",
        "from rich.__main__ import make_test_card",
        "from rich.console import Console, RenderableType",
        "from ._card_render import expected"
      ],
      "classes": [],
      "functions": [
        {
          "name": "replace_link_ids",
          "parameters": [
            {
              "name": null,
              "type": "str"
            }
          ],
          "return_type": "str",
          "docstring": null,
          "calls": [
            "re_link_ids.sub"
          ],
          "variables": [],
          "start_line": 12,
          "end_line": 17
        },
        {
          "name": "render",
          "parameters": [
            {
              "name": null,
              "type": "RenderableType"
            }
          ],
          "return_type": "str",
          "docstring": null,
          "calls": [
            "console.print",
            "console.file.getvalue",
            "Console",
            "replace_link_ids",
            "io.StringIO"
          ],
          "variables": [
            "console",
            "output"
          ],
          "start_line": 20,
          "end_line": 26
        },
        {
          "name": "test_card_render",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "repr",
            "render",
            "print",
            "make_test_card"
          ],
          "variables": [
            "card",
            "result"
          ],
          "start_line": 29,
          "end_line": 33
        }
      ],
      "variables": [
        "re_link_ids",
        "console",
        "output",
        "card",
        "result",
        "card",
        "card_render"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\tests\\test_cells.py",
      "imports": [
        "import string",
        "from rich import cells",
        "from rich.cells import _is_single_cell_widths, chop_cells"
      ],
      "classes": [],
      "functions": [
        {
          "name": "test_cell_len_long_string",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "cells.cell_len"
          ],
          "variables": [],
          "start_line": 7,
          "end_line": 11
        },
        {
          "name": "test_cell_len_short_string",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "cells.cell_len"
          ],
          "variables": [],
          "start_line": 14,
          "end_line": 18
        },
        {
          "name": "test_set_cell_size",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "cells.set_cell_size"
          ],
          "variables": [],
          "start_line": 21,
          "end_line": 33
        },
        {
          "name": "test_set_cell_size_infinite",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "range",
            "cells.cell_len",
            "cells.set_cell_size"
          ],
          "variables": [],
          "start_line": 36,
          "end_line": 45
        },
        {
          "name": "test_chop_cells",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "chop_cells"
          ],
          "variables": [
            "text"
          ],
          "start_line": 48,
          "end_line": 51
        },
        {
          "name": "test_chop_cells_double_width_boundary",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "chop_cells"
          ],
          "variables": [
            "text"
          ],
          "start_line": 54,
          "end_line": 57
        },
        {
          "name": "test_chop_cells_mixed_width",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "chop_cells"
          ],
          "variables": [
            "text"
          ],
          "start_line": 60,
          "end_line": 63
        },
        {
          "name": "test_is_single_cell_widths",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "ord",
            "_is_single_cell_widths"
          ],
          "variables": [
            "BOX"
          ],
          "start_line": 66,
          "end_line": 81
        }
      ],
      "variables": [
        "text",
        "text",
        "text",
        "BOX"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\tests\\test_color.py",
      "imports": [
        "from rich.color import (\n    blend_rgb,\n    parse_rgb_hex,\n    Color,\n    ColorParseError,\n    ColorSystem,\n    ColorType,\n    ColorTriplet,\n)",
        "from rich.style import Style",
        "from rich.text import Text, Span",
        "import pytest"
      ],
      "classes": [],
      "functions": [
        {
          "name": "test_str",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "Color.parse",
            "str"
          ],
          "variables": [],
          "start_line": 16,
          "end_line": 17
        },
        {
          "name": "test_repr",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "repr",
            "Color.parse"
          ],
          "variables": [],
          "start_line": 20,
          "end_line": 21
        },
        {
          "name": "test_color_system_repr",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "repr"
          ],
          "variables": [],
          "start_line": 24,
          "end_line": 25
        },
        {
          "name": "test_rich",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "repr",
            "color.__rich__",
            "Color.parse",
            "Text",
            "Span",
            "Style",
            "print"
          ],
          "variables": [
            "color",
            "as_text"
          ],
          "start_line": 28,
          "end_line": 35
        },
        {
          "name": "test_system",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "Color.parse"
          ],
          "variables": [],
          "start_line": 38,
          "end_line": 41
        },
        {
          "name": "test_windows",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "Color",
            "Color(\"red\", ColorType.WINDOWS, number=1).get_ansi_codes"
          ],
          "variables": [],
          "start_line": 44,
          "end_line": 45
        },
        {
          "name": "test_truecolor",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "Color(\"red\", ColorType.WINDOWS, number=1).get_truecolor",
            "Color",
            "Color.parse(\"color(1)\").get_truecolor",
            "Color.parse",
            "Color.parse(\"default\").get_truecolor",
            "Color.parse(\"#ff0000\").get_truecolor",
            "Color.parse(\"color(17)\").get_truecolor",
            "Color.parse(\"red\").get_truecolor",
            "ColorTriplet"
          ],
          "variables": [],
          "start_line": 48,
          "end_line": 59
        },
        {
          "name": "test_parse_success",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "Color",
            "Color.parse",
            "ColorTriplet"
          ],
          "variables": [],
          "start_line": 62,
          "end_line": 75
        },
        {
          "name": "test_from_triplet",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "Color",
            "ColorTriplet",
            "Color.from_triplet"
          ],
          "variables": [],
          "start_line": 78,
          "end_line": 81
        },
        {
          "name": "test_from_rgb",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "Color.from_rgb",
            "Color",
            "ColorTriplet"
          ],
          "variables": [],
          "start_line": 84,
          "end_line": 87
        },
        {
          "name": "test_from_ansi",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "Color.from_ansi",
            "Color"
          ],
          "variables": [],
          "start_line": 90,
          "end_line": 91
        },
        {
          "name": "test_default",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "Color.default",
            "Color"
          ],
          "variables": [],
          "start_line": 94,
          "end_line": 95
        },
        {
          "name": "test_parse_error",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "pytest.raises",
            "Color.parse"
          ],
          "variables": [],
          "start_line": 98,
          "end_line": 112
        },
        {
          "name": "test_get_ansi_codes",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "Color.parse(\"color(1)\").get_ansi_codes",
            "Color.parse",
            "Color.parse(\"default\").get_ansi_codes",
            "Color.parse(\"red\").get_ansi_codes",
            "Color.parse(\"#ff0000\").get_ansi_codes"
          ],
          "variables": [],
          "start_line": 115,
          "end_line": 123
        },
        {
          "name": "test_downgrade",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "Color.parse(\"#404142\").downgrade",
            "Color.parse(\"#000000\").downgrade",
            "Color",
            "Color.parse",
            "Color.parse(\"#ffffff\").downgrade",
            "Color.parse(\"#00ff00\").downgrade",
            "Color.parse(\"red\").downgrade",
            "Color.parse(\"#ff0000\").downgrade",
            "Color.parse(\"color(9)\").downgrade",
            "Color.parse(\"bright_red\").downgrade",
            "Color.parse(\"color(20)\").downgrade",
            "Color.parse(\"color(255)\").downgrade"
          ],
          "variables": [],
          "start_line": 126,
          "end_line": 177
        },
        {
          "name": "test_parse_rgb_hex",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "parse_rgb_hex",
            "ColorTriplet"
          ],
          "variables": [],
          "start_line": 180,
          "end_line": 181
        },
        {
          "name": "test_blend_rgb",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "blend_rgb",
            "ColorTriplet"
          ],
          "variables": [],
          "start_line": 184,
          "end_line": 187
        }
      ],
      "variables": [
        "color",
        "as_text"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\tests\\test_color_triplet.py",
      "imports": [
        "from rich.color_triplet import ColorTriplet"
      ],
      "classes": [],
      "functions": [
        {
          "name": "test_hex",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "ColorTriplet"
          ],
          "variables": [],
          "start_line": 4,
          "end_line": 6
        },
        {
          "name": "test_rgb",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "ColorTriplet"
          ],
          "variables": [],
          "start_line": 9,
          "end_line": 11
        },
        {
          "name": "test_normalized",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "ColorTriplet"
          ],
          "variables": [],
          "start_line": 14,
          "end_line": 16
        }
      ],
      "variables": []
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\tests\\test_columns.py",
      "imports": [
        "import io",
        "from rich.columns import Columns",
        "from rich.console import Console"
      ],
      "classes": [],
      "functions": [
        {
          "name": "render",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "columns.add_renderable",
            "console.print",
            "console.rule",
            "console.file.getvalue",
            "Columns",
            "Console",
            "io.StringIO"
          ],
          "variables": [
            "console",
            "empty_columns",
            "columns",
            "render_result"
          ],
          "start_line": 31,
          "end_line": 61
        },
        {
          "name": "test_render",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "render"
          ],
          "variables": [
            "expected"
          ],
          "start_line": 64,
          "end_line": 66
        }
      ],
      "variables": [
        "COLUMN_DATA",
        "console",
        "empty_columns",
        "columns",
        "render_result",
        "expected",
        "result"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\tests\\test_columns_align.py",
      "imports": [
        "import io",
        "from rich import box",
        "from rich.columns import Columns",
        "from rich.console import Console",
        "from rich.panel import Panel"
      ],
      "classes": [],
      "functions": [
        {
          "name": "render",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Panel.fit",
            "console.print",
            "console.rule",
            "console.file.getvalue",
            "Columns",
            "Console",
            "io.StringIO"
          ],
          "variables": [
            "console",
            "panel",
            "columns"
          ],
          "start_line": 11,
          "end_line": 31
        },
        {
          "name": "test_align",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "render"
          ],
          "variables": [
            "result",
            "expected"
          ],
          "start_line": 34,
          "end_line": 37
        }
      ],
      "variables": [
        "console",
        "panel",
        "columns",
        "result",
        "expected",
        "rendered"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\tests\\test_console.py",
      "imports": [
        "import datetime",
        "import io",
        "import os",
        "import subprocess",
        "import sys",
        "import tempfile",
        "from typing import Optional, Tuple, Type, Union",
        "from unittest import mock",
        "import pytest",
        "from rich import errors",
        "from rich._null_file import NullFile",
        "from rich.color import ColorSystem",
        "from rich.console import (\n    CaptureError,\n    Console,\n    ConsoleDimensions,\n    ConsoleOptions,\n    ScreenUpdate,\n    group,\n)",
        "from rich.control import Control",
        "from rich.measure import measure_renderables",
        "from rich.padding import Padding",
        "from rich.pager import SystemPager",
        "from rich.panel import Panel",
        "from rich.region import Region",
        "from rich.segment import Segment",
        "from rich.status import Status",
        "from rich.style import Style",
        "from rich.text import Text",
        "import rich.console"
      ],
      "classes": [
        {
          "name": "BrokenRenderable",
          "base_classes": null,
          "docstring": null,
          "methods": []
        },
        {
          "name": "Panels",
          "base_classes": null,
          "docstring": null,
          "methods": []
        },
        {
          "name": "FakeTTY",
          "base_classes": null,
          "docstring": null,
          "methods": []
        },
        {
          "name": "FakeFile",
          "base_classes": null,
          "docstring": null,
          "methods": []
        }
      ],
      "functions": [
        {
          "name": "test_dumb_terminal",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "Console"
          ],
          "variables": [
            "console",
            "console"
          ],
          "start_line": 37,
          "end_line": 45
        },
        {
          "name": "test_soft_wrap",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "Console",
            "console.file.getvalue",
            "console.print",
            "io.StringIO"
          ],
          "variables": [
            "console"
          ],
          "start_line": 48,
          "end_line": 51
        },
        {
          "name": "test_16color_terminal",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "Console"
          ],
          "variables": [
            "console"
          ],
          "start_line": 55,
          "end_line": 59
        },
        {
          "name": "test_truecolor_terminal",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "Console"
          ],
          "variables": [
            "console"
          ],
          "start_line": 63,
          "end_line": 69
        },
        {
          "name": "test_kitty_terminal",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "Console"
          ],
          "variables": [
            "console"
          ],
          "start_line": 73,
          "end_line": 79
        },
        {
          "name": "test_console_options_update",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "ConsoleDimensions",
            "ConsoleOptions",
            "options.update"
          ],
          "variables": [
            "options",
            "options1",
            "options2",
            "options_copy"
          ],
          "start_line": 82,
          "end_line": 103
        },
        {
          "name": "test_console_options_update_height",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "ConsoleDimensions",
            "ConsoleOptions",
            "options.update_height"
          ],
          "variables": [
            "options",
            "render_options"
          ],
          "start_line": 106,
          "end_line": 120
        },
        {
          "name": "test_init",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "Console"
          ],
          "variables": [
            "console",
            "console",
            "console"
          ],
          "start_line": 123,
          "end_line": 128
        },
        {
          "name": "test_size",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "Console"
          ],
          "variables": [
            "console",
            "console"
          ],
          "start_line": 131,
          "end_line": 138
        },
        {
          "name": "test_size_can_fall_back_to_std_descriptors",
          "parameters": [
            {
              "name": null,
              "type": "mock.MagicMock"
            },
            {
              "name": null,
              "type": "bool"
            },
            {
              "name": null,
              "type": "Union[Tuple[int, int], Type[ValueError]]"
            },
            {
              "name": null,
              "type": "Union[Tuple[int, int], Type[ValueError]]"
            },
            {
              "name": null,
              "type": "Union[Tuple[int, int], Type[ValueError]]"
            },
            {
              "name": null,
              "type": "Union[Tuple[int, int], Type[ValueError]]"
            },
            {
              "name": null,
              "type": "Tuple[int, int]"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "sys.__stdout__.fileno",
            "sys.__stderr__.fileno",
            "sys.__stdin__.fileno",
            "mock.patch",
            "Console"
          ],
          "variables": [
            "value",
            "console"
          ],
          "start_line": 155,
          "end_line": 180
        },
        {
          "name": "get_terminal_size_mock_impl",
          "parameters": [],
          "return_type": "Tuple[int, int]",
          "docstring": null,
          "calls": [
            "sys.__stdout__.fileno",
            "sys.__stderr__.fileno",
            "sys.__stdin__.fileno"
          ],
          "variables": [
            "value"
          ],
          "start_line": 164,
          "end_line": 173
        },
        {
          "name": "test_repr",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "Console",
            "isinstance",
            "repr",
            "str"
          ],
          "variables": [
            "console"
          ],
          "start_line": 183,
          "end_line": 186
        },
        {
          "name": "test_print",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "Console",
            "console.file.getvalue",
            "console.print",
            "io.StringIO"
          ],
          "variables": [
            "console"
          ],
          "start_line": 189,
          "end_line": 192
        },
        {
          "name": "test_print_multiple",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "Console",
            "console.file.getvalue",
            "console.print",
            "io.StringIO"
          ],
          "variables": [
            "console"
          ],
          "start_line": 195,
          "end_line": 198
        },
        {
          "name": "test_print_text",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "console.print",
            "console.file.getvalue",
            "Console",
            "Text",
            "io.StringIO"
          ],
          "variables": [
            "console"
          ],
          "start_line": 201,
          "end_line": 204
        },
        {
          "name": "test_print_text_multiple",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "console.print",
            "console.file.getvalue",
            "Console",
            "Text",
            "io.StringIO"
          ],
          "variables": [
            "console"
          ],
          "start_line": 207,
          "end_line": 210
        },
        {
          "name": "test_print_json",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "repr",
            "console.print_json",
            "console.file.getvalue",
            "Console",
            "print",
            "io.StringIO"
          ],
          "variables": [
            "console",
            "result",
            "expected"
          ],
          "start_line": 213,
          "end_line": 219
        },
        {
          "name": "test_print_json_error",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "Console",
            "pytest.raises",
            "console.print_json",
            "io.StringIO"
          ],
          "variables": [
            "console"
          ],
          "start_line": 222,
          "end_line": 225
        },
        {
          "name": "test_print_json_data",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "repr",
            "console.print_json",
            "console.file.getvalue",
            "Console",
            "print",
            "io.StringIO"
          ],
          "variables": [
            "console",
            "result",
            "expected"
          ],
          "start_line": 228,
          "end_line": 234
        },
        {
          "name": "test_print_json_ensure_ascii",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "repr",
            "console.print_json",
            "console.file.getvalue",
            "Console",
            "print",
            "io.StringIO"
          ],
          "variables": [
            "console",
            "result",
            "expected"
          ],
          "start_line": 237,
          "end_line": 243
        },
        {
          "name": "test_print_json_with_default_ensure_ascii",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "repr",
            "console.print_json",
            "console.file.getvalue",
            "Console",
            "print",
            "io.StringIO"
          ],
          "variables": [
            "console",
            "result",
            "expected"
          ],
          "start_line": 246,
          "end_line": 252
        },
        {
          "name": "test_print_json_indent_none",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "Console",
            "console.file.getvalue",
            "console.print_json",
            "io.StringIO"
          ],
          "variables": [
            "console",
            "data",
            "result",
            "expected"
          ],
          "start_line": 255,
          "end_line": 261
        },
        {
          "name": "test_console_null_file",
          "parameters": [
            {
              "name": "monkeypatch",
              "type": null
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "Console",
            "monkeypatch.setattr",
            "isinstance"
          ],
          "variables": [
            "console"
          ],
          "start_line": 264,
          "end_line": 270
        },
        {
          "name": "test_log",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "repr",
            "console.file.getvalue",
            "console.log",
            "Console",
            "print",
            "io.StringIO"
          ],
          "variables": [
            "console",
            "expected",
            "result"
          ],
          "start_line": 273,
          "end_line": 286
        },
        {
          "name": "test_log_milliseconds",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "console.file.getvalue",
            "console.log",
            "Console",
            "Text",
            "io.StringIO"
          ],
          "variables": [
            "console",
            "result"
          ],
          "start_line": 289,
          "end_line": 298
        },
        {
          "name": "time_formatter",
          "parameters": [
            {
              "name": null,
              "type": "datetime"
            }
          ],
          "return_type": "Text",
          "docstring": null,
          "calls": [
            "Text"
          ],
          "variables": [],
          "start_line": 290,
          "end_line": 291
        },
        {
          "name": "test_print_empty",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "Console",
            "console.file.getvalue",
            "console.print",
            "io.StringIO"
          ],
          "variables": [
            "console"
          ],
          "start_line": 301,
          "end_line": 304
        },
        {
          "name": "test_markup_highlight",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "Console",
            "console.file.getvalue",
            "console.print",
            "io.StringIO"
          ],
          "variables": [
            "console"
          ],
          "start_line": 307,
          "end_line": 313
        },
        {
          "name": "test_print_style",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "Console",
            "console.file.getvalue",
            "console.print",
            "io.StringIO"
          ],
          "variables": [
            "console"
          ],
          "start_line": 316,
          "end_line": 319
        },
        {
          "name": "test_show_cursor",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "console.show_cursor",
            "console.print",
            "console.file.getvalue",
            "Console",
            "io.StringIO"
          ],
          "variables": [
            "console"
          ],
          "start_line": 322,
          "end_line": 329
        },
        {
          "name": "test_clear",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "Console",
            "console.file.getvalue",
            "console.clear",
            "io.StringIO"
          ],
          "variables": [
            "console"
          ],
          "start_line": 332,
          "end_line": 336
        },
        {
          "name": "test_clear_no_terminal",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "Console",
            "console.file.getvalue",
            "console.clear",
            "io.StringIO"
          ],
          "variables": [
            "console"
          ],
          "start_line": 339,
          "end_line": 343
        },
        {
          "name": "test_get_style",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "Console",
            "Style",
            "console.get_style"
          ],
          "variables": [
            "console"
          ],
          "start_line": 346,
          "end_line": 348
        },
        {
          "name": "test_get_style_default",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "Console",
            "Style",
            "console.get_style"
          ],
          "variables": [
            "console"
          ],
          "start_line": 351,
          "end_line": 353
        },
        {
          "name": "test_get_style_error",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "Console",
            "pytest.raises",
            "console.get_style"
          ],
          "variables": [
            "console"
          ],
          "start_line": 356,
          "end_line": 361
        },
        {
          "name": "test_render_error",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "Console",
            "pytest.raises",
            "list",
            "console.render"
          ],
          "variables": [
            "console"
          ],
          "start_line": 364,
          "end_line": 367
        },
        {
          "name": "test_control",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "console.control",
            "console.print",
            "console.file.getvalue",
            "Console",
            "Control.clear",
            "io.StringIO"
          ],
          "variables": [
            "console"
          ],
          "start_line": 370,
          "end_line": 374
        },
        {
          "name": "test_capture",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "console.capture",
            "console.print",
            "Console",
            "pytest.raises",
            "capture.get"
          ],
          "variables": [
            "console"
          ],
          "start_line": 377,
          "end_line": 383
        },
        {
          "name": "test_input",
          "parameters": [
            {
              "name": "monkeypatch",
              "type": null
            },
            {
              "name": "capsys",
              "type": null
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "capsys.readouterr",
            "monkeypatch.setattr",
            "Console",
            "console.file.write",
            "console.input"
          ],
          "variables": [
            "console",
            "user_input"
          ],
          "start_line": 386,
          "end_line": 395
        },
        {
          "name": "fake_input",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "console.file.write"
          ],
          "variables": [],
          "start_line": 387,
          "end_line": 389
        },
        {
          "name": "test_input_password",
          "parameters": [
            {
              "name": "monkeypatch",
              "type": null
            },
            {
              "name": "capsys",
              "type": null
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "capsys.readouterr",
            "monkeypatch.setattr",
            "Console",
            "console.file.write",
            "console.input"
          ],
          "variables": [
            "console",
            "user_input"
          ],
          "start_line": 398,
          "end_line": 409
        },
        {
          "name": "fake_input",
          "parameters": [
            {
              "name": "prompt",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "console.file.write"
          ],
          "variables": [],
          "start_line": 399,
          "end_line": 401
        },
        {
          "name": "test_status",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "Console",
            "console.status",
            "isinstance",
            "io.StringIO"
          ],
          "variables": [
            "console",
            "status"
          ],
          "start_line": 412,
          "end_line": 415
        },
        {
          "name": "test_justify_none",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "Console",
            "console.file.getvalue",
            "console.print",
            "io.StringIO"
          ],
          "variables": [
            "console"
          ],
          "start_line": 418,
          "end_line": 421
        },
        {
          "name": "test_justify_left",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "Console",
            "console.file.getvalue",
            "console.print",
            "io.StringIO"
          ],
          "variables": [
            "console"
          ],
          "start_line": 424,
          "end_line": 427
        },
        {
          "name": "test_justify_center",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "Console",
            "console.file.getvalue",
            "console.print",
            "io.StringIO"
          ],
          "variables": [
            "console"
          ],
          "start_line": 430,
          "end_line": 433
        },
        {
          "name": "test_justify_right",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "Console",
            "console.file.getvalue",
            "console.print",
            "io.StringIO"
          ],
          "variables": [
            "console"
          ],
          "start_line": 436,
          "end_line": 439
        },
        {
          "name": "test_justify_renderable_none",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "console.print",
            "console.file.getvalue",
            "Console",
            "Panel",
            "io.StringIO"
          ],
          "variables": [
            "console"
          ],
          "start_line": 442,
          "end_line": 451
        },
        {
          "name": "test_justify_renderable_left",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "console.print",
            "console.file.getvalue",
            "Console",
            "Panel",
            "io.StringIO"
          ],
          "variables": [
            "console"
          ],
          "start_line": 454,
          "end_line": 463
        },
        {
          "name": "test_justify_renderable_center",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "console.print",
            "console.file.getvalue",
            "Console",
            "Panel",
            "io.StringIO"
          ],
          "variables": [
            "console"
          ],
          "start_line": 466,
          "end_line": 475
        },
        {
          "name": "test_justify_renderable_right",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "console.print",
            "console.file.getvalue",
            "Console",
            "Panel",
            "io.StringIO"
          ],
          "variables": [
            "console"
          ],
          "start_line": 478,
          "end_line": 490
        },
        {
          "name": "__rich_console__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "console",
              "type": null
            },
            {
              "name": "options",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 494,
          "end_line": 495
        },
        {
          "name": "test_render_broken_renderable",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "BrokenRenderable",
            "Console",
            "list",
            "console.render",
            "pytest.raises"
          ],
          "variables": [
            "console",
            "broken"
          ],
          "start_line": 498,
          "end_line": 502
        },
        {
          "name": "test_export_text",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "Console",
            "console.export_text",
            "console.print"
          ],
          "variables": [
            "console",
            "text",
            "expected"
          ],
          "start_line": 505,
          "end_line": 510
        },
        {
          "name": "test_export_html",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "repr",
            "console.print",
            "Console",
            "console.export_html",
            "print"
          ],
          "variables": [
            "console",
            "html",
            "expected"
          ],
          "start_line": 513,
          "end_line": 519
        },
        {
          "name": "test_export_html_inline",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "repr",
            "console.print",
            "Console",
            "console.export_html",
            "print"
          ],
          "variables": [
            "console",
            "html",
            "expected"
          ],
          "start_line": 522,
          "end_line": 528
        },
        {
          "name": "test_export_svg",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "repr",
            "console.print",
            "Console",
            "console.export_svg",
            "print"
          ],
          "variables": [
            "console",
            "svg"
          ],
          "start_line": 534,
          "end_line": 542
        },
        {
          "name": "test_export_svg_specified_unique_id",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "repr",
            "console.print",
            "EXPECTED_SVG.replace",
            "Console",
            "console.export_svg",
            "print"
          ],
          "variables": [
            "expected_svg",
            "console",
            "svg"
          ],
          "start_line": 545,
          "end_line": 554
        },
        {
          "name": "test_save_svg",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "tempfile.TemporaryDirectory",
            "console.print",
            "Console",
            "svg_file.read",
            "open",
            "os.path.join",
            "console.save_svg"
          ],
          "variables": [
            "console",
            "export_path"
          ],
          "start_line": 557,
          "end_line": 566
        },
        {
          "name": "test_save_text",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "tempfile.TemporaryDirectory",
            "text_file.read",
            "console.print",
            "Console",
            "console.save_text",
            "open",
            "os.path.join"
          ],
          "variables": [
            "console",
            "export_path"
          ],
          "start_line": 569,
          "end_line": 576
        },
        {
          "name": "test_save_html",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "tempfile.TemporaryDirectory",
            "repr",
            "console.print",
            "Console",
            "console.save_html",
            "html_file.read",
            "open",
            "os.path.join",
            "print"
          ],
          "variables": [
            "expected",
            "console",
            "export_path",
            "html"
          ],
          "start_line": 579,
          "end_line": 589
        },
        {
          "name": "test_no_wrap",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "Console",
            "console.file.getvalue",
            "console.print",
            "io.StringIO"
          ],
          "variables": [
            "console"
          ],
          "start_line": 592,
          "end_line": 595
        },
        {
          "name": "test_soft_wrap",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "Console",
            "console.file.getvalue",
            "console.print",
            "io.StringIO"
          ],
          "variables": [
            "console"
          ],
          "start_line": 598,
          "end_line": 601
        },
        {
          "name": "test_unicode_error",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "Console",
            "tempfile.TemporaryFile",
            "str",
            "console.print"
          ],
          "variables": [
            "console"
          ],
          "start_line": 604,
          "end_line": 612
        },
        {
          "name": "test_bell",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "Console",
            "console.end_capture",
            "console.bell",
            "console.begin_capture"
          ],
          "variables": [
            "console"
          ],
          "start_line": 615,
          "end_line": 619
        },
        {
          "name": "test_pager",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "Console",
            "console.pager",
            "console.print",
            "SystemPager"
          ],
          "variables": [
            "console",
            "pager_content",
            "pager_content",
            "pager"
          ],
          "start_line": 622,
          "end_line": 641
        },
        {
          "name": "mock_pager",
          "parameters": [
            {
              "name": null,
              "type": "str"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [],
          "variables": [
            "pager_content"
          ],
          "start_line": 627,
          "end_line": 629
        },
        {
          "name": "test_out",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "Console",
            "console.out",
            "console.end_capture",
            "console.begin_capture"
          ],
          "variables": [
            "console"
          ],
          "start_line": 644,
          "end_line": 648
        },
        {
          "name": "test_render_group",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "group",
            "measure_renderables",
            "range",
            "Console",
            "renderable"
          ],
          "variables": [
            "renderables",
            "console"
          ],
          "start_line": 651,
          "end_line": 662
        },
        {
          "name": "renderable",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 653,
          "end_line": 657
        },
        {
          "name": "test_render_group_fit",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "group",
            "measure_renderables",
            "range",
            "Console",
            "renderable"
          ],
          "variables": [
            "renderables",
            "console"
          ],
          "start_line": 665,
          "end_line": 678
        },
        {
          "name": "renderable",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 667,
          "end_line": 671
        },
        {
          "name": "test_get_time",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "Console",
            "console.get_time",
            "console.get_datetime",
            "datetime.datetime"
          ],
          "variables": [
            "console"
          ],
          "start_line": 681,
          "end_line": 686
        },
        {
          "name": "test_console_style",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "Console",
            "console.file.getvalue",
            "console.print",
            "io.StringIO"
          ],
          "variables": [
            "console",
            "expected",
            "result"
          ],
          "start_line": 689,
          "end_line": 696
        },
        {
          "name": "test_no_color",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "repr",
            "console.print",
            "console.file.getvalue",
            "Console",
            "print",
            "io.StringIO"
          ],
          "variables": [
            "console",
            "expected",
            "result"
          ],
          "start_line": 699,
          "end_line": 707
        },
        {
          "name": "test_quiet",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "Console",
            "console.file.getvalue",
            "console.print",
            "io.StringIO"
          ],
          "variables": [
            "console"
          ],
          "start_line": 710,
          "end_line": 713
        },
        {
          "name": "test_screen",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "console.capture",
            "repr",
            "console.print",
            "console.screen",
            "Console",
            "capture.get",
            "print"
          ],
          "variables": [
            "console",
            "expected",
            "result"
          ],
          "start_line": 717,
          "end_line": 727
        },
        {
          "name": "test_screen_update",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "console.capture",
            "repr",
            "console.screen",
            "Console",
            "screen.update",
            "capture.get",
            "print"
          ],
          "variables": [
            "console",
            "result",
            "expected"
          ],
          "start_line": 731,
          "end_line": 743
        },
        {
          "name": "test_height",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "Console"
          ],
          "variables": [
            "console"
          ],
          "start_line": 746,
          "end_line": 748
        },
        {
          "name": "test_columns_env",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "Console"
          ],
          "variables": [
            "console",
            "console",
            "console"
          ],
          "start_line": 751,
          "end_line": 758
        },
        {
          "name": "test_lines_env",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "Console"
          ],
          "variables": [
            "console",
            "console",
            "console"
          ],
          "start_line": 761,
          "end_line": 768
        },
        {
          "name": "test_screen_update_class",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "repr",
            "console.print",
            "console.begin_capture",
            "Console",
            "console.end_capture",
            "Segment",
            "ScreenUpdate",
            "print"
          ],
          "variables": [
            "screen_update",
            "console",
            "result",
            "expected"
          ],
          "start_line": 771,
          "end_line": 782
        },
        {
          "name": "test_is_alt_screen",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "Console",
            "console.screen"
          ],
          "variables": [
            "console"
          ],
          "start_line": 785,
          "end_line": 792
        },
        {
          "name": "test_set_console_title",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "Console",
            "console.capture",
            "captured.get",
            "console.set_window_title"
          ],
          "variables": [
            "console",
            "result"
          ],
          "start_line": 795,
          "end_line": 804
        },
        {
          "name": "test_update_screen",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "repr",
            "console.update_screen",
            "console.screen",
            "console.begin_capture",
            "Console",
            "console.end_capture",
            "Region",
            "pytest.raises",
            "print"
          ],
          "variables": [
            "console",
            "result",
            "expected"
          ],
          "start_line": 807,
          "end_line": 820
        },
        {
          "name": "test_update_screen_lines",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "Console",
            "pytest.raises",
            "console.update_screen_lines"
          ],
          "variables": [
            "console"
          ],
          "start_line": 823,
          "end_line": 828
        },
        {
          "name": "test_update_options_markup",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "Console",
            "options.update"
          ],
          "variables": [
            "console",
            "options"
          ],
          "start_line": 831,
          "end_line": 835
        },
        {
          "name": "test_print_width_zero",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "Console",
            "console.capture",
            "capture.get",
            "console.print"
          ],
          "variables": [
            "console"
          ],
          "start_line": 838,
          "end_line": 842
        },
        {
          "name": "test_size_properties",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "Console",
            "ConsoleDimensions"
          ],
          "variables": [
            "console"
          ],
          "start_line": 845,
          "end_line": 853
        },
        {
          "name": "test_print_newline_start",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "Console",
            "console.end_capture",
            "console.print",
            "console.begin_capture"
          ],
          "variables": [
            "console",
            "result"
          ],
          "start_line": 856,
          "end_line": 863
        },
        {
          "name": "test_is_terminal_broken_file",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "Console",
            "ValueError"
          ],
          "variables": [
            "console"
          ],
          "start_line": 866,
          "end_line": 874
        },
        {
          "name": "_mock_isatty",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "ValueError"
          ],
          "variables": [],
          "start_line": 869,
          "end_line": 870
        },
        {
          "name": "test_detect_color_system",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "Console",
            "console._detect_color_system"
          ],
          "variables": [
            "console"
          ],
          "start_line": 878,
          "end_line": 880
        },
        {
          "name": "test_reset_height",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "console.capture",
            "Panels",
            "repr",
            "console.print",
            "Console",
            "Panel",
            "capture.get",
            "print"
          ],
          "variables": [
            "console",
            "result",
            "expected"
          ],
          "start_line": 883,
          "end_line": 906
        },
        {
          "name": "__rich_console__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "console",
              "type": null
            },
            {
              "name": "options",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Panel"
          ],
          "variables": [],
          "start_line": 888,
          "end_line": 890
        },
        {
          "name": "test_render_lines_height_minus_vertical_pad_is_negative",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "Console",
            "console.options.update_height",
            "console.render_lines",
            "Padding"
          ],
          "variables": [
            "console",
            "options"
          ],
          "start_line": 909,
          "end_line": 921
        },
        {
          "name": "test_recording_no_stdout_and_no_stderr_files",
          "parameters": [
            {
              "name": "monkeypatch",
              "type": null
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "Console",
            "monkeypatch.setattr",
            "console.export_text",
            "console.print"
          ],
          "variables": [
            "console",
            "text"
          ],
          "start_line": 924,
          "end_line": 934
        },
        {
          "name": "test_capturing_no_stdout_and_no_stderr_files",
          "parameters": [
            {
              "name": "monkeypatch",
              "type": null
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "console.capture",
            "console.print",
            "monkeypatch.setattr",
            "Console",
            "capture.get"
          ],
          "variables": [
            "console"
          ],
          "start_line": 937,
          "end_line": 943
        },
        {
          "name": "test_force_color",
          "parameters": [
            {
              "name": "env_value",
              "type": null
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "Console",
            "io.StringIO"
          ],
          "variables": [
            "console"
          ],
          "start_line": 947,
          "end_line": 951
        },
        {
          "name": "test_force_color_jupyter",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "Console",
            "io.StringIO"
          ],
          "variables": [
            "console"
          ],
          "start_line": 954,
          "end_line": 959
        },
        {
          "name": "test_force_color",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "Console",
            "io.StringIO"
          ],
          "variables": [
            "console"
          ],
          "start_line": 962,
          "end_line": 971
        },
        {
          "name": "test_reenable_highlighting",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "repr",
            "console.print",
            "console.file.getvalue",
            "Console",
            "print",
            "output.splitlines",
            "io.StringIO"
          ],
          "variables": [
            "console",
            "output",
            "lines"
          ],
          "start_line": 974,
          "end_line": 997
        },
        {
          "name": "test_brokenpipeerror",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "proc1.stdout.close",
            "subprocess.Popen",
            "proc1.wait",
            "proc2.communicate",
            "\"python -m rich\".split",
            "proc2.wait",
            "subprocess.run",
            "\"head -1\".split"
          ],
          "variables": [
            "rich_cmd",
            "check",
            "head_cmd",
            "proc1",
            "proc2"
          ],
          "start_line": 1001,
          "end_line": 1017
        },
        {
          "name": "test_capture_and_record",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "console.capture",
            "console.export_text",
            "repr",
            "console.print",
            "Console",
            "capture.get",
            "print"
          ],
          "variables": [
            "console",
            "capture_content",
            "recorded_content"
          ],
          "start_line": 1020,
          "end_line": 1038
        },
        {
          "name": "test_tty_interactive",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "Console",
            "io.BytesIO"
          ],
          "variables": [
            "console",
            "console",
            "console",
            "console",
            "console"
          ],
          "start_line": 1041,
          "end_line": 1063
        },
        {
          "name": "test_tty_compatible",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "Console",
            "FakeFile",
            "FakeTTY"
          ],
          "variables": [
            "console",
            "console",
            "console",
            "console",
            "console",
            "console"
          ],
          "start_line": 1066,
          "end_line": 1129
        },
        {
          "name": "__init__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 1072,
          "end_line": 1073
        },
        {
          "name": "isatty",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "bool",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 1075,
          "end_line": 1077
        },
        {
          "name": "__init__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 1082,
          "end_line": 1083
        },
        {
          "name": "isatty",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "bool",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 1085,
          "end_line": 1087
        }
      ],
      "variables": [
        "console",
        "console",
        "console",
        "console",
        "console",
        "console",
        "options",
        "options1",
        "options2",
        "options_copy",
        "options",
        "render_options",
        "console",
        "console",
        "console",
        "console",
        "console",
        "value",
        "console",
        "console",
        "console",
        "console",
        "console",
        "console",
        "console",
        "result",
        "expected",
        "console",
        "console",
        "result",
        "expected",
        "console",
        "result",
        "expected",
        "console",
        "result",
        "expected",
        "console",
        "data",
        "result",
        "expected",
        "console",
        "console",
        "expected",
        "result",
        "console",
        "result",
        "console",
        "console",
        "console",
        "console",
        "console",
        "console",
        "console",
        "console",
        "console",
        "console",
        "console",
        "console",
        "console",
        "user_input",
        "console",
        "user_input",
        "console",
        "status",
        "console",
        "console",
        "console",
        "console",
        "console",
        "console",
        "console",
        "console",
        "console",
        "broken",
        "console",
        "text",
        "expected",
        "console",
        "html",
        "expected",
        "console",
        "html",
        "expected",
        "EXPECTED_SVG",
        "console",
        "svg",
        "expected_svg",
        "console",
        "svg",
        "console",
        "export_path",
        "console",
        "export_path",
        "expected",
        "console",
        "export_path",
        "html",
        "console",
        "console",
        "console",
        "console",
        "console",
        "pager_content",
        "pager_content",
        "pager",
        "console",
        "renderables",
        "console",
        "renderables",
        "console",
        "console",
        "console",
        "expected",
        "result",
        "console",
        "expected",
        "result",
        "console",
        "console",
        "expected",
        "result",
        "console",
        "result",
        "expected",
        "console",
        "console",
        "console",
        "console",
        "console",
        "console",
        "console",
        "screen_update",
        "console",
        "result",
        "expected",
        "console",
        "console",
        "result",
        "console",
        "result",
        "expected",
        "console",
        "console",
        "options",
        "console",
        "console",
        "console",
        "result",
        "console",
        "console",
        "console",
        "result",
        "expected",
        "console",
        "options",
        "console",
        "text",
        "console",
        "console",
        "console",
        "console",
        "console",
        "output",
        "lines",
        "rich_cmd",
        "check",
        "head_cmd",
        "proc1",
        "proc2",
        "console",
        "capture_content",
        "recorded_content",
        "console",
        "console",
        "console",
        "console",
        "console",
        "console",
        "console",
        "console",
        "console",
        "console",
        "console"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\tests\\test_constrain.py",
      "imports": [
        "from rich.console import Console",
        "from rich.constrain import Constrain",
        "from rich.text import Text"
      ],
      "classes": [],
      "functions": [
        {
          "name": "test_width_of_none",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Constrain",
            "constrain.__rich_measure__",
            "Console",
            "Text",
            "console.options.update_width"
          ],
          "variables": [
            "console",
            "constrain"
          ],
          "start_line": 6,
          "end_line": 13
        }
      ],
      "variables": [
        "console",
        "constrain"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\tests\\test_containers.py",
      "imports": [
        "from rich.console import Console",
        "from rich.containers import Lines, Renderables",
        "from rich.text import Span, Text",
        "from rich.style import Style"
      ],
      "classes": [],
      "functions": [
        {
          "name": "test_renderables_measure",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Console",
            "list",
            "renderables.__rich_measure__",
            "Text",
            "Renderables"
          ],
          "variables": [
            "console",
            "text",
            "renderables",
            "result"
          ],
          "start_line": 7,
          "end_line": 17
        },
        {
          "name": "test_renderables_empty",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Console",
            "Renderables",
            "renderables.__rich_measure__"
          ],
          "variables": [
            "console",
            "renderables",
            "result"
          ],
          "start_line": 20,
          "end_line": 27
        },
        {
          "name": "test_lines_rich_console",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "lines.__rich_console__",
            "Console",
            "list",
            "Text",
            "Lines"
          ],
          "variables": [
            "console",
            "lines",
            "result"
          ],
          "start_line": 30,
          "end_line": 35
        },
        {
          "name": "test_lines_justify",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "lines2.justify",
            "repr",
            "Style.parse",
            "Console",
            "Text",
            "Lines",
            "Span",
            "lines1.justify",
            "print"
          ],
          "variables": [
            "console",
            "lines1",
            "lines2"
          ],
          "start_line": 38,
          "end_line": 57
        }
      ],
      "variables": [
        "console",
        "text",
        "renderables",
        "result",
        "console",
        "renderables",
        "result",
        "console",
        "lines",
        "result",
        "console",
        "lines1",
        "lines2"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\tests\\test_control.py",
      "imports": [
        "from rich.control import Control, escape_control_codes, strip_control_codes",
        "from rich.segment import ControlType, Segment"
      ],
      "classes": [],
      "functions": [
        {
          "name": "test_control",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Control",
            "str"
          ],
          "variables": [
            "control"
          ],
          "start_line": 5,
          "end_line": 7
        },
        {
          "name": "test_strip_control_codes",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "strip_control_codes"
          ],
          "variables": [],
          "start_line": 10,
          "end_line": 13
        },
        {
          "name": "test_escape_control_codes",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "escape_control_codes"
          ],
          "variables": [],
          "start_line": 16,
          "end_line": 19
        },
        {
          "name": "test_control_move_to",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Control.move_to",
            "Segment",
            "print"
          ],
          "variables": [
            "control"
          ],
          "start_line": 22,
          "end_line": 27
        },
        {
          "name": "test_control_move",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Control.move",
            "repr",
            "Segment",
            "print"
          ],
          "variables": [
            "control"
          ],
          "start_line": 30,
          "end_line": 38
        },
        {
          "name": "test_move_to_column",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Segment",
            "repr",
            "Control.move_to_column",
            "print"
          ],
          "variables": [],
          "start_line": 41,
          "end_line": 53
        },
        {
          "name": "test_title",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Segment",
            "Control.title"
          ],
          "variables": [
            "control_segment"
          ],
          "start_line": 56,
          "end_line": 62
        }
      ],
      "variables": [
        "control",
        "control",
        "control",
        "control_segment"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\tests\\test_emoji.py",
      "imports": [
        "import pytest",
        "from rich.emoji import Emoji, NoEmoji",
        "from .render import render"
      ],
      "classes": [],
      "functions": [
        {
          "name": "test_no_emoji",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "pytest.raises",
            "Emoji"
          ],
          "variables": [],
          "start_line": 8,
          "end_line": 10
        },
        {
          "name": "test_str_repr",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "repr",
            "str",
            "Emoji"
          ],
          "variables": [],
          "start_line": 13,
          "end_line": 15
        },
        {
          "name": "test_replace",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Emoji.replace"
          ],
          "variables": [],
          "start_line": 18,
          "end_line": 19
        },
        {
          "name": "test_render",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "render",
            "Emoji"
          ],
          "variables": [
            "render_result"
          ],
          "start_line": 22,
          "end_line": 24
        },
        {
          "name": "test_variant",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "repr",
            "Emoji.replace",
            "print"
          ],
          "variables": [],
          "start_line": 27,
          "end_line": 32
        },
        {
          "name": "test_variant_non_default",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "render",
            "Emoji"
          ],
          "variables": [
            "render_result"
          ],
          "start_line": 35,
          "end_line": 37
        }
      ],
      "variables": [
        "render_result",
        "render_result"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\tests\\test_filesize.py",
      "imports": [
        "from rich import filesize"
      ],
      "classes": [],
      "functions": [
        {
          "name": "test_traditional",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "filesize.decimal"
          ],
          "variables": [],
          "start_line": 4,
          "end_line": 14
        },
        {
          "name": "test_pick_unit_and_suffix",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "filesize.pick_unit_and_suffix"
          ],
          "variables": [
            "units"
          ],
          "start_line": 17,
          "end_line": 20
        }
      ],
      "variables": [
        "units"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\tests\\test_file_proxy.py",
      "imports": [
        "import io",
        "import sys",
        "import pytest",
        "from rich.console import Console",
        "from rich.file_proxy import FileProxy"
      ],
      "classes": [],
      "functions": [
        {
          "name": "test_empty_bytes",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Console",
            "pytest.raises",
            "file_proxy.write",
            "FileProxy"
          ],
          "variables": [
            "console",
            "file_proxy"
          ],
          "start_line": 10,
          "end_line": 17
        },
        {
          "name": "test_flush",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "file.getvalue",
            "file_proxy.write",
            "FileProxy",
            "Console",
            "file_proxy.flush",
            "io.StringIO"
          ],
          "variables": [
            "file",
            "console",
            "file_proxy"
          ],
          "start_line": 20,
          "end_line": 27
        },
        {
          "name": "test_new_lines",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "file.getvalue",
            "file_proxy.write",
            "FileProxy",
            "Console",
            "file_proxy.flush",
            "io.StringIO"
          ],
          "variables": [
            "file",
            "console",
            "file_proxy"
          ],
          "start_line": 30,
          "end_line": 37
        }
      ],
      "variables": [
        "console",
        "file_proxy",
        "file",
        "console",
        "file_proxy",
        "file",
        "console",
        "file_proxy"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\tests\\test_getfileno.py",
      "imports": [
        "from rich._fileno import get_fileno"
      ],
      "classes": [
        {
          "name": "FileLike",
          "base_classes": null,
          "docstring": null,
          "methods": []
        },
        {
          "name": "FileLike",
          "base_classes": null,
          "docstring": null,
          "methods": []
        },
        {
          "name": "FileLike",
          "base_classes": null,
          "docstring": null,
          "methods": []
        }
      ],
      "functions": [
        {
          "name": "test_get_fileno",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "FileLike",
            "get_fileno"
          ],
          "variables": [],
          "start_line": 4,
          "end_line": 9
        },
        {
          "name": "fileno",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "int",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 6,
          "end_line": 7
        },
        {
          "name": "test_get_fileno_missing",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "FileLike",
            "get_fileno"
          ],
          "variables": [],
          "start_line": 12,
          "end_line": 16
        },
        {
          "name": "test_get_fileno_broken",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "FileLike",
            "get_fileno"
          ],
          "variables": [],
          "start_line": 19,
          "end_line": 25
        },
        {
          "name": "fileno",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "int",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 21,
          "end_line": 23
        }
      ],
      "variables": []
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\tests\\test_highlighter.py",
      "imports": [
        "import json",
        "from typing import List",
        "import pytest",
        "from rich.highlighter import (\n    ISO8601Highlighter,\n    JSONHighlighter,\n    NullHighlighter,\n    ReprHighlighter,\n)",
        "from rich.text import Span, Text"
      ],
      "classes": [],
      "functions": [
        {
          "name": "test_wrong_type",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "highlighter",
            "NullHighlighter",
            "pytest.raises"
          ],
          "variables": [
            "highlighter"
          ],
          "start_line": 16,
          "end_line": 19
        },
        {
          "name": "test_highlight_regex",
          "parameters": [
            {
              "name": null,
              "type": "str"
            },
            {
              "name": null,
              "type": "List[Span]"
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "print",
            "ReprHighlighter",
            "highlighter.highlight",
            "Text"
          ],
          "variables": [
            "text",
            "highlighter"
          ],
          "start_line": 161,
          "end_line": 167
        },
        {
          "name": "test_highlight_json_with_indent",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "json.dumps",
            "JSONHighlighter",
            "highlighter.highlight",
            "Text",
            "Span"
          ],
          "variables": [
            "json_string",
            "text",
            "highlighter"
          ],
          "start_line": 170,
          "end_line": 184
        },
        {
          "name": "test_highlight_json_string_only",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Span",
            "JSONHighlighter",
            "Text",
            "highlighter.highlight"
          ],
          "variables": [
            "json_string",
            "text",
            "highlighter"
          ],
          "start_line": 187,
          "end_line": 192
        },
        {
          "name": "test_highlight_json_empty_string_only",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Span",
            "JSONHighlighter",
            "Text",
            "highlighter.highlight"
          ],
          "variables": [
            "json_string",
            "text",
            "highlighter"
          ],
          "start_line": 195,
          "end_line": 200
        },
        {
          "name": "test_highlight_json_no_indent",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "json.dumps",
            "JSONHighlighter",
            "highlighter.highlight",
            "Text",
            "Span"
          ],
          "variables": [
            "json_string",
            "text",
            "highlighter"
          ],
          "start_line": 203,
          "end_line": 217
        },
        {
          "name": "test_highlight_iso8601_regex",
          "parameters": [
            {
              "name": null,
              "type": "str"
            },
            {
              "name": null,
              "type": "List[Span]"
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "print",
            "ISO8601Highlighter",
            "highlighter.highlight",
            "Text"
          ],
          "variables": [
            "text",
            "highlighter"
          ],
          "start_line": 457,
          "end_line": 463
        }
      ],
      "variables": [
        "highlighter",
        "highlight_tests",
        "text",
        "highlighter",
        "json_string",
        "text",
        "highlighter",
        "json_string",
        "text",
        "highlighter",
        "json_string",
        "text",
        "highlighter",
        "json_string",
        "text",
        "highlighter",
        "iso8601_highlight_tests",
        "text",
        "highlighter"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\tests\\test_inspect.py",
      "imports": [
        "import io",
        "import sys",
        "from types import ModuleType",
        "from typing import Sequence, Type",
        "import pytest",
        "from rich import inspect",
        "from rich._inspect import (\n    get_object_types_mro,\n    get_object_types_mro_as_strings,\n    is_object_one_of_types,\n)",
        "from rich.console import Console"
      ],
      "classes": [
        {
          "name": "InspectError",
          "base_classes": "(Exception)",
          "docstring": null,
          "methods": []
        },
        {
          "name": "Foo",
          "base_classes": null,
          "docstring": null,
          "methods": []
        },
        {
          "name": "FooSubclass",
          "base_classes": "(Foo)",
          "docstring": null,
          "methods": []
        },
        {
          "name": "NotCallable",
          "base_classes": null,
          "docstring": null,
          "methods": []
        },
        {
          "name": "Foo",
          "base_classes": null,
          "docstring": null,
          "methods": []
        },
        {
          "name": "Thing",
          "base_classes": null,
          "docstring": null,
          "methods": []
        },
        {
          "name": "Thing",
          "base_classes": null,
          "docstring": null,
          "methods": []
        },
        {
          "name": "Something",
          "base_classes": null,
          "docstring": null,
          "methods": []
        },
        {
          "name": "Thing",
          "base_classes": null,
          "docstring": null,
          "methods": []
        }
      ],
      "functions": [
        {
          "name": "render",
          "parameters": [
            {
              "name": "obj",
              "type": null
            }
          ],
          "return_type": "str",
          "docstring": null,
          "calls": [
            "Console",
            "inspect",
            "console.file.getvalue",
            "io.StringIO"
          ],
          "variables": [
            "console"
          ],
          "start_line": 58,
          "end_line": 61
        },
        {
          "name": "__str__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "str",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 65,
          "end_line": 66
        },
        {
          "name": "__init__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "int"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 75,
          "end_line": 77
        },
        {
          "name": "broken",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "InspectError"
          ],
          "variables": [],
          "start_line": 80,
          "end_line": 81
        },
        {
          "name": "method",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "a",
              "type": null
            },
            {
              "name": "b",
              "type": null
            }
          ],
          "return_type": "str",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 83,
          "end_line": 88
        },
        {
          "name": "__dir__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 90,
          "end_line": 91
        },
        {
          "name": "test_render",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "repr",
            "Foo",
            "inspect",
            "console.file.getvalue",
            "Console",
            "print",
            "io.StringIO"
          ],
          "variables": [
            "console",
            "foo",
            "result",
            "expected"
          ],
          "start_line": 98,
          "end_line": 106
        },
        {
          "name": "test_inspect_text",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "repr",
            "render",
            "print"
          ],
          "variables": [
            "num_attributes",
            "expected"
          ],
          "start_line": 110,
          "end_line": 123
        },
        {
          "name": "test_inspect_empty_dict",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "render({}).startswith",
            "render"
          ],
          "variables": [
            "expected"
          ],
          "start_line": 127,
          "end_line": 145
        },
        {
          "name": "test_inspect_builtin_function_except_python311",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "render"
          ],
          "variables": [
            "expected"
          ],
          "start_line": 153,
          "end_line": 166
        },
        {
          "name": "test_inspect_builtin_function_only_python311",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "render"
          ],
          "variables": [
            "expected"
          ],
          "start_line": 173,
          "end_line": 187
        },
        {
          "name": "test_inspect_coroutine",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "render(coroutine).startswith",
            "render"
          ],
          "variables": [
            "expected"
          ],
          "start_line": 191,
          "end_line": 200
        },
        {
          "name": "coroutine",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 192,
          "end_line": 193
        },
        {
          "name": "test_inspect_integer",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "render"
          ],
          "variables": [
            "expected"
          ],
          "start_line": 203,
          "end_line": 215
        },
        {
          "name": "test_inspect_integer_with_value",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "repr",
            "render",
            "print"
          ],
          "variables": [
            "expected",
            "value"
          ],
          "start_line": 218,
          "end_line": 222
        },
        {
          "name": "test_inspect_integer_with_methods_python38_and_python39",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "render"
          ],
          "variables": [
            "expected"
          ],
          "start_line": 230,
          "end_line": 260
        },
        {
          "name": "test_inspect_integer_with_methods_python310only",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "render"
          ],
          "variables": [
            "expected"
          ],
          "start_line": 269,
          "end_line": 303
        },
        {
          "name": "test_inspect_integer_with_methods_python311",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "render"
          ],
          "variables": [
            "expected"
          ],
          "start_line": 312,
          "end_line": 348
        },
        {
          "name": "test_broken_call_attr",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "repr",
            "callable",
            "Foo",
            "NotCallable",
            "render",
            "print"
          ],
          "variables": [
            "__call__",
            "foo",
            "foo",
            "expected",
            "result"
          ],
          "start_line": 352,
          "end_line": 367
        },
        {
          "name": "__repr__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 356,
          "end_line": 357
        },
        {
          "name": "test_inspect_swig_edge_case",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "inspect",
            "Thing"
          ],
          "variables": [
            "thing"
          ],
          "start_line": 370,
          "end_line": 382
        },
        {
          "name": "__class__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 375,
          "end_line": 376
        },
        {
          "name": "test_inspect_module_with_class",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "render",
            "ModuleType"
          ],
          "variables": [
            "module",
            "expected"
          ],
          "start_line": 385,
          "end_line": 404
        },
        {
          "name": "function",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 386,
          "end_line": 387
        },
        {
          "name": "test_can_handle_special_characters_in_docstrings",
          "parameters": [
            {
              "name": null,
              "type": "str"
            },
            {
              "name": null,
              "type": "str"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "render"
          ],
          "variables": [
            "expected"
          ],
          "start_line": 417,
          "end_line": 442
        },
        {
          "name": "test_object_types_mro",
          "parameters": [
            {
              "name": null,
              "type": "object"
            },
            {
              "name": null,
              "type": "Sequence[Type]"
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "get_object_types_mro"
          ],
          "variables": [],
          "start_line": 458,
          "end_line": 459
        },
        {
          "name": "test_object_types_mro_as_strings",
          "parameters": [
            {
              "name": null,
              "type": "object"
            },
            {
              "name": null,
              "type": "Sequence[str]"
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "get_object_types_mro_as_strings"
          ],
          "variables": [],
          "start_line": 477,
          "end_line": 478
        },
        {
          "name": "test_object_is_one_of_types",
          "parameters": [
            {
              "name": null,
              "type": "object"
            },
            {
              "name": null,
              "type": "Sequence[str]"
            },
            {
              "name": null,
              "type": "bool"
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "is_object_one_of_types"
          ],
          "variables": [],
          "start_line": 500,
          "end_line": 503
        }
      ],
      "variables": [
        "skip_py38",
        "skip_py39",
        "skip_py310",
        "skip_py311",
        "skip_py312",
        "skip_py313",
        "skip_py314",
        "skip_pypy3",
        "console",
        "console",
        "foo",
        "result",
        "expected",
        "num_attributes",
        "expected",
        "expected",
        "expected",
        "expected",
        "expected",
        "expected",
        "expected",
        "value",
        "expected",
        "expected",
        "expected",
        "__call__",
        "foo",
        "foo",
        "expected",
        "result",
        "thing",
        "module",
        "expected",
        "expected"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\tests\\test_json.py",
      "imports": [
        "from rich.json import JSON",
        "import datetime"
      ],
      "classes": [],
      "functions": [
        {
          "name": "test_print_json_data_with_default",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "JSON.from_data",
            "datetime.date",
            "str",
            "d.isoformat"
          ],
          "variables": [
            "date",
            "json"
          ],
          "start_line": 5,
          "end_line": 8
        }
      ],
      "variables": [
        "date",
        "json"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\tests\\test_jupyter.py",
      "imports": [
        "from rich.console import Console"
      ],
      "classes": [],
      "functions": [
        {
          "name": "test_jupyter",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Console"
          ],
          "variables": [
            "console"
          ],
          "start_line": 4,
          "end_line": 8
        },
        {
          "name": "test_jupyter_columns_env",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Console"
          ],
          "variables": [
            "console",
            "console",
            "console"
          ],
          "start_line": 11,
          "end_line": 20
        },
        {
          "name": "test_jupyter_lines_env",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Console"
          ],
          "variables": [
            "console",
            "console",
            "console"
          ],
          "start_line": 23,
          "end_line": 32
        }
      ],
      "variables": [
        "console",
        "console",
        "console",
        "console",
        "console",
        "console",
        "console"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\tests\\test_layout.py",
      "imports": [
        "import sys",
        "import pytest",
        "from rich.console import Console",
        "from rich.layout import Layout, NoSplitter",
        "from rich.panel import Panel"
      ],
      "classes": [],
      "functions": [
        {
          "name": "test_no_layout",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "pytest.raises",
            "layout.split",
            "Layout"
          ],
          "variables": [
            "layout"
          ],
          "start_line": 10,
          "end_line": 13
        },
        {
          "name": "test_add_split",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "len",
            "layout.add_split",
            "layout.split",
            "Layout"
          ],
          "variables": [
            "layout"
          ],
          "start_line": 16,
          "end_line": 22
        },
        {
          "name": "test_unsplit",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "len",
            "layout.unsplit",
            "layout.split",
            "Layout"
          ],
          "variables": [
            "layout"
          ],
          "start_line": 25,
          "end_line": 31
        },
        {
          "name": "test_render",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "console.capture",
            "repr",
            "capture.get",
            "layout.split_column",
            "console.print",
            "type",
            "top.update",
            "layout[\"left\"].update",
            "Layout",
            "layout[\"bottom\"].split_row",
            "Console",
            "Panel",
            "isinstance",
            "pytest.raises",
            "print"
          ],
          "variables": [
            "layout",
            "top",
            "console",
            "result",
            "expected"
          ],
          "start_line": 35,
          "end_line": 67
        },
        {
          "name": "test_tree",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "console.capture",
            "repr",
            "console.print",
            "Layout",
            "Console",
            "layout.split",
            "capture.get",
            "layout[\"bar\"].split_row",
            "print"
          ],
          "variables": [
            "layout",
            "console",
            "result",
            "expected"
          ],
          "start_line": 70,
          "end_line": 83
        },
        {
          "name": "test_refresh_screen",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "console.capture",
            "repr",
            "console.print",
            "layout.refresh_screen",
            "Layout",
            "console.screen",
            "Console",
            "layout.split_row",
            "capture.get",
            "print"
          ],
          "variables": [
            "layout",
            "console",
            "result",
            "expected"
          ],
          "start_line": 87,
          "end_line": 100
        }
      ],
      "variables": [
        "layout",
        "layout",
        "layout",
        "layout",
        "top",
        "console",
        "result",
        "expected",
        "layout",
        "console",
        "result",
        "expected",
        "layout",
        "console",
        "result",
        "expected"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\tests\\test_live.py",
      "imports": [
        "import time",
        "from typing import Optional",
        "from rich.console import Console",
        "from rich.live import Live",
        "from rich.text import Text"
      ],
      "classes": [],
      "functions": [
        {
          "name": "create_capture_console",
          "parameters": [],
          "return_type": "Console",
          "docstring": null,
          "calls": [
            "Console"
          ],
          "variables": [],
          "start_line": 11,
          "end_line": 21
        },
        {
          "name": "test_live_state",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "live.get_renderable",
            "live.start",
            "live.stop",
            "Live"
          ],
          "variables": [],
          "start_line": 24,
          "end_line": 35
        },
        {
          "name": "test_growing_display",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "repr",
            "Live",
            "console.begin_capture",
            "range",
            "console.end_capture",
            "create_capture_console",
            "print",
            "live.update"
          ],
          "variables": [
            "console",
            "display",
            "output"
          ],
          "start_line": 38,
          "end_line": 51
        },
        {
          "name": "test_growing_display_transient",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "Live",
            "console.begin_capture",
            "range",
            "console.end_capture",
            "create_capture_console",
            "live.update"
          ],
          "variables": [
            "console",
            "display",
            "output"
          ],
          "start_line": 54,
          "end_line": 66
        },
        {
          "name": "test_growing_display_overflow_ellipsis",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "Live",
            "console.begin_capture",
            "range",
            "console.end_capture",
            "create_capture_console",
            "live.update"
          ],
          "variables": [
            "console",
            "display",
            "output"
          ],
          "start_line": 69,
          "end_line": 83
        },
        {
          "name": "test_growing_display_overflow_crop",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "Live",
            "console.begin_capture",
            "range",
            "console.end_capture",
            "create_capture_console",
            "live.update"
          ],
          "variables": [
            "console",
            "display",
            "output"
          ],
          "start_line": 86,
          "end_line": 98
        },
        {
          "name": "test_growing_display_overflow_visible",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "Live",
            "console.begin_capture",
            "range",
            "console.end_capture",
            "create_capture_console",
            "live.update"
          ],
          "variables": [
            "console",
            "display",
            "output"
          ],
          "start_line": 101,
          "end_line": 113
        },
        {
          "name": "test_growing_display_autorefresh",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "Live",
            "time.sleep",
            "console.begin_capture",
            "range",
            "create_capture_console",
            "live.update"
          ],
          "variables": [
            "console",
            "display"
          ],
          "start_line": 116,
          "end_line": 127
        },
        {
          "name": "test_growing_display_console_redirect",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "Live",
            "console.print",
            "console.begin_capture",
            "range",
            "console.end_capture",
            "create_capture_console",
            "live.update"
          ],
          "variables": [
            "console",
            "display",
            "output"
          ],
          "start_line": 130,
          "end_line": 143
        },
        {
          "name": "test_growing_display_file_console",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "Live",
            "console.begin_capture",
            "range",
            "console.end_capture",
            "create_capture_console",
            "live.update"
          ],
          "variables": [
            "console",
            "display",
            "output"
          ],
          "start_line": 146,
          "end_line": 158
        },
        {
          "name": "test_live_screen",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "repr",
            "Live",
            "live.refresh",
            "console.begin_capture",
            "console.end_capture",
            "Text",
            "create_capture_console",
            "print"
          ],
          "variables": [
            "console",
            "result",
            "expected"
          ],
          "start_line": 161,
          "end_line": 169
        }
      ],
      "variables": [
        "console",
        "display",
        "output",
        "console",
        "display",
        "output",
        "console",
        "display",
        "output",
        "console",
        "display",
        "output",
        "console",
        "display",
        "output",
        "console",
        "display",
        "console",
        "display",
        "output",
        "console",
        "display",
        "output",
        "console",
        "result",
        "expected"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\tests\\test_live_render.py",
      "imports": [
        "import pytest",
        "from rich.live_render import LiveRender",
        "from rich.console import Console, ConsoleDimensions, ConsoleOptions",
        "from rich.style import Style",
        "from rich.segment import Segment"
      ],
      "classes": [],
      "functions": [
        {
          "name": "live_render",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "LiveRender"
          ],
          "variables": [],
          "start_line": 9,
          "end_line": 10
        },
        {
          "name": "test_renderable",
          "parameters": [
            {
              "name": "live_render",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "live_render.set_renderable"
          ],
          "variables": [],
          "start_line": 13,
          "end_line": 16
        },
        {
          "name": "test_position_cursor",
          "parameters": [
            {
              "name": "live_render",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "live_render.position_cursor",
            "str"
          ],
          "variables": [],
          "start_line": 19,
          "end_line": 22
        },
        {
          "name": "test_restore_cursor",
          "parameters": [
            {
              "name": "live_render",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "str",
            "live_render.restore_cursor"
          ],
          "variables": [],
          "start_line": 25,
          "end_line": 28
        },
        {
          "name": "test_rich_console",
          "parameters": [
            {
              "name": "live_render",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "ConsoleOptions",
            "Style.parse",
            "ConsoleDimensions",
            "live_render.__rich_console__",
            "Console",
            "list",
            "Segment"
          ],
          "variables": [
            "options",
            "rich_console",
            "rich_console"
          ],
          "start_line": 31,
          "end_line": 45
        }
      ],
      "variables": [
        "options",
        "rich_console",
        "rich_console"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\tests\\test_log.py",
      "imports": [
        "import io",
        "import re",
        "from rich.console import Console"
      ],
      "classes": [],
      "functions": [
        {
          "name": "replace_link_ids",
          "parameters": [
            {
              "name": null,
              "type": "str"
            }
          ],
          "return_type": "str",
          "docstring": null,
          "calls": [
            "re_link_ids.sub"
          ],
          "variables": [],
          "start_line": 12,
          "end_line": 17
        },
        {
          "name": "render_log",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "replace_link_ids(console.file.getvalue()).replace",
            "console.file.getvalue",
            "console.log",
            "Console",
            "replace_link_ids",
            "io.StringIO"
          ],
          "variables": [
            "console"
          ],
          "start_line": 23,
          "end_line": 35
        },
        {
          "name": "test_log",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "render_log",
            "repr",
            "replace_link_ids",
            "print"
          ],
          "variables": [
            "expected",
            "rendered"
          ],
          "start_line": 38,
          "end_line": 44
        },
        {
          "name": "test_log_caller_frame_info",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "range",
            "Console._caller_frame_info"
          ],
          "variables": [],
          "start_line": 47,
          "end_line": 51
        },
        {
          "name": "test_justify",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Console",
            "console.end_capture",
            "console.log",
            "console.begin_capture"
          ],
          "variables": [
            "console",
            "result"
          ],
          "start_line": 54,
          "end_line": 59
        }
      ],
      "variables": [
        "re_link_ids",
        "test_data",
        "console",
        "expected",
        "rendered",
        "console",
        "result",
        "render"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\tests\\test_logging.py",
      "imports": [
        "import io",
        "import os",
        "import logging",
        "from typing import Optional",
        "import pytest",
        "from rich.console import Console",
        "from rich.logging import RichHandler"
      ],
      "classes": [],
      "functions": [
        {
          "name": "test_exception",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "RichHandler",
            "handler_with_tracebacks.setFormatter",
            "Console",
            "logging.Formatter",
            "log.addHandler",
            "handler_with_tracebacks.console.file.getvalue",
            "log.exception",
            "log.error",
            "print",
            "io.StringIO"
          ],
          "variables": [
            "console",
            "handler_with_tracebacks",
            "formatter",
            "render"
          ],
          "start_line": 35,
          "end_line": 61
        },
        {
          "name": "test_exception_with_extra_lines",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "handler_extra_lines.console.file.getvalue",
            "RichHandler",
            "Console",
            "log.addHandler",
            "log.exception",
            "print",
            "io.StringIO"
          ],
          "variables": [
            "console",
            "handler_extra_lines",
            "render"
          ],
          "start_line": 64,
          "end_line": 91
        },
        {
          "name": "test_stderr_and_stdout_are_none",
          "parameters": [
            {
              "name": "monkeypatch",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "RichHandler",
            "monkeypatch.setattr",
            "Console",
            "log.addHandler",
            "log.exception",
            "log.removeHandler"
          ],
          "variables": [
            "console",
            "target_handler",
            "actual_record",
            "actual_record"
          ],
          "start_line": 94,
          "end_line": 122
        },
        {
          "name": "mock_handle_error",
          "parameters": [
            {
              "name": "record",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [],
          "variables": [
            "actual_record"
          ],
          "start_line": 106,
          "end_line": 108
        },
        {
          "name": "test_markup_and_highlight",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "RichHandler",
            "handler.setFormatter",
            "Console",
            "logging.Formatter",
            "log.addHandler",
            "handler.console.file.getvalue",
            "log.error",
            "io.StringIO"
          ],
          "variables": [
            "console",
            "handler",
            "formatter",
            "log_message",
            "render_fancy",
            "render_markup",
            "render_plain"
          ],
          "start_line": 125,
          "end_line": 162
        }
      ],
      "variables": [
        "handler",
        "log",
        "skip_win",
        "console",
        "handler_with_tracebacks",
        "formatter",
        "render",
        "console",
        "handler_extra_lines",
        "render",
        "console",
        "target_handler",
        "actual_record",
        "actual_record",
        "console",
        "handler",
        "formatter",
        "log_message",
        "render_fancy",
        "render_markup",
        "render_plain"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\tests\\test_markdown.py",
      "imports": [
        "import io",
        "import re",
        "from rich.console import Console, RenderableType",
        "from rich.markdown import Markdown"
      ],
      "classes": [],
      "functions": [
        {
          "name": "replace_link_ids",
          "parameters": [
            {
              "name": null,
              "type": "str"
            }
          ],
          "return_type": "str",
          "docstring": null,
          "calls": [
            "re_link_ids.sub"
          ],
          "variables": [],
          "start_line": 81,
          "end_line": 86
        },
        {
          "name": "render",
          "parameters": [
            {
              "name": null,
              "type": "RenderableType"
            }
          ],
          "return_type": "str",
          "docstring": null,
          "calls": [
            "repr",
            "console.print",
            "console.file.getvalue",
            "Console",
            "replace_link_ids",
            "print",
            "io.StringIO"
          ],
          "variables": [
            "console",
            "output"
          ],
          "start_line": 89,
          "end_line": 96
        },
        {
          "name": "test_markdown_render",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Markdown",
            "render"
          ],
          "variables": [
            "markdown",
            "rendered_markdown",
            "expected"
          ],
          "start_line": 99,
          "end_line": 103
        },
        {
          "name": "test_inline_code",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Markdown",
            "repr",
            "render",
            "print"
          ],
          "variables": [
            "markdown",
            "result",
            "expected"
          ],
          "start_line": 106,
          "end_line": 116
        },
        {
          "name": "test_markdown_table",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Markdown",
            "render"
          ],
          "variables": [
            "markdown",
            "result",
            "expected"
          ],
          "start_line": 119,
          "end_line": 133
        },
        {
          "name": "test_inline_styles_in_table",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Markdown",
            "render"
          ],
          "variables": [
            "markdown",
            "result",
            "expected"
          ],
          "start_line": 136,
          "end_line": 148
        },
        {
          "name": "test_inline_styles_with_justification",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Markdown",
            "render"
          ],
          "variables": [
            "markdown",
            "result",
            "expected"
          ],
          "start_line": 151,
          "end_line": 166
        },
        {
          "name": "test_partial_table",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Markdown",
            "repr",
            "render",
            "print"
          ],
          "variables": [
            "markdown",
            "result",
            "expected"
          ],
          "start_line": 169,
          "end_line": 174
        },
        {
          "name": "test_table_with_empty_cells",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "render(complete_table).splitlines",
            "len",
            "render(table_with_empty_cells).splitlines",
            "Markdown",
            "render"
          ],
          "variables": [
            "complete_table",
            "table_with_empty_cells",
            "result",
            "expected"
          ],
          "start_line": 177,
          "end_line": 199
        }
      ],
      "variables": [
        "MARKDOWN",
        "re_link_ids",
        "console",
        "output",
        "markdown",
        "rendered_markdown",
        "expected",
        "markdown",
        "result",
        "expected",
        "markdown",
        "result",
        "expected",
        "markdown",
        "result",
        "expected",
        "markdown",
        "result",
        "expected",
        "markdown",
        "result",
        "expected",
        "complete_table",
        "table_with_empty_cells",
        "result",
        "expected",
        "markdown",
        "rendered"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\tests\\test_markdown_no_hyperlinks.py",
      "imports": [
        "import io",
        "import re",
        "from rich.console import Console, RenderableType",
        "from rich.markdown import Markdown"
      ],
      "classes": [],
      "functions": [
        {
          "name": "replace_link_ids",
          "parameters": [
            {
              "name": null,
              "type": "str"
            }
          ],
          "return_type": "str",
          "docstring": null,
          "calls": [
            "re_link_ids.sub"
          ],
          "variables": [],
          "start_line": 75,
          "end_line": 80
        },
        {
          "name": "render",
          "parameters": [
            {
              "name": null,
              "type": "RenderableType"
            }
          ],
          "return_type": "str",
          "docstring": null,
          "calls": [
            "console.print",
            "console.file.getvalue",
            "Console",
            "replace_link_ids",
            "io.StringIO"
          ],
          "variables": [
            "console",
            "output"
          ],
          "start_line": 83,
          "end_line": 89
        },
        {
          "name": "test_markdown_render",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Markdown",
            "repr",
            "render",
            "print"
          ],
          "variables": [
            "markdown",
            "rendered_markdown",
            "expected"
          ],
          "start_line": 92,
          "end_line": 97
        }
      ],
      "variables": [
        "MARKDOWN",
        "re_link_ids",
        "console",
        "output",
        "markdown",
        "rendered_markdown",
        "expected",
        "markdown",
        "rendered"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\tests\\test_markup.py",
      "imports": [
        "import pytest",
        "from rich.console import Console",
        "from rich.errors import MarkupError",
        "from rich.markup import RE_TAGS, Tag, _parse, escape, render",
        "from rich.text import Span, Text"
      ],
      "classes": [],
      "functions": [
        {
          "name": "test_re_no_match",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "RE_TAGS.match"
          ],
          "variables": [],
          "start_line": 9,
          "end_line": 15
        },
        {
          "name": "test_re_match",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "RE_TAGS.match"
          ],
          "variables": [],
          "start_line": 18,
          "end_line": 27
        },
        {
          "name": "test_escape",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "escape"
          ],
          "variables": [],
          "start_line": 30,
          "end_line": 44
        },
        {
          "name": "test_escape_backslash_end",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Text.from_markup",
            "Span",
            "escape"
          ],
          "variables": [
            "value",
            "escaped_tags",
            "escaped_text"
          ],
          "start_line": 47,
          "end_line": 56
        },
        {
          "name": "test_render_escape",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "console.print",
            "escape",
            "console.end_capture",
            "Console",
            "console.begin_capture"
          ],
          "variables": [
            "console",
            "result",
            "expected"
          ],
          "start_line": 59,
          "end_line": 67
        },
        {
          "name": "test_parse",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Tag",
            "repr",
            "_parse",
            "list",
            "print"
          ],
          "variables": [
            "result",
            "expected"
          ],
          "start_line": 70,
          "end_line": 82
        },
        {
          "name": "test_parse_link",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "list",
            "_parse",
            "Tag"
          ],
          "variables": [
            "result",
            "expected"
          ],
          "start_line": 85,
          "end_line": 92
        },
        {
          "name": "test_render",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Span",
            "render",
            "str"
          ],
          "variables": [
            "result"
          ],
          "start_line": 95,
          "end_line": 98
        },
        {
          "name": "test_render_not_tags",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "render",
            "str"
          ],
          "variables": [
            "result"
          ],
          "start_line": 101,
          "end_line": 104
        },
        {
          "name": "test_render_link",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Span",
            "render",
            "str"
          ],
          "variables": [
            "result"
          ],
          "start_line": 107,
          "end_line": 110
        },
        {
          "name": "test_render_combine",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Span",
            "render",
            "str"
          ],
          "variables": [
            "result"
          ],
          "start_line": 113,
          "end_line": 119
        },
        {
          "name": "test_render_overlap",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Span",
            "render",
            "str"
          ],
          "variables": [
            "result"
          ],
          "start_line": 122,
          "end_line": 128
        },
        {
          "name": "test_adjoint",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Span",
            "repr",
            "render",
            "print"
          ],
          "variables": [
            "result"
          ],
          "start_line": 131,
          "end_line": 134
        },
        {
          "name": "test_render_close",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Span",
            "render",
            "str"
          ],
          "variables": [
            "result"
          ],
          "start_line": 137,
          "end_line": 140
        },
        {
          "name": "test_render_close_ambiguous",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Span",
            "render",
            "str"
          ],
          "variables": [
            "result"
          ],
          "start_line": 143,
          "end_line": 146
        },
        {
          "name": "test_markup_error",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "pytest.raises",
            "render"
          ],
          "variables": [],
          "start_line": 149,
          "end_line": 155
        },
        {
          "name": "test_markup_escape",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "render",
            "str"
          ],
          "variables": [
            "result"
          ],
          "start_line": 158,
          "end_line": 160
        },
        {
          "name": "test_escape_escape",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "render",
            "str"
          ],
          "variables": [
            "result",
            "result",
            "result",
            "result",
            "result",
            "result"
          ],
          "start_line": 163,
          "end_line": 185
        },
        {
          "name": "test_events",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "render",
            "str"
          ],
          "variables": [
            "result"
          ],
          "start_line": 188,
          "end_line": 190
        },
        {
          "name": "test_events_broken",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "pytest.raises",
            "render"
          ],
          "variables": [],
          "start_line": 193,
          "end_line": 198
        },
        {
          "name": "test_render_meta",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Console",
            "render",
            "text.get_style_at_offset"
          ],
          "variables": [
            "console",
            "text",
            "text",
            "text",
            "text",
            "text"
          ],
          "start_line": 201,
          "end_line": 219
        }
      ],
      "variables": [
        "value",
        "escaped_tags",
        "escaped_text",
        "console",
        "result",
        "expected",
        "result",
        "expected",
        "result",
        "expected",
        "result",
        "result",
        "result",
        "result",
        "result",
        "result",
        "result",
        "result",
        "result",
        "result",
        "result",
        "result",
        "result",
        "result",
        "result",
        "result",
        "console",
        "text",
        "text",
        "text",
        "text",
        "text"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\tests\\test_measure.py",
      "imports": [
        "from rich.text import Text",
        "import pytest",
        "from rich.errors import NotRenderableError",
        "from rich.console import Console",
        "from rich.measure import Measurement, measure_renderables"
      ],
      "classes": [],
      "functions": [
        {
          "name": "test_span",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Measurement"
          ],
          "variables": [
            "measurement"
          ],
          "start_line": 9,
          "end_line": 11
        },
        {
          "name": "test_no_renderable",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Console",
            "pytest.raises",
            "Measurement.get",
            "Text"
          ],
          "variables": [
            "console",
            "text"
          ],
          "start_line": 14,
          "end_line": 19
        },
        {
          "name": "test_measure_renderables",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Console",
            "Measurement",
            "console.options.update_width",
            "measure_renderables"
          ],
          "variables": [
            "console"
          ],
          "start_line": 22,
          "end_line": 27
        },
        {
          "name": "test_clamp",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "measurement.clamp",
            "Measurement"
          ],
          "variables": [
            "measurement"
          ],
          "start_line": 30,
          "end_line": 36
        }
      ],
      "variables": [
        "measurement",
        "console",
        "text",
        "console",
        "measurement"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\tests\\test_null_file.py",
      "imports": [
        "from rich._null_file import NullFile"
      ],
      "classes": [],
      "functions": [
        {
          "name": "test_null_file",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "iter",
            "file.readable",
            "file.writable",
            "file.writelines",
            "file.read",
            "NullFile",
            "file.seekable",
            "next",
            "file.isatty",
            "file.flush",
            "file.fileno",
            "file.readlines",
            "file.tell",
            "file.readline",
            "file.close",
            "file.truncate",
            "file.seek",
            "file.write"
          ],
          "variables": [
            "file"
          ],
          "start_line": 4,
          "end_line": 23
        }
      ],
      "variables": [
        "file"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\tests\\test_padding.py",
      "imports": [
        "import pytest",
        "from rich.padding import Padding",
        "from rich.console import Console, ConsoleDimensions, ConsoleOptions",
        "from rich.style import Style",
        "from rich.segment import Segment"
      ],
      "classes": [],
      "functions": [
        {
          "name": "test_repr",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "isinstance",
            "repr",
            "Padding"
          ],
          "variables": [
            "padding"
          ],
          "start_line": 9,
          "end_line": 11
        },
        {
          "name": "test_indent",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Padding.indent"
          ],
          "variables": [
            "indent_result"
          ],
          "start_line": 14,
          "end_line": 19
        },
        {
          "name": "test_unpack",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Padding.unpack",
            "pytest.raises"
          ],
          "variables": [],
          "start_line": 22,
          "end_line": 28
        },
        {
          "name": "test_expand_false",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Padding",
            "console.print",
            "console.end_capture",
            "Console",
            "console.begin_capture"
          ],
          "variables": [
            "console"
          ],
          "start_line": 31,
          "end_line": 35
        },
        {
          "name": "test_rich_console",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "len",
            "ConsoleOptions",
            "Padding",
            "ConsoleDimensions",
            "zip",
            "Console",
            "Segment",
            "Padding(renderable, style=style).__rich_console__",
            "Style"
          ],
          "variables": [
            "renderable",
            "style",
            "options",
            "expected_outputs",
            "padding_generator"
          ],
          "start_line": 38,
          "end_line": 60
        }
      ],
      "variables": [
        "padding",
        "indent_result",
        "console",
        "renderable",
        "style",
        "options",
        "expected_outputs",
        "padding_generator"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\tests\\test_palette.py",
      "imports": [
        "from rich._palettes import STANDARD_PALETTE",
        "from rich.table import Table"
      ],
      "classes": [],
      "functions": [
        {
          "name": "test_rich_cast",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "isinstance",
            "STANDARD_PALETTE.__rich__"
          ],
          "variables": [
            "table"
          ],
          "start_line": 5,
          "end_line": 8
        }
      ],
      "variables": [
        "table"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\tests\\test_panel.py",
      "imports": [
        "import io",
        "import pytest",
        "from rich.console import Console",
        "from rich.panel import Panel",
        "from rich.segment import Segment",
        "from rich.style import Style",
        "from rich.text import Text"
      ],
      "classes": [],
      "functions": [
        {
          "name": "render",
          "parameters": [
            {
              "name": "panel",
              "type": null
            }
          ],
          "return_type": "str",
          "docstring": null,
          "calls": [
            "console.print",
            "console.file.getvalue",
            "Console",
            "print",
            "io.StringIO"
          ],
          "variables": [
            "console",
            "result"
          ],
          "start_line": 32,
          "end_line": 37
        },
        {
          "name": "test_render_panel",
          "parameters": [
            {
              "name": "panel",
              "type": null
            },
            {
              "name": "expected",
              "type": null
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "render"
          ],
          "variables": [],
          "start_line": 41,
          "end_line": 42
        },
        {
          "name": "test_console_width",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "Console",
            "Panel",
            "panel.__rich_measure__",
            "io.StringIO"
          ],
          "variables": [
            "console",
            "panel"
          ],
          "start_line": 45,
          "end_line": 50
        },
        {
          "name": "test_fixed_width",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "Console",
            "Panel",
            "panel.__rich_measure__",
            "io.StringIO"
          ],
          "variables": [
            "console",
            "panel"
          ],
          "start_line": 53,
          "end_line": 58
        },
        {
          "name": "test_render_size",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "console.options.update_dimensions",
            "repr",
            "Console",
            "Panel",
            "Segment",
            "Style",
            "print",
            "console.render_lines"
          ],
          "variables": [
            "console",
            "options",
            "lines",
            "expected"
          ],
          "start_line": 61,
          "end_line": 102
        },
        {
          "name": "test_title_text",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "repr",
            "console.print",
            "console.file.getvalue",
            "Console",
            "Panel",
            "Text",
            "print",
            "io.StringIO"
          ],
          "variables": [
            "panel",
            "console",
            "result",
            "expected"
          ],
          "start_line": 105,
          "end_line": 124
        },
        {
          "name": "test_title_text_with_border_color",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "repr",
            "console.print",
            "console.file.getvalue",
            "Console",
            "Panel",
            "Text",
            "print",
            "io.StringIO"
          ],
          "variables": [
            "panel",
            "console",
            "result",
            "expected"
          ],
          "start_line": 127,
          "end_line": 148
        },
        {
          "name": "test_title_text_with_panel_background",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "repr",
            "console.print",
            "console.file.getvalue",
            "Console",
            "Panel",
            "Text",
            "print",
            "io.StringIO"
          ],
          "variables": [
            "panel",
            "console",
            "result",
            "expected"
          ],
          "start_line": 151,
          "end_line": 172
        }
      ],
      "variables": [
        "tests",
        "expected",
        "console",
        "result",
        "console",
        "panel",
        "console",
        "panel",
        "console",
        "options",
        "lines",
        "expected",
        "panel",
        "console",
        "result",
        "expected",
        "panel",
        "console",
        "result",
        "expected",
        "panel",
        "console",
        "result",
        "expected",
        "expected",
        "result"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\tests\\test_pick.py",
      "imports": [
        "from rich._pick import pick_bool"
      ],
      "classes": [],
      "functions": [
        {
          "name": "test_pick_bool",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "pick_bool"
          ],
          "variables": [],
          "start_line": 4,
          "end_line": 14
        }
      ],
      "variables": []
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\tests\\test_pretty.py",
      "imports": [
        "import collections",
        "import io",
        "import sys",
        "from array import array",
        "from collections import UserDict, defaultdict, deque",
        "from dataclasses import dataclass, field",
        "from typing import Any, List, NamedTuple",
        "import attr",
        "import pytest",
        "from rich.console import Console",
        "from rich.measure import Measurement",
        "from rich.pretty import Node, Pretty, _ipy_display_hook, install, pprint, pretty_repr",
        "from rich.text import Text",
        "from dataclasses import dataclass, field"
      ],
      "classes": [
        {
          "name": "Thing",
          "base_classes": null,
          "docstring": null,
          "methods": []
        },
        {
          "name": "Thing",
          "base_classes": null,
          "docstring": null,
          "methods": []
        },
        {
          "name": "Thing",
          "base_classes": null,
          "docstring": null,
          "methods": []
        },
        {
          "name": "Thing",
          "base_classes": null,
          "docstring": null,
          "methods": []
        },
        {
          "name": "ExampleDataclass",
          "base_classes": null,
          "docstring": null,
          "methods": []
        },
        {
          "name": "Empty",
          "base_classes": null,
          "docstring": null,
          "methods": []
        },
        {
          "name": "StockKeepingUnit",
          "base_classes": "(NamedTuple)",
          "docstring": null,
          "methods": []
        },
        {
          "name": "Thing",
          "base_classes": "(NamedTuple)",
          "docstring": null,
          "methods": []
        },
        {
          "name": "LooksLikeANamedTupleButIsnt",
          "base_classes": "(tuple)",
          "docstring": null,
          "methods": []
        },
        {
          "name": "Hello",
          "base_classes": null,
          "docstring": null,
          "methods": []
        },
        {
          "name": "BrokenRepr",
          "base_classes": null,
          "docstring": null,
          "methods": []
        },
        {
          "name": "BrokenAttr",
          "base_classes": null,
          "docstring": null,
          "methods": []
        },
        {
          "name": "Example",
          "base_classes": "(NamedTuple)",
          "docstring": null,
          "methods": []
        },
        {
          "name": "Example",
          "base_classes": null,
          "docstring": null,
          "methods": []
        },
        {
          "name": "Example",
          "base_classes": null,
          "docstring": null,
          "methods": []
        },
        {
          "name": "Example",
          "base_classes": null,
          "docstring": null,
          "methods": []
        },
        {
          "name": "Foo",
          "base_classes": null,
          "docstring": null,
          "methods": []
        },
        {
          "name": "Bar",
          "base_classes": null,
          "docstring": null,
          "methods": []
        },
        {
          "name": "Foo",
          "base_classes": null,
          "docstring": null,
          "methods": []
        },
        {
          "name": "Bar",
          "base_classes": null,
          "docstring": null,
          "methods": []
        },
        {
          "name": "Foo",
          "base_classes": null,
          "docstring": null,
          "methods": []
        },
        {
          "name": "Bar",
          "base_classes": null,
          "docstring": null,
          "methods": []
        },
        {
          "name": "Foo",
          "base_classes": null,
          "docstring": null,
          "methods": []
        },
        {
          "name": "Point",
          "base_classes": null,
          "docstring": null,
          "methods": []
        },
        {
          "name": "Nada",
          "base_classes": null,
          "docstring": null,
          "methods": []
        },
        {
          "name": "Foo",
          "base_classes": null,
          "docstring": null,
          "methods": []
        },
        {
          "name": "Foo",
          "base_classes": null,
          "docstring": null,
          "methods": []
        },
        {
          "name": "D1",
          "base_classes": "(UserDict)",
          "docstring": null,
          "methods": []
        },
        {
          "name": "D2",
          "base_classes": "(UserDict)",
          "docstring": null,
          "methods": []
        },
        {
          "name": "Foo",
          "base_classes": null,
          "docstring": null,
          "methods": []
        },
        {
          "name": "Foo",
          "base_classes": null,
          "docstring": null,
          "methods": []
        },
        {
          "name": "Foo",
          "base_classes": null,
          "docstring": null,
          "methods": []
        },
        {
          "name": "BadDataclass",
          "base_classes": null,
          "docstring": null,
          "methods": []
        }
      ],
      "functions": [
        {
          "name": "test_install",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "install",
            "console.file.getvalue",
            "Console",
            "sys.displayhook",
            "io.StringIO"
          ],
          "variables": [
            "console",
            "dh"
          ],
          "start_line": 47,
          "end_line": 53
        },
        {
          "name": "test_install_max_depth",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "install",
            "console.file.getvalue",
            "Console",
            "sys.displayhook",
            "io.StringIO"
          ],
          "variables": [
            "console",
            "dh"
          ],
          "start_line": 56,
          "end_line": 62
        },
        {
          "name": "test_ipy_display_hook__repr_html",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "io.StringIO",
            "console.begin_capture",
            "Console",
            "console.end_capture",
            "Thing",
            "_ipy_display_hook"
          ],
          "variables": [
            "console"
          ],
          "start_line": 65,
          "end_line": 76
        },
        {
          "name": "_repr_html_",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 69,
          "end_line": 70
        },
        {
          "name": "test_ipy_display_hook__multiple_special_reprs",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "Console",
            "Thing",
            "_ipy_display_hook",
            "io.StringIO"
          ],
          "variables": [
            "console",
            "result"
          ],
          "start_line": 79,
          "end_line": 98
        },
        {
          "name": "__repr__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 88,
          "end_line": 89
        },
        {
          "name": "_repr_latex_",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 91,
          "end_line": 92
        },
        {
          "name": "_repr_html_",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 94,
          "end_line": 95
        },
        {
          "name": "test_ipy_display_hook__no_special_repr_methods",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "Console",
            "Thing",
            "_ipy_display_hook",
            "io.StringIO"
          ],
          "variables": [
            "console",
            "result"
          ],
          "start_line": 101,
          "end_line": 110
        },
        {
          "name": "__repr__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "str",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 105,
          "end_line": 106
        },
        {
          "name": "test_ipy_display_hook__special_repr_raises_exception",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "io.StringIO",
            "Exception",
            "Console",
            "Thing",
            "_ipy_display_hook"
          ],
          "variables": [
            "console",
            "result"
          ],
          "start_line": 113,
          "end_line": 134
        },
        {
          "name": "_repr_markdown_",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Exception"
          ],
          "variables": [],
          "start_line": 121,
          "end_line": 122
        },
        {
          "name": "_repr_latex_",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 124,
          "end_line": 125
        },
        {
          "name": "_repr_html_",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 127,
          "end_line": 128
        },
        {
          "name": "__repr__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 130,
          "end_line": 131
        },
        {
          "name": "test_ipy_display_hook__console_renderables_on_newline",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "io.StringIO",
            "console.begin_capture",
            "Console",
            "Text",
            "_ipy_display_hook"
          ],
          "variables": [
            "console",
            "result"
          ],
          "start_line": 137,
          "end_line": 141
        },
        {
          "name": "test_pretty",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "print",
            "pretty_repr"
          ],
          "variables": [
            "test",
            "result",
            "expected"
          ],
          "start_line": 144,
          "end_line": 157
        },
        {
          "name": "test_pretty_dataclass",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "repr",
            "print",
            "pretty_repr",
            "ExampleDataclass"
          ],
          "variables": [
            "dc",
            "result",
            "result",
            "result"
          ],
          "start_line": 174,
          "end_line": 191
        },
        {
          "name": "test_empty_dataclass",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "Empty",
            "pretty_repr"
          ],
          "variables": [],
          "start_line": 194,
          "end_line": 196
        },
        {
          "name": "test_pretty_namedtuple",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "pretty_repr",
            "console.begin_capture",
            "Console",
            "StockKeepingUnit",
            "print"
          ],
          "variables": [
            "console",
            "example_namedtuple",
            "result"
          ],
          "start_line": 207,
          "end_line": 231
        },
        {
          "name": "test_pretty_namedtuple_length_one_no_trailing_comma",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "collections.namedtuple(\"Thing\", [\"name\"])",
            "collections.namedtuple",
            "pretty_repr"
          ],
          "variables": [
            "instance"
          ],
          "start_line": 234,
          "end_line": 236
        },
        {
          "name": "test_pretty_namedtuple_empty",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "pretty_repr",
            "collections.namedtuple",
            "collections.namedtuple(\"Thing\", [])"
          ],
          "variables": [
            "instance"
          ],
          "start_line": 239,
          "end_line": 241
        },
        {
          "name": "test_pretty_namedtuple_custom_repr",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "Thing",
            "pretty_repr"
          ],
          "variables": [],
          "start_line": 244,
          "end_line": 249
        },
        {
          "name": "__repr__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 246,
          "end_line": 247
        },
        {
          "name": "test_pretty_namedtuple_fields_invalid_type",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "LooksLikeANamedTupleButIsnt",
            "pretty_repr"
          ],
          "variables": [
            "_fields",
            "instance",
            "result"
          ],
          "start_line": 252,
          "end_line": 258
        },
        {
          "name": "test_pretty_namedtuple_max_depth",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "pretty_repr",
            "StockKeepingUnit"
          ],
          "variables": [
            "instance",
            "result"
          ],
          "start_line": 261,
          "end_line": 264
        },
        {
          "name": "test_small_width",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "pretty_repr"
          ],
          "variables": [
            "test",
            "result",
            "expected"
          ],
          "start_line": 267,
          "end_line": 271
        },
        {
          "name": "test_ansi_in_pretty_repr",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "console.export_text",
            "console.print",
            "Hello",
            "Console",
            "Pretty",
            "io.StringIO"
          ],
          "variables": [
            "pretty",
            "console",
            "result"
          ],
          "start_line": 274,
          "end_line": 285
        },
        {
          "name": "__repr__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 276,
          "end_line": 277
        },
        {
          "name": "test_broken_repr",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "BrokenRepr",
            "pretty_repr"
          ],
          "variables": [
            "test",
            "result",
            "expected"
          ],
          "start_line": 288,
          "end_line": 296
        },
        {
          "name": "__repr__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 290,
          "end_line": 291
        },
        {
          "name": "test_broken_getattr",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "pretty_repr",
            "BrokenAttr"
          ],
          "variables": [
            "test",
            "result"
          ],
          "start_line": 299,
          "end_line": 309
        },
        {
          "name": "__getattr__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "name",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 301,
          "end_line": 302
        },
        {
          "name": "__repr__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 304,
          "end_line": 305
        },
        {
          "name": "test_reference_cycle_container",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "test[1].append",
            "test.append",
            "pretty_repr"
          ],
          "variables": [
            "test",
            "res",
            "test",
            "res",
            "a",
            "test",
            "res"
          ],
          "start_line": 312,
          "end_line": 327
        },
        {
          "name": "test_reference_cycle_namedtuple",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "pretty_repr",
            "test.y[0].y.append",
            "Example"
          ],
          "variables": [
            "x",
            "y",
            "test",
            "res",
            "a",
            "test",
            "res"
          ],
          "start_line": 330,
          "end_line": 344
        },
        {
          "name": "test_reference_cycle_dataclass",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "pretty_repr",
            "Example"
          ],
          "variables": [
            "x",
            "y",
            "test",
            "res",
            "test",
            "res",
            "a",
            "test",
            "res"
          ],
          "start_line": 347,
          "end_line": 367
        },
        {
          "name": "test_reference_cycle_attrs",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "pretty_repr",
            "Example"
          ],
          "variables": [
            "x",
            "y",
            "test",
            "res",
            "test",
            "res",
            "a",
            "test",
            "res"
          ],
          "start_line": 370,
          "end_line": 390
        },
        {
          "name": "test_reference_cycle_custom_repr",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "pretty_repr",
            "Example"
          ],
          "variables": [
            "test",
            "res",
            "test",
            "res",
            "a",
            "test",
            "res"
          ],
          "start_line": 393,
          "end_line": 417
        },
        {
          "name": "__init__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "x",
              "type": null
            },
            {
              "name": "y",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 395,
          "end_line": 397
        },
        {
          "name": "__rich_repr__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 399,
          "end_line": 401
        },
        {
          "name": "test_max_depth",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "pretty_repr"
          ],
          "variables": [
            "d"
          ],
          "start_line": 420,
          "end_line": 439
        },
        {
          "name": "test_max_depth_rich_repr",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "Bar",
            "pretty_repr",
            "Foo"
          ],
          "variables": [],
          "start_line": 442,
          "end_line": 460
        },
        {
          "name": "__init__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "foo",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 444,
          "end_line": 445
        },
        {
          "name": "__rich_repr__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 447,
          "end_line": 448
        },
        {
          "name": "__init__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "bar",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 451,
          "end_line": 452
        },
        {
          "name": "__rich_repr__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 454,
          "end_line": 455
        },
        {
          "name": "test_max_depth_attrs",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "attr.field",
            "Bar",
            "pretty_repr",
            "Foo"
          ],
          "variables": [
            "foo",
            "bar"
          ],
          "start_line": 463,
          "end_line": 475
        },
        {
          "name": "test_max_depth_dataclass",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "Bar",
            "pretty_repr",
            "Foo"
          ],
          "variables": [
            "foo",
            "bar"
          ],
          "start_line": 478,
          "end_line": 490
        },
        {
          "name": "test_defaultdict",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "defaultdict",
            "pretty_repr"
          ],
          "variables": [
            "test_dict",
            "result"
          ],
          "start_line": 493,
          "end_line": 496
        },
        {
          "name": "test_deque",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "deque",
            "pretty_repr"
          ],
          "variables": [
            "test_deque",
            "result",
            "test_deque",
            "result",
            "test_deque",
            "result",
            "test_deque",
            "result",
            "test_deque",
            "result",
            "test_deque",
            "result",
            "test_deque",
            "result",
            "test_deque",
            "result"
          ],
          "start_line": 499,
          "end_line": 523
        },
        {
          "name": "test_array",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "array",
            "pretty_repr"
          ],
          "variables": [
            "test_array",
            "result"
          ],
          "start_line": 526,
          "end_line": 529
        },
        {
          "name": "test_tuple_of_one",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "pretty_repr"
          ],
          "variables": [],
          "start_line": 532,
          "end_line": 533
        },
        {
          "name": "test_node",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "Node",
            "pretty_repr"
          ],
          "variables": [
            "node"
          ],
          "start_line": 536,
          "end_line": 538
        },
        {
          "name": "test_indent_lines",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "repr",
            "console.print",
            "console.end_capture",
            "Console",
            "console.begin_capture",
            "print",
            "Pretty"
          ],
          "variables": [
            "console",
            "expected",
            "result"
          ],
          "start_line": 541,
          "end_line": 554
        },
        {
          "name": "test_pprint",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "Console",
            "console.end_capture",
            "pprint",
            "console.begin_capture"
          ],
          "variables": [
            "console"
          ],
          "start_line": 557,
          "end_line": 561
        },
        {
          "name": "test_pprint_max_values",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "Console",
            "console.end_capture",
            "pprint",
            "console.begin_capture"
          ],
          "variables": [
            "console"
          ],
          "start_line": 564,
          "end_line": 568
        },
        {
          "name": "test_pprint_max_items",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "Console",
            "console.end_capture",
            "pprint",
            "console.begin_capture"
          ],
          "variables": [
            "console"
          ],
          "start_line": 571,
          "end_line": 575
        },
        {
          "name": "test_pprint_max_string",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "Console",
            "console.end_capture",
            "pprint",
            "console.begin_capture"
          ],
          "variables": [
            "console"
          ],
          "start_line": 578,
          "end_line": 582
        },
        {
          "name": "test_tuples",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "repr",
            "console.end_capture",
            "Console",
            "console.begin_capture",
            "print",
            "pprint"
          ],
          "variables": [
            "console",
            "result",
            "expected"
          ],
          "start_line": 585,
          "end_line": 597
        },
        {
          "name": "test_newline",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "console.print",
            "console.end_capture",
            "Console",
            "console.begin_capture",
            "Pretty"
          ],
          "variables": [
            "console",
            "result",
            "expected"
          ],
          "start_line": 600,
          "end_line": 606
        },
        {
          "name": "test_empty_repr",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "pretty_repr",
            "Foo"
          ],
          "variables": [],
          "start_line": 609,
          "end_line": 614
        },
        {
          "name": "__repr__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 611,
          "end_line": 612
        },
        {
          "name": "test_attrs",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "repr",
            "pretty_repr",
            "Point",
            "attr.field",
            "print"
          ],
          "variables": [
            "x",
            "y",
            "foo",
            "z",
            "result",
            "expected"
          ],
          "start_line": 617,
          "end_line": 628
        },
        {
          "name": "test_attrs_empty",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "repr",
            "Nada",
            "print",
            "pretty_repr"
          ],
          "variables": [
            "result",
            "expected"
          ],
          "start_line": 631,
          "end_line": 639
        },
        {
          "name": "test_attrs_broken",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "repr",
            "print",
            "pretty_repr",
            "Foo"
          ],
          "variables": [
            "bar",
            "foo",
            "result",
            "expected"
          ],
          "start_line": 647,
          "end_line": 657
        },
        {
          "name": "test_attrs_broken_310",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "repr",
            "print",
            "pretty_repr",
            "Foo"
          ],
          "variables": [
            "bar",
            "foo",
            "result",
            "expected",
            "expected"
          ],
          "start_line": 662,
          "end_line": 675
        },
        {
          "name": "test_user_dict",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "repr",
            "pretty_repr",
            "D2",
            "D1",
            "print"
          ],
          "variables": [
            "d1",
            "d2",
            "result",
            "result"
          ],
          "start_line": 678,
          "end_line": 693
        },
        {
          "name": "__repr__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 683,
          "end_line": 684
        },
        {
          "name": "test_lying_attribute",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "pretty_repr",
            "Foo"
          ],
          "variables": [
            "foo",
            "result"
          ],
          "start_line": 696,
          "end_line": 705
        },
        {
          "name": "__getattr__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "attr",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 700,
          "end_line": 701
        },
        {
          "name": "test_measure_pretty",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "Console",
            "Measurement",
            "Pretty",
            "console.measure"
          ],
          "variables": [
            "console",
            "pretty",
            "measurement"
          ],
          "start_line": 708,
          "end_line": 715
        },
        {
          "name": "test_tuple_rich_repr",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "pretty_repr",
            "Foo"
          ],
          "variables": [],
          "start_line": 718,
          "end_line": 727
        },
        {
          "name": "__rich_repr__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 724,
          "end_line": 725
        },
        {
          "name": "test_tuple_rich_repr_default",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "pretty_repr",
            "Foo"
          ],
          "variables": [],
          "start_line": 730,
          "end_line": 739
        },
        {
          "name": "__rich_repr__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 736,
          "end_line": 737
        },
        {
          "name": "test_dataclass_no_attribute",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "console.capture",
            "dataclass",
            "field",
            "console.print",
            "BadDataclass",
            "Console",
            "capture.get"
          ],
          "variables": [
            "item",
            "bad_data_class",
            "console",
            "expected",
            "result"
          ],
          "start_line": 742,
          "end_line": 759
        }
      ],
      "variables": [
        "skip_py38",
        "skip_py39",
        "skip_py310",
        "skip_py311",
        "skip_py312",
        "skip_py313",
        "skip_py314",
        "console",
        "dh",
        "console",
        "dh",
        "console",
        "console",
        "result",
        "console",
        "result",
        "console",
        "result",
        "console",
        "result",
        "test",
        "result",
        "expected",
        "foo",
        "bar",
        "ignore",
        "baz",
        "last",
        "dc",
        "result",
        "result",
        "result",
        "name",
        "description",
        "price",
        "category",
        "reviews",
        "console",
        "example_namedtuple",
        "result",
        "instance",
        "instance",
        "_fields",
        "instance",
        "result",
        "instance",
        "result",
        "test",
        "result",
        "expected",
        "pretty",
        "console",
        "result",
        "test",
        "result",
        "expected",
        "test",
        "result",
        "test",
        "res",
        "test",
        "res",
        "a",
        "test",
        "res",
        "x",
        "y",
        "test",
        "res",
        "a",
        "test",
        "res",
        "x",
        "y",
        "test",
        "res",
        "test",
        "res",
        "a",
        "test",
        "res",
        "x",
        "y",
        "test",
        "res",
        "test",
        "res",
        "a",
        "test",
        "res",
        "test",
        "res",
        "test",
        "res",
        "a",
        "test",
        "res",
        "d",
        "foo",
        "bar",
        "foo",
        "bar",
        "test_dict",
        "result",
        "test_deque",
        "result",
        "test_deque",
        "result",
        "test_deque",
        "result",
        "test_deque",
        "result",
        "test_deque",
        "result",
        "test_deque",
        "result",
        "test_deque",
        "result",
        "test_deque",
        "result",
        "test_array",
        "result",
        "node",
        "console",
        "expected",
        "result",
        "console",
        "console",
        "console",
        "console",
        "console",
        "result",
        "expected",
        "console",
        "result",
        "expected",
        "x",
        "y",
        "foo",
        "z",
        "result",
        "expected",
        "result",
        "expected",
        "bar",
        "foo",
        "result",
        "expected",
        "bar",
        "foo",
        "result",
        "expected",
        "expected",
        "d1",
        "d2",
        "result",
        "result",
        "foo",
        "result",
        "console",
        "pretty",
        "measurement",
        "item",
        "bad_data_class",
        "console",
        "expected",
        "result"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\tests\\test_progress.py",
      "imports": [
        "import io",
        "import os",
        "import tempfile",
        "from types import SimpleNamespace",
        "import pytest",
        "import rich.progress",
        "from rich.console import Console",
        "from rich.highlighter import NullHighlighter",
        "from rich.progress import (\n    BarColumn,\n    DownloadColumn,\n    FileSizeColumn,\n    MofNCompleteColumn,\n    Progress,\n    RenderableColumn,\n    SpinnerColumn,\n    Task,\n    TaskID,\n    TaskProgressColumn,\n    TextColumn,\n    TimeElapsedColumn,\n    TimeRemainingColumn,\n    TotalFileSizeColumn,\n    TransferSpeedColumn,\n    _TrackThread,\n    track,\n)",
        "from rich.progress_bar import ProgressBar",
        "from rich.text import Text",
        "from .render import replace_link_ids",
        "from time import sleep"
      ],
      "classes": [
        {
          "name": "MockClock",
          "base_classes": null,
          "docstring": null,
          "methods": []
        },
        {
          "name": "FakeTask",
          "base_classes": "(Task)",
          "docstring": null,
          "methods": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 39,
          "end_line": 41
        },
        {
          "name": "__call__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "float",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 43,
          "end_line": 48
        },
        {
          "name": "tick",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 50,
          "end_line": 51
        },
        {
          "name": "test_bar_columns",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "isinstance",
            "bar_column",
            "Task",
            "BarColumn"
          ],
          "variables": [
            "bar_column",
            "task",
            "bar"
          ],
          "start_line": 54,
          "end_line": 61
        },
        {
          "name": "test_text_column",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "str",
            "TextColumn",
            "Text",
            "text_column.render",
            "NullHighlighter",
            "Task"
          ],
          "variables": [
            "text_column",
            "task",
            "text",
            "text_column",
            "task",
            "text"
          ],
          "start_line": 64,
          "end_line": 73
        },
        {
          "name": "test_time_elapsed_column",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "TimeElapsedColumn",
            "Task",
            "str",
            "column.render"
          ],
          "variables": [
            "column",
            "task",
            "text"
          ],
          "start_line": 76,
          "end_line": 80
        },
        {
          "name": "test_time_remaining_column",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "str",
            "FakeTask",
            "TimeRemainingColumn",
            "column",
            "Task"
          ],
          "variables": [
            "time_remaining",
            "column",
            "task",
            "text",
            "text"
          ],
          "start_line": 83,
          "end_line": 93
        },
        {
          "name": "test_compact_time_remaining_column",
          "parameters": [
            {
              "name": "task_time",
              "type": null
            },
            {
              "name": "formatted",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "TimeRemainingColumn",
            "SimpleNamespace",
            "str",
            "column.render"
          ],
          "variables": [
            "task",
            "column"
          ],
          "start_line": 106,
          "end_line": 110
        },
        {
          "name": "test_time_remaining_column_elapsed_when_finished",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "TimeRemainingColumn",
            "SimpleNamespace",
            "str",
            "column.render"
          ],
          "variables": [
            "task_time",
            "formatted",
            "task",
            "column"
          ],
          "start_line": 113,
          "end_line": 120
        },
        {
          "name": "test_renderable_column",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Task",
            "RenderableColumn",
            "column.render"
          ],
          "variables": [
            "column",
            "task"
          ],
          "start_line": 123,
          "end_line": 126
        },
        {
          "name": "test_spinner_column",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "column.set_spinner",
            "repr",
            "SpinnerColumn",
            "str",
            "column.spinner.update",
            "Task",
            "print",
            "column.render"
          ],
          "variables": [
            "time",
            "column",
            "task",
            "result",
            "expected",
            "result",
            "expected"
          ],
          "start_line": 129,
          "end_line": 149
        },
        {
          "name": "get_time",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 132,
          "end_line": 134
        },
        {
          "name": "test_download_progress_uses_decimal_units",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "column.render",
            "DownloadColumn",
            "Task",
            "str"
          ],
          "variables": [
            "column",
            "test_task",
            "rendered_progress",
            "expected"
          ],
          "start_line": 152,
          "end_line": 157
        },
        {
          "name": "test_download_progress_uses_binary_units",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "column.render",
            "DownloadColumn",
            "Task",
            "str"
          ],
          "variables": [
            "column",
            "test_task",
            "rendered_progress",
            "expected"
          ],
          "start_line": 160,
          "end_line": 165
        },
        {
          "name": "test_task_ids",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "make_progress"
          ],
          "variables": [
            "progress"
          ],
          "start_line": 168,
          "end_line": 170
        },
        {
          "name": "test_finished",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "make_progress"
          ],
          "variables": [
            "progress"
          ],
          "start_line": 173,
          "end_line": 175
        },
        {
          "name": "make_progress",
          "parameters": [],
          "return_type": "Progress",
          "docstring": null,
          "calls": [
            "progress.add_task",
            "Progress",
            "progress.start_task",
            "progress.advance",
            "progress.update",
            "Console",
            "progress.remove_task",
            "progress.stop_task",
            "io.StringIO"
          ],
          "variables": [
            "_time",
            "console",
            "progress",
            "task1",
            "task2",
            "task3",
            "task4",
            "task4"
          ],
          "start_line": 178,
          "end_line": 210
        },
        {
          "name": "fake_time",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 181,
          "end_line": 186
        },
        {
          "name": "render_progress",
          "parameters": [],
          "return_type": "str",
          "docstring": null,
          "calls": [
            "progress.start",
            "make_progress",
            "progress.console.file.getvalue",
            "progress.stop"
          ],
          "variables": [
            "progress",
            "progress_render"
          ],
          "start_line": 213,
          "end_line": 220
        },
        {
          "name": "test_expand_bar",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "progress.add_task",
            "repr",
            "Progress",
            "BarColumn",
            "console.file.getvalue",
            "Console",
            "print",
            "io.StringIO"
          ],
          "variables": [
            "console",
            "progress",
            "expected",
            "render_result"
          ],
          "start_line": 223,
          "end_line": 245
        },
        {
          "name": "test_progress_with_none_total_renders_a_pulsing_bar",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "progress.add_task",
            "repr",
            "Progress",
            "BarColumn",
            "console.file.getvalue",
            "Console",
            "print",
            "io.StringIO"
          ],
          "variables": [
            "console",
            "progress",
            "expected",
            "render_result"
          ],
          "start_line": 248,
          "end_line": 270
        },
        {
          "name": "test_render",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "render_progress",
            "repr",
            "print"
          ],
          "variables": [
            "expected",
            "render_result"
          ],
          "start_line": 273,
          "end_line": 277
        },
        {
          "name": "test_track",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "repr",
            "iter",
            "console.file.getvalue",
            "Console",
            "MockClock",
            "track",
            "next",
            "print",
            "io.StringIO"
          ],
          "variables": [
            "console",
            "test",
            "expected_values",
            "result",
            "expected"
          ],
          "start_line": 280,
          "end_line": 306
        },
        {
          "name": "test_progress_track",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "repr",
            "iter",
            "Progress",
            "console.file.getvalue",
            "progress.track",
            "Console",
            "MockClock",
            "next",
            "print",
            "io.StringIO"
          ],
          "variables": [
            "console",
            "progress",
            "test",
            "expected_values",
            "result",
            "expected"
          ],
          "start_line": 309,
          "end_line": 335
        },
        {
          "name": "test_columns",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "DownloadColumn",
            "repr",
            "MofNCompleteColumn",
            "BarColumn",
            "TextColumn",
            "TransferSpeedColumn",
            "console.file.getvalue",
            "console.log",
            "Console",
            "io.StringIO",
            "console.print",
            "range",
            "progress.refresh",
            "progress.add_task",
            "Progress",
            "TotalFileSizeColumn",
            "TimeRemainingColumn",
            "replace_link_ids",
            "print",
            "TimeElapsedColumn",
            "progress.advance",
            "MockClock",
            "FileSizeColumn"
          ],
          "variables": [
            "console",
            "progress",
            "task1",
            "task2",
            "result",
            "expected"
          ],
          "start_line": 338,
          "end_line": 382
        },
        {
          "name": "test_using_default_columns",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "Progress.get_default_columns",
            "Progress",
            "type",
            "TimeElapsedColumn",
            "SpinnerColumn"
          ],
          "variables": [
            "expected_default_types",
            "progress",
            "progress"
          ],
          "start_line": 385,
          "end_line": 408
        },
        {
          "name": "test_task_create",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "TaskID",
            "Task"
          ],
          "variables": [
            "task"
          ],
          "start_line": 411,
          "end_line": 417
        },
        {
          "name": "test_task_start",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "TaskID",
            "get_time",
            "Task"
          ],
          "variables": [
            "current_time",
            "task"
          ],
          "start_line": 420,
          "end_line": 436
        },
        {
          "name": "get_time",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 423,
          "end_line": 425
        },
        {
          "name": "test_task_zero_total",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "TaskID",
            "Task"
          ],
          "variables": [
            "task"
          ],
          "start_line": 439,
          "end_line": 441
        },
        {
          "name": "test_progress_create",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "Progress"
          ],
          "variables": [
            "progress"
          ],
          "start_line": 444,
          "end_line": 448
        },
        {
          "name": "test_track_thread",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "progress.add_task",
            "_TrackThread",
            "Progress",
            "sleep"
          ],
          "variables": [
            "progress",
            "task_id",
            "track_thread"
          ],
          "start_line": 451,
          "end_line": 462
        },
        {
          "name": "test_reset",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "progress.reset",
            "progress.add_task",
            "progress.advance",
            "Progress"
          ],
          "variables": [
            "progress",
            "task_id",
            "task"
          ],
          "start_line": 465,
          "end_line": 487
        },
        {
          "name": "test_progress_max_refresh",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "progress.add_task",
            "repr",
            "Progress",
            "TextColumn",
            "progress.update",
            "console.begin_capture",
            "Console",
            "range",
            "console.end_capture",
            "progress.refresh",
            "print"
          ],
          "variables": [
            "time",
            "time",
            "console",
            "column",
            "progress",
            "task_id",
            "result"
          ],
          "start_line": 490,
          "end_line": 527
        },
        {
          "name": "get_time",
          "parameters": [],
          "return_type": "float",
          "docstring": null,
          "calls": [],
          "variables": [
            "time"
          ],
          "start_line": 494,
          "end_line": 499
        },
        {
          "name": "test_live_is_started_if_progress_is_enabled",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "Progress"
          ],
          "variables": [
            "progress"
          ],
          "start_line": 530,
          "end_line": 534
        },
        {
          "name": "test_live_is_not_started_if_progress_is_disabled",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "Progress"
          ],
          "variables": [
            "progress"
          ],
          "start_line": 537,
          "end_line": 541
        },
        {
          "name": "test_no_output_if_progress_is_disabled",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "repr",
            "iter",
            "Progress",
            "console.file.getvalue",
            "progress.track",
            "Console",
            "next",
            "print",
            "io.StringIO"
          ],
          "variables": [
            "console",
            "progress",
            "test",
            "expected_values",
            "result",
            "expected"
          ],
          "start_line": 544,
          "end_line": 565
        },
        {
          "name": "test_open",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "Progress",
            "rich.progress.open",
            "Console",
            "f.read",
            "os.remove",
            "os.fdopen",
            "f.write",
            "tempfile.mkstemp",
            "io.StringIO"
          ],
          "variables": [
            "console",
            "progress"
          ],
          "start_line": 568,
          "end_line": 589
        },
        {
          "name": "test_open_text_mode",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "rich.progress.open",
            "f.read",
            "os.remove",
            "os.fdopen",
            "f.write",
            "tempfile.mkstemp"
          ],
          "variables": [],
          "start_line": 592,
          "end_line": 602
        },
        {
          "name": "test_wrap_file",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "rich.progress.wrap_file",
            "f.read",
            "os.remove",
            "os.fdopen",
            "f.write",
            "open",
            "tempfile.mkstemp"
          ],
          "variables": [
            "total"
          ],
          "start_line": 605,
          "end_line": 620
        },
        {
          "name": "test_wrap_file_task_total",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "progress.add_task",
            "Progress",
            "Console",
            "progress.wrap_file",
            "f.read",
            "os.remove",
            "os.fdopen",
            "f.write",
            "open",
            "tempfile.mkstemp",
            "io.StringIO"
          ],
          "variables": [
            "console",
            "progress",
            "total",
            "task_id"
          ],
          "start_line": 623,
          "end_line": 646
        },
        {
          "name": "test_task_progress_column_speed",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "TaskProgressColumn.render_speed"
          ],
          "variables": [
            "speed_text",
            "speed_text",
            "speed_text",
            "speed_text"
          ],
          "start_line": 649,
          "end_line": 660
        }
      ],
      "variables": [
        "bar_column",
        "task",
        "bar",
        "text_column",
        "task",
        "text",
        "text_column",
        "task",
        "text",
        "column",
        "task",
        "text",
        "time_remaining",
        "column",
        "task",
        "text",
        "text",
        "task",
        "column",
        "task_time",
        "formatted",
        "task",
        "column",
        "column",
        "task",
        "time",
        "column",
        "task",
        "result",
        "expected",
        "result",
        "expected",
        "column",
        "test_task",
        "rendered_progress",
        "expected",
        "column",
        "test_task",
        "rendered_progress",
        "expected",
        "progress",
        "progress",
        "_time",
        "console",
        "progress",
        "task1",
        "task2",
        "task3",
        "task4",
        "task4",
        "progress",
        "progress_render",
        "console",
        "progress",
        "expected",
        "render_result",
        "console",
        "progress",
        "expected",
        "render_result",
        "expected",
        "render_result",
        "console",
        "test",
        "expected_values",
        "result",
        "expected",
        "console",
        "progress",
        "test",
        "expected_values",
        "result",
        "expected",
        "console",
        "progress",
        "task1",
        "task2",
        "result",
        "expected",
        "expected_default_types",
        "progress",
        "progress",
        "task",
        "current_time",
        "task",
        "task",
        "progress",
        "progress",
        "task_id",
        "track_thread",
        "progress",
        "task_id",
        "task",
        "time",
        "time",
        "console",
        "column",
        "progress",
        "task_id",
        "result",
        "progress",
        "progress",
        "console",
        "progress",
        "test",
        "expected_values",
        "result",
        "expected",
        "console",
        "progress",
        "total",
        "console",
        "progress",
        "total",
        "task_id",
        "speed_text",
        "speed_text",
        "speed_text",
        "speed_text",
        "_render"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\tests\\test_prompt.py",
      "imports": [
        "import io",
        "from rich.console import Console",
        "from rich.prompt import Confirm, IntPrompt, Prompt"
      ],
      "classes": [],
      "functions": [
        {
          "name": "test_prompt_str",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Prompt.ask",
            "repr",
            "console.file.getvalue",
            "Console",
            "print",
            "io.StringIO"
          ],
          "variables": [
            "INPUT",
            "console",
            "name",
            "expected",
            "output"
          ],
          "start_line": 7,
          "end_line": 21
        },
        {
          "name": "test_prompt_str_case_insensitive",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Prompt.ask",
            "repr",
            "console.file.getvalue",
            "Console",
            "print",
            "io.StringIO"
          ],
          "variables": [
            "INPUT",
            "console",
            "name",
            "expected",
            "output"
          ],
          "start_line": 24,
          "end_line": 39
        },
        {
          "name": "test_prompt_str_default",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Prompt.ask",
            "repr",
            "console.file.getvalue",
            "Console",
            "print",
            "io.StringIO"
          ],
          "variables": [
            "INPUT",
            "console",
            "name",
            "expected",
            "output"
          ],
          "start_line": 42,
          "end_line": 55
        },
        {
          "name": "test_prompt_int",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "repr",
            "console.file.getvalue",
            "Console",
            "IntPrompt.ask",
            "print",
            "io.StringIO"
          ],
          "variables": [
            "INPUT",
            "console",
            "number",
            "expected",
            "output"
          ],
          "start_line": 58,
          "end_line": 70
        },
        {
          "name": "test_prompt_confirm_no",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "repr",
            "Confirm.ask",
            "console.file.getvalue",
            "Console",
            "print",
            "io.StringIO"
          ],
          "variables": [
            "INPUT",
            "console",
            "answer",
            "expected",
            "output"
          ],
          "start_line": 73,
          "end_line": 85
        },
        {
          "name": "test_prompt_confirm_yes",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "repr",
            "Confirm.ask",
            "console.file.getvalue",
            "Console",
            "print",
            "io.StringIO"
          ],
          "variables": [
            "INPUT",
            "console",
            "answer",
            "expected",
            "output"
          ],
          "start_line": 88,
          "end_line": 100
        },
        {
          "name": "test_prompt_confirm_default",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "repr",
            "Confirm.ask",
            "console.file.getvalue",
            "Console",
            "print",
            "io.StringIO"
          ],
          "variables": [
            "INPUT",
            "console",
            "answer",
            "expected",
            "output"
          ],
          "start_line": 103,
          "end_line": 113
        }
      ],
      "variables": [
        "INPUT",
        "console",
        "name",
        "expected",
        "output",
        "INPUT",
        "console",
        "name",
        "expected",
        "output",
        "INPUT",
        "console",
        "name",
        "expected",
        "output",
        "INPUT",
        "console",
        "number",
        "expected",
        "output",
        "INPUT",
        "console",
        "answer",
        "expected",
        "output",
        "INPUT",
        "console",
        "answer",
        "expected",
        "output",
        "INPUT",
        "console",
        "answer",
        "expected",
        "output"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\tests\\test_protocol.py",
      "imports": [
        "import io",
        "from rich.abc import RichRenderable",
        "from rich.console import Console",
        "from rich.panel import Panel",
        "from rich.text import Text"
      ],
      "classes": [
        {
          "name": "Foo",
          "base_classes": null,
          "docstring": null,
          "methods": []
        },
        {
          "name": "Fake",
          "base_classes": null,
          "docstring": null,
          "methods": []
        },
        {
          "name": "B",
          "base_classes": null,
          "docstring": null,
          "methods": []
        },
        {
          "name": "A",
          "base_classes": null,
          "docstring": null,
          "methods": []
        },
        {
          "name": "B",
          "base_classes": null,
          "docstring": null,
          "methods": []
        },
        {
          "name": "A",
          "base_classes": null,
          "docstring": null,
          "methods": []
        }
      ],
      "functions": [
        {
          "name": "__rich__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "Text",
          "docstring": null,
          "calls": [
            "Text"
          ],
          "variables": [],
          "start_line": 10,
          "end_line": 11
        },
        {
          "name": "test_rich_cast",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "console.print",
            "Foo",
            "console.file.getvalue",
            "Console",
            "io.StringIO"
          ],
          "variables": [
            "foo",
            "console"
          ],
          "start_line": 14,
          "end_line": 18
        },
        {
          "name": "__getattr__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "name",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 22,
          "end_line": 23
        },
        {
          "name": "__repr__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "str",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 25,
          "end_line": 26
        },
        {
          "name": "test_rich_cast_fake",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Fake",
            "console.print",
            "console.file.getvalue",
            "Console",
            "io.StringIO"
          ],
          "variables": [
            "fake",
            "console"
          ],
          "start_line": 29,
          "end_line": 33
        },
        {
          "name": "test_rich_cast_container",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Panel.fit",
            "console.print",
            "Foo",
            "console.file.getvalue",
            "Console",
            "io.StringIO"
          ],
          "variables": [
            "foo",
            "console"
          ],
          "start_line": 36,
          "end_line": 40
        },
        {
          "name": "test_abc",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Panel",
            "isinstance",
            "Text",
            "Foo"
          ],
          "variables": [
            "foo"
          ],
          "start_line": 43,
          "end_line": 50
        },
        {
          "name": "test_cast_deep",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "console.print",
            "Foo",
            "A",
            "console.file.getvalue",
            "Console",
            "B",
            "io.StringIO"
          ],
          "variables": [
            "console"
          ],
          "start_line": 53,
          "end_line": 64
        },
        {
          "name": "__rich__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "Foo",
          "docstring": null,
          "calls": [
            "Foo"
          ],
          "variables": [],
          "start_line": 55,
          "end_line": 56
        },
        {
          "name": "__rich__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "B",
          "docstring": null,
          "calls": [
            "B"
          ],
          "variables": [],
          "start_line": 59,
          "end_line": 60
        },
        {
          "name": "test_cast_recursive",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "console.print",
            "A",
            "console.file.getvalue",
            "Console",
            "B",
            "io.StringIO"
          ],
          "variables": [
            "console"
          ],
          "start_line": 67,
          "end_line": 84
        },
        {
          "name": "__rich__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "\"A\"",
          "docstring": null,
          "calls": [
            "A"
          ],
          "variables": [],
          "start_line": 69,
          "end_line": 70
        },
        {
          "name": "__repr__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "str",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 72,
          "end_line": 73
        },
        {
          "name": "__rich__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "B",
          "docstring": null,
          "calls": [
            "B"
          ],
          "variables": [],
          "start_line": 76,
          "end_line": 77
        },
        {
          "name": "__repr__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": "str",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 79,
          "end_line": 80
        }
      ],
      "variables": [
        "foo",
        "console",
        "fake",
        "console",
        "foo",
        "console",
        "foo",
        "console",
        "console"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\tests\\test_ratio.py",
      "imports": [
        "import pytest",
        "from typing import NamedTuple, Optional",
        "from rich._ratio import ratio_reduce, ratio_resolve"
      ],
      "classes": [
        {
          "name": "Edge",
          "base_classes": "(NamedTuple)",
          "docstring": null,
          "methods": []
        }
      ],
      "functions": [
        {
          "name": "test_ratio_reduce",
          "parameters": [
            {
              "name": "total",
              "type": null
            },
            {
              "name": "ratios",
              "type": null
            },
            {
              "name": "maximums",
              "type": null
            },
            {
              "name": "values",
              "type": null
            },
            {
              "name": "result",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "ratio_reduce"
          ],
          "variables": [],
          "start_line": 24,
          "end_line": 25
        },
        {
          "name": "test_ratio_resolve",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "ratio_resolve",
            "Edge"
          ],
          "variables": [],
          "start_line": 28,
          "end_line": 58
        }
      ],
      "variables": [
        "size",
        "ratio",
        "minimum_size"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\tests\\test_repr.py",
      "imports": [
        "from typing import Optional",
        "import pytest",
        "import rich.repr",
        "from rich.console import Console",
        "from inspect import Parameter"
      ],
      "classes": [
        {
          "name": "Foo",
          "base_classes": null,
          "docstring": null,
          "methods": []
        },
        {
          "name": "Egg",
          "base_classes": null,
          "docstring": null,
          "methods": []
        },
        {
          "name": "BrokenEgg",
          "base_classes": null,
          "docstring": null,
          "methods": []
        },
        {
          "name": "AngularEgg",
          "base_classes": null,
          "docstring": null,
          "methods": []
        },
        {
          "name": "Bar",
          "base_classes": "(Foo)",
          "docstring": null,
          "methods": []
        },
        {
          "name": "StupidClass",
          "base_classes": null,
          "docstring": null,
          "methods": []
        },
        {
          "name": "NotStupid",
          "base_classes": null,
          "docstring": null,
          "methods": []
        },
        {
          "name": "Bird",
          "base_classes": null,
          "docstring": null,
          "methods": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "str"
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 13,
          "end_line": 16
        },
        {
          "name": "__rich_repr__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 18,
          "end_line": 22
        },
        {
          "name": "__init__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "str"
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 27,
          "end_line": 30
        },
        {
          "name": "__init__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "str"
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 35,
          "end_line": 38
        },
        {
          "name": "__init__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "str"
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 43,
          "end_line": 46
        },
        {
          "name": "__rich_repr__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 51,
          "end_line": 55
        },
        {
          "name": "__init__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "a",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 61,
          "end_line": 62
        },
        {
          "name": "__eq__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "other",
              "type": null
            }
          ],
          "return_type": "bool",
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 64,
          "end_line": 70
        },
        {
          "name": "__ne__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": null,
              "type": "object"
            }
          ],
          "return_type": "bool",
          "docstring": null,
          "calls": [
            "self.__eq__"
          ],
          "variables": [],
          "start_line": 72,
          "end_line": 73
        },
        {
          "name": "__init__",
          "parameters": [
            {
              "name": "self",
              "type": null
            },
            {
              "name": "name",
              "type": null
            },
            {
              "name": "eats",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 82,
          "end_line": 89
        },
        {
          "name": "test_rich_repr",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "repr",
            "Foo"
          ],
          "variables": [],
          "start_line": 92,
          "end_line": 94
        },
        {
          "name": "test_rich_repr_positional_only",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "locals().copy",
            "repr",
            "globals",
            "_locals[\"PosOnly\"]",
            "exec",
            "locals"
          ],
          "variables": [
            "_locals",
            "p"
          ],
          "start_line": 97,
          "end_line": 110
        },
        {
          "name": "test_rich_angular",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "repr",
            "Bar"
          ],
          "variables": [],
          "start_line": 113,
          "end_line": 115
        },
        {
          "name": "test_rich_repr_auto",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "repr",
            "Bird",
            "NotStupid",
            "StupidClass",
            "Egg"
          ],
          "variables": [
            "stupid_class",
            "not_stupid"
          ],
          "start_line": 118,
          "end_line": 125
        },
        {
          "name": "test_rich_repr_auto_angular",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "AngularEgg",
            "repr"
          ],
          "variables": [],
          "start_line": 128,
          "end_line": 129
        },
        {
          "name": "test_broken_egg",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "pytest.raises",
            "repr",
            "BrokenEgg"
          ],
          "variables": [],
          "start_line": 132,
          "end_line": 134
        },
        {
          "name": "test_rich_pretty",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "console.capture",
            "Foo",
            "console.print",
            "Console",
            "capture.get"
          ],
          "variables": [
            "console",
            "result",
            "expected"
          ],
          "start_line": 137,
          "end_line": 143
        },
        {
          "name": "test_rich_pretty_angular",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "console.capture",
            "console.print",
            "Bar",
            "Console",
            "capture.get"
          ],
          "variables": [
            "console",
            "result",
            "expected"
          ],
          "start_line": 146,
          "end_line": 152
        }
      ],
      "variables": [
        "_locals",
        "p",
        "stupid_class",
        "not_stupid",
        "console",
        "result",
        "expected",
        "console",
        "result",
        "expected"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\tests\\test_rich_print.py",
      "imports": [
        "import io",
        "import json",
        "import rich",
        "from rich.console import Console"
      ],
      "classes": [],
      "functions": [
        {
          "name": "test_get_console",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "rich.get_console",
            "isinstance"
          ],
          "variables": [
            "console"
          ],
          "start_line": 8,
          "end_line": 10
        },
        {
          "name": "test_reconfigure_console",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "rich.get_console",
            "rich.reconfigure"
          ],
          "variables": [],
          "start_line": 13,
          "end_line": 15
        },
        {
          "name": "test_rich_print",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "output.getvalue",
            "rich.get_console",
            "rich.print",
            "io.StringIO"
          ],
          "variables": [
            "console",
            "output",
            "backup_file"
          ],
          "start_line": 18,
          "end_line": 29
        },
        {
          "name": "test_rich_print_json",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "console.capture",
            "repr",
            "rich.get_console",
            "rich.print_json",
            "capture.get",
            "print"
          ],
          "variables": [
            "console",
            "result",
            "expected"
          ],
          "start_line": 32,
          "end_line": 39
        },
        {
          "name": "test_rich_print_json_round_trip",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "console.capture",
            "repr",
            "json.loads",
            "rich.get_console",
            "rich.print_json",
            "capture.get",
            "print"
          ],
          "variables": [
            "data",
            "console",
            "result",
            "result_data"
          ],
          "start_line": 42,
          "end_line": 50
        },
        {
          "name": "test_rich_print_json_no_truncation",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "console.capture",
            "int",
            "repr",
            "str",
            "rich.get_console",
            "rich.print_json",
            "capture.get",
            "print"
          ],
          "variables": [
            "console",
            "result"
          ],
          "start_line": 53,
          "end_line": 60
        },
        {
          "name": "test_rich_print_X",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "output.getvalue",
            "rich.get_console",
            "rich.print",
            "io.StringIO"
          ],
          "variables": [
            "console",
            "output",
            "backup_file"
          ],
          "start_line": 63,
          "end_line": 74
        }
      ],
      "variables": [
        "console",
        "console",
        "output",
        "backup_file",
        "console",
        "result",
        "expected",
        "data",
        "console",
        "result",
        "result_data",
        "console",
        "result",
        "console",
        "output",
        "backup_file"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\tests\\test_rule.py",
      "imports": [
        "import io",
        "import pytest",
        "from rich.console import Console",
        "from rich.rule import Rule",
        "from rich.text import Text"
      ],
      "classes": [],
      "functions": [
        {
          "name": "test_rule",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Rule",
            "console.print",
            "console.rule",
            "console.file.getvalue",
            "Console",
            "Text",
            "io.StringIO"
          ],
          "variables": [
            "console",
            "expected",
            "result"
          ],
          "start_line": 10,
          "end_line": 28
        },
        {
          "name": "test_rule_error",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Console",
            "pytest.raises",
            "console.rule",
            "io.StringIO"
          ],
          "variables": [
            "console"
          ],
          "start_line": 31,
          "end_line": 34
        },
        {
          "name": "test_rule_align",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "repr",
            "console.rule",
            "console.file.getvalue",
            "Console",
            "print",
            "io.StringIO"
          ],
          "variables": [
            "console",
            "result",
            "expected"
          ],
          "start_line": 37,
          "end_line": 47
        },
        {
          "name": "test_rule_cjk",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Console",
            "console.rule",
            "console.file.getvalue",
            "io.StringIO"
          ],
          "variables": [
            "console",
            "expected"
          ],
          "start_line": 50,
          "end_line": 61
        },
        {
          "name": "test_rule_not_enough_space_for_title_text",
          "parameters": [
            {
              "name": "align",
              "type": null
            },
            {
              "name": "outcome",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Console",
            "console.rule",
            "console.file.getvalue",
            "io.StringIO"
          ],
          "variables": [
            "console"
          ],
          "start_line": 72,
          "end_line": 75
        },
        {
          "name": "test_rule_center_aligned_title_not_enough_space_for_rule",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Console",
            "console.rule",
            "console.file.getvalue",
            "io.StringIO"
          ],
          "variables": [
            "console"
          ],
          "start_line": 78,
          "end_line": 81
        },
        {
          "name": "test_rule_side_aligned_not_enough_space_for_rule",
          "parameters": [
            {
              "name": "align",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Console",
            "console.rule",
            "console.file.getvalue",
            "io.StringIO"
          ],
          "variables": [
            "console"
          ],
          "start_line": 85,
          "end_line": 88
        },
        {
          "name": "test_rule_just_enough_width_available_for_title",
          "parameters": [
            {
              "name": "align",
              "type": null
            },
            {
              "name": "outcome",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Console",
            "console.rule",
            "console.file.getvalue",
            "io.StringIO"
          ],
          "variables": [
            "console"
          ],
          "start_line": 99,
          "end_line": 102
        },
        {
          "name": "test_characters",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Rule",
            "console.print",
            "console.rule",
            "console.file.getvalue",
            "Console",
            "io.StringIO"
          ],
          "variables": [
            "console",
            "expected"
          ],
          "start_line": 105,
          "end_line": 120
        },
        {
          "name": "test_repr",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "isinstance",
            "repr",
            "Rule"
          ],
          "variables": [
            "rule"
          ],
          "start_line": 123,
          "end_line": 125
        },
        {
          "name": "test_error",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "pytest.raises",
            "Rule"
          ],
          "variables": [],
          "start_line": 128,
          "end_line": 130
        }
      ],
      "variables": [
        "console",
        "expected",
        "result",
        "console",
        "console",
        "result",
        "expected",
        "console",
        "expected",
        "console",
        "console",
        "console",
        "console",
        "console",
        "expected",
        "rule"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\tests\\test_rule_in_table.py",
      "imports": [
        "import io",
        "from textwrap import dedent",
        "import pytest",
        "from rich import box",
        "from rich.console import Console",
        "from rich.rule import Rule",
        "from rich.table import Table"
      ],
      "classes": [],
      "functions": [
        {
          "name": "test_rule_in_unexpanded_table",
          "parameters": [
            {
              "name": "expand_kwarg",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Rule",
            "console.print",
            "table.add_row",
            "console.file.getvalue",
            "Table",
            "Console",
            "table.add_column",
            "dedent",
            "io.StringIO"
          ],
          "variables": [
            "console",
            "table",
            "expected",
            "result"
          ],
          "start_line": 13,
          "end_line": 32
        },
        {
          "name": "test_rule_in_expanded_table",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Rule",
            "console.print",
            "table.add_row",
            "console.file.getvalue",
            "Table",
            "Console",
            "table.add_column",
            "dedent",
            "io.StringIO"
          ],
          "variables": [
            "console",
            "table",
            "expected",
            "result"
          ],
          "start_line": 35,
          "end_line": 54
        },
        {
          "name": "test_rule_in_ratio_table",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Rule",
            "console.print",
            "table.add_row",
            "console.file.getvalue",
            "Table",
            "Console",
            "table.add_column",
            "dedent",
            "io.StringIO"
          ],
          "variables": [
            "console",
            "table",
            "expected",
            "result"
          ],
          "start_line": 57,
          "end_line": 76
        }
      ],
      "variables": [
        "console",
        "table",
        "expected",
        "result",
        "console",
        "table",
        "expected",
        "result",
        "console",
        "table",
        "expected",
        "result"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\tests\\test_screen.py",
      "imports": [
        "from rich.console import Console",
        "from rich.screen import Screen"
      ],
      "classes": [],
      "functions": [
        {
          "name": "test_screen",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "console.capture",
            "repr",
            "console.print",
            "Console",
            "Screen",
            "capture.get",
            "print"
          ],
          "variables": [
            "console",
            "result",
            "expected"
          ],
          "start_line": 5,
          "end_line": 12
        }
      ],
      "variables": [
        "console",
        "result",
        "expected"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\tests\\test_segment.py",
      "imports": [
        "from io import StringIO",
        "import pytest",
        "from rich.cells import cell_len",
        "from rich.segment import ControlType, Segment, SegmentLines, Segments",
        "from rich.style import Style",
        "from rich.console import Console",
        "from rich.text import Text"
      ],
      "classes": [],
      "functions": [
        {
          "name": "test_repr",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "repr",
            "Segment"
          ],
          "variables": [
            "home"
          ],
          "start_line": 10,
          "end_line": 16
        },
        {
          "name": "test_line",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Segment.line",
            "Segment"
          ],
          "variables": [],
          "start_line": 19,
          "end_line": 20
        },
        {
          "name": "test_apply_style",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "list",
            "Segment.apply_style",
            "Style",
            "Segment"
          ],
          "variables": [
            "segments"
          ],
          "start_line": 23,
          "end_line": 29
        },
        {
          "name": "test_split_lines",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "list",
            "Segment.split_lines",
            "Segment"
          ],
          "variables": [
            "lines"
          ],
          "start_line": 32,
          "end_line": 34
        },
        {
          "name": "test_split_and_crop_lines",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "list",
            "Segment.split_and_crop_lines",
            "Segment"
          ],
          "variables": [],
          "start_line": 37,
          "end_line": 44
        },
        {
          "name": "test_adjust_line_length",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Segment",
            "Segment.adjust_line_length"
          ],
          "variables": [
            "line",
            "line",
            "line"
          ],
          "start_line": 47,
          "end_line": 58
        },
        {
          "name": "test_get_line_length",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Segment.get_line_length",
            "Segment"
          ],
          "variables": [],
          "start_line": 61,
          "end_line": 62
        },
        {
          "name": "test_get_shape",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Segment.get_shape",
            "Segment"
          ],
          "variables": [],
          "start_line": 65,
          "end_line": 67
        },
        {
          "name": "test_set_shape",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Segment.set_shape",
            "Segment"
          ],
          "variables": [],
          "start_line": 70,
          "end_line": 77
        },
        {
          "name": "test_simplify",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "list",
            "Segment",
            "Segment.simplify"
          ],
          "variables": [],
          "start_line": 80,
          "end_line": 89
        },
        {
          "name": "test_filter_control",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "list",
            "Segment.filter_control",
            "Segment"
          ],
          "variables": [
            "control_code",
            "segments"
          ],
          "start_line": 92,
          "end_line": 98
        },
        {
          "name": "test_strip_styles",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "list",
            "Segment.strip_styles",
            "Style",
            "Segment"
          ],
          "variables": [
            "segments"
          ],
          "start_line": 101,
          "end_line": 103
        },
        {
          "name": "test_strip_links",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "list",
            "Segment.strip_links",
            "Style",
            "Segment"
          ],
          "variables": [
            "segments"
          ],
          "start_line": 106,
          "end_line": 108
        },
        {
          "name": "test_remove_color",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "list",
            "Segment.remove_color",
            "Style",
            "Segment"
          ],
          "variables": [
            "segments"
          ],
          "start_line": 111,
          "end_line": 119
        },
        {
          "name": "test_is_control",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Style",
            "Segment"
          ],
          "variables": [],
          "start_line": 122,
          "end_line": 125
        },
        {
          "name": "test_segments_renderable",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "list",
            "Segment",
            "Segment.line",
            "Segments",
            "segments.__rich_console__"
          ],
          "variables": [
            "segments",
            "segments"
          ],
          "start_line": 128,
          "end_line": 136
        },
        {
          "name": "test_divide",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "list",
            "Style",
            "Segment",
            "Segment.divide"
          ],
          "variables": [
            "bold",
            "italic",
            "segments"
          ],
          "start_line": 139,
          "end_line": 166
        },
        {
          "name": "test_divide_complex",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Text.from_markup",
            "StringIO",
            "repr",
            "console.print",
            "console.file.getvalue",
            "Console",
            "print"
          ],
          "variables": [
            "MAP",
            "text",
            "console",
            "result",
            "expected"
          ],
          "start_line": 170,
          "end_line": 194
        },
        {
          "name": "test_divide_emoji",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "list",
            "Style",
            "Segment",
            "Segment.divide"
          ],
          "variables": [
            "bold",
            "italic",
            "segments"
          ],
          "start_line": 197,
          "end_line": 221
        },
        {
          "name": "test_divide_edge",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "list",
            "Segment",
            "print",
            "Segment.divide"
          ],
          "variables": [
            "segments",
            "result"
          ],
          "start_line": 224,
          "end_line": 232
        },
        {
          "name": "test_divide_edge_2",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "repr",
            "list",
            "Segment",
            "Segment.divide",
            "print"
          ],
          "variables": [
            "segments",
            "result",
            "expected"
          ],
          "start_line": 235,
          "end_line": 248
        },
        {
          "name": "test_split_cells_emoji",
          "parameters": [
            {
              "name": "text",
              "type": null
            },
            {
              "name": "split",
              "type": null
            },
            {
              "name": "result",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Segment",
            "Segment(text).split_cells"
          ],
          "variables": [],
          "start_line": 284,
          "end_line": 285
        },
        {
          "name": "test_split_cells_mixed",
          "parameters": [
            {
              "name": null,
              "type": "Segment"
            }
          ],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "range",
            "Segment.split_cells",
            "cell_len",
            "all"
          ],
          "variables": [],
          "start_line": 301,
          "end_line": 311
        },
        {
          "name": "test_split_cells_doubles",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "range",
            "Segment.split_cells",
            "Segment",
            "cell_len"
          ],
          "variables": [
            "test"
          ],
          "start_line": 314,
          "end_line": 320
        },
        {
          "name": "test_split_cells_single",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "range",
            "Segment.split_cells",
            "Segment",
            "cell_len"
          ],
          "variables": [
            "test"
          ],
          "start_line": 323,
          "end_line": 329
        },
        {
          "name": "test_segment_lines_renderable",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "list",
            "segment_lines.__rich_console__",
            "Segment",
            "SegmentLines"
          ],
          "variables": [
            "lines",
            "segment_lines",
            "segment_lines"
          ],
          "start_line": 332,
          "end_line": 350
        },
        {
          "name": "test_align_top",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Style",
            "Segment.align_top",
            "Segment"
          ],
          "variables": [
            "lines"
          ],
          "start_line": 353,
          "end_line": 360
        },
        {
          "name": "test_align_middle",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Style",
            "Segment.align_middle",
            "Segment"
          ],
          "variables": [
            "lines"
          ],
          "start_line": 363,
          "end_line": 370
        },
        {
          "name": "test_align_bottom",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Segment.align_bottom",
            "Style",
            "Segment"
          ],
          "variables": [
            "lines"
          ],
          "start_line": 373,
          "end_line": 380
        }
      ],
      "variables": [
        "home",
        "segments",
        "lines",
        "line",
        "line",
        "line",
        "control_code",
        "segments",
        "segments",
        "segments",
        "segments",
        "segments",
        "segments",
        "bold",
        "italic",
        "segments",
        "MAP",
        "text",
        "console",
        "result",
        "expected",
        "bold",
        "italic",
        "segments",
        "segments",
        "result",
        "segments",
        "result",
        "expected",
        "test",
        "test",
        "lines",
        "segment_lines",
        "segment_lines",
        "lines",
        "lines",
        "lines"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\tests\\test_spinner.py",
      "imports": [
        "import pytest",
        "from rich.console import Console",
        "from rich.measure import Measurement",
        "from rich.rule import Rule",
        "from rich.spinner import Spinner",
        "from rich.text import Text"
      ],
      "classes": [],
      "functions": [
        {
          "name": "test_spinner_create",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Spinner",
            "pytest.raises"
          ],
          "variables": [],
          "start_line": 10,
          "end_line": 13
        },
        {
          "name": "test_spinner_render",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "repr",
            "console.print",
            "console.end_capture",
            "Console",
            "console.begin_capture",
            "Spinner",
            "print"
          ],
          "variables": [
            "time",
            "console",
            "spinner",
            "result",
            "expected"
          ],
          "start_line": 16,
          "end_line": 34
        },
        {
          "name": "get_time",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 19,
          "end_line": 21
        },
        {
          "name": "test_spinner_update",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "repr",
            "spinner.update",
            "Rule",
            "console.print",
            "console.begin_capture",
            "Console",
            "console.end_capture",
            "Spinner",
            "print"
          ],
          "variables": [
            "time",
            "console",
            "spinner",
            "rule",
            "result",
            "expected"
          ],
          "start_line": 37,
          "end_line": 58
        },
        {
          "name": "get_time",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 40,
          "end_line": 42
        },
        {
          "name": "test_rich_measure",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Console",
            "Spinner",
            "Measurement.get"
          ],
          "variables": [
            "console",
            "spinner"
          ],
          "start_line": 61,
          "end_line": 66
        },
        {
          "name": "test_spinner_markup",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Spinner",
            "str",
            "isinstance"
          ],
          "variables": [
            "spinner"
          ],
          "start_line": 69,
          "end_line": 72
        }
      ],
      "variables": [
        "time",
        "console",
        "spinner",
        "result",
        "expected",
        "time",
        "console",
        "spinner",
        "rule",
        "result",
        "expected",
        "console",
        "spinner",
        "spinner"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\tests\\test_stack.py",
      "imports": [
        "from rich._stack import Stack"
      ],
      "classes": [],
      "functions": [
        {
          "name": "test_stack",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "stack.pop",
            "stack.push",
            "Stack"
          ],
          "variables": [
            "stack"
          ],
          "start_line": 4,
          "end_line": 10
        }
      ],
      "variables": [
        "stack"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\tests\\test_status.py",
      "imports": [
        "from time import sleep",
        "from rich.console import Console",
        "from rich.spinner import Spinner",
        "from rich.status import Status"
      ],
      "classes": [],
      "functions": [
        {
          "name": "test_status",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Status",
            "status.update",
            "Console",
            "isinstance",
            "sleep"
          ],
          "variables": [
            "console",
            "status",
            "previous_status_renderable"
          ],
          "start_line": 8,
          "end_line": 24
        },
        {
          "name": "test_renderable",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Status",
            "console.print",
            "console.end_capture",
            "Console",
            "console.begin_capture"
          ],
          "variables": [
            "console",
            "status"
          ],
          "start_line": 27,
          "end_line": 34
        }
      ],
      "variables": [
        "console",
        "status",
        "previous_status_renderable",
        "console",
        "status"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\tests\\test_style.py",
      "imports": [
        "import pytest",
        "from rich import errors",
        "from rich.color import Color, ColorSystem, ColorType",
        "from rich.style import Style, StyleStack"
      ],
      "classes": [],
      "functions": [
        {
          "name": "test_str",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Style",
            "str"
          ],
          "variables": [
            "all_styles",
            "expected"
          ],
          "start_line": 8,
          "end_line": 35
        },
        {
          "name": "test_ansi_codes",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "all_styles._make_ansi_codes",
            "Style"
          ],
          "variables": [
            "all_styles",
            "expected"
          ],
          "start_line": 38,
          "end_line": 57
        },
        {
          "name": "test_repr",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "repr",
            "Style"
          ],
          "variables": [],
          "start_line": 60,
          "end_line": 64
        },
        {
          "name": "test_eq",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Style().__eq__",
            "Style"
          ],
          "variables": [],
          "start_line": 67,
          "end_line": 70
        },
        {
          "name": "test_hash",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "isinstance",
            "Style",
            "hash"
          ],
          "variables": [],
          "start_line": 73,
          "end_line": 74
        },
        {
          "name": "test_empty",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Style",
            "Style.null"
          ],
          "variables": [],
          "start_line": 77,
          "end_line": 78
        },
        {
          "name": "test_bool",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "bool",
            "Style",
            "Style.parse"
          ],
          "variables": [],
          "start_line": 81,
          "end_line": 85
        },
        {
          "name": "test_color_property",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Style",
            "Color"
          ],
          "variables": [],
          "start_line": 88,
          "end_line": 89
        },
        {
          "name": "test_bgcolor_property",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Style",
            "Color"
          ],
          "variables": [],
          "start_line": 92,
          "end_line": 93
        },
        {
          "name": "test_parse",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "pytest.raises",
            "Style",
            "Style.parse"
          ],
          "variables": [],
          "start_line": 96,
          "end_line": 115
        },
        {
          "name": "test_link_id",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "len",
            "isinstance",
            "Style",
            "Style.parse"
          ],
          "variables": [
            "style"
          ],
          "start_line": 118,
          "end_line": 124
        },
        {
          "name": "test_get_html_style",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Style(\n        reverse=True,\n        dim=True,\n        color=\"red\",\n        bgcolor=\"blue\",\n        bold=True,\n        italic=True,\n        underline=True,\n        strike=True,\n        overline=True,\n    ).get_html_style",
            "Style",
            "print",
            "repr"
          ],
          "variables": [
            "expected",
            "html_style"
          ],
          "start_line": 127,
          "end_line": 141
        },
        {
          "name": "test_chain",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Style.chain",
            "Style"
          ],
          "variables": [],
          "start_line": 144,
          "end_line": 147
        },
        {
          "name": "test_copy",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Style",
            "style.copy"
          ],
          "variables": [
            "style"
          ],
          "start_line": 150,
          "end_line": 153
        },
        {
          "name": "test_render",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Style",
            "Style(color=\"red\").render",
            "Style().render",
            "Style(color=\"red\", bgcolor=\"black\", bold=True).render"
          ],
          "variables": [],
          "start_line": 156,
          "end_line": 162
        },
        {
          "name": "test_test",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Style(color=\"red\").test",
            "Style"
          ],
          "variables": [],
          "start_line": 165,
          "end_line": 166
        },
        {
          "name": "test_add",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Style"
          ],
          "variables": [],
          "start_line": 169,
          "end_line": 170
        },
        {
          "name": "test_iadd",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Style"
          ],
          "variables": [
            "style"
          ],
          "start_line": 173,
          "end_line": 178
        },
        {
          "name": "test_style_stack",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "stack.pop",
            "stack.push",
            "repr",
            "StyleStack",
            "Style"
          ],
          "variables": [
            "stack"
          ],
          "start_line": 181,
          "end_line": 188
        },
        {
          "name": "test_pick_first",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Style.pick_first",
            "pytest.raises"
          ],
          "variables": [],
          "start_line": 191,
          "end_line": 193
        },
        {
          "name": "test_background_style",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Style"
          ],
          "variables": [],
          "start_line": 196,
          "end_line": 199
        },
        {
          "name": "test_without_color",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Style",
            "Style.null"
          ],
          "variables": [
            "style",
            "colorless_style",
            "null_style"
          ],
          "start_line": 202,
          "end_line": 209
        },
        {
          "name": "test_meta",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "repr",
            "Style"
          ],
          "variables": [
            "style"
          ],
          "start_line": 212,
          "end_line": 220
        },
        {
          "name": "test_from_meta",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Style.from_meta"
          ],
          "variables": [
            "style"
          ],
          "start_line": 223,
          "end_line": 226
        },
        {
          "name": "test_on",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Style.on",
            "Style"
          ],
          "variables": [
            "style"
          ],
          "start_line": 229,
          "end_line": 231
        },
        {
          "name": "test_clear_meta_and_links",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Style.on",
            "style.clear_meta_and_links",
            "Color.parse",
            "Style.parse"
          ],
          "variables": [
            "style",
            "clear_style"
          ],
          "start_line": 234,
          "end_line": 253
        },
        {
          "name": "test_clear_meta_and_links_clears_hash",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Style.on",
            "style.clear_meta_and_links",
            "hash",
            "Style.parse"
          ],
          "variables": [
            "style",
            "clear_style"
          ],
          "start_line": 256,
          "end_line": 267
        }
      ],
      "variables": [
        "all_styles",
        "expected",
        "all_styles",
        "expected",
        "style",
        "expected",
        "html_style",
        "style",
        "style",
        "stack",
        "style",
        "colorless_style",
        "null_style",
        "style",
        "style",
        "style",
        "style",
        "clear_style",
        "style",
        "clear_style"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\tests\\test_styled.py",
      "imports": [
        "import io",
        "from rich.console import Console",
        "from rich.measure import Measurement",
        "from rich.styled import Styled"
      ],
      "classes": [],
      "functions": [
        {
          "name": "test_styled",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Measurement",
            "console.print",
            "Styled",
            "console.file.getvalue",
            "Console",
            "Measurement.get",
            "io.StringIO"
          ],
          "variables": [
            "styled_foo",
            "console",
            "result",
            "expected"
          ],
          "start_line": 8,
          "end_line": 15
        }
      ],
      "variables": [
        "styled_foo",
        "console",
        "result",
        "expected"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\tests\\test_syntax.py",
      "imports": [
        "import io",
        "import os",
        "import sys",
        "import tempfile",
        "from importlib.metadata import Distribution",
        "import pytest",
        "from pygments.lexers import PythonLexer",
        "from rich.measure import Measurement",
        "from rich.panel import Panel",
        "from rich.style import Style",
        "from rich.syntax import (\n    ANSISyntaxTheme,\n    Color,\n    Console,\n    PygmentsSyntaxTheme,\n    Syntax,\n    _SyntaxHighlightRange,\n)",
        "from .render import render",
        "from pygments.style import Style as PygmentsStyle",
        "from pygments.style import Token"
      ],
      "classes": [],
      "functions": [
        {
          "name": "test_blank_lines",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "repr",
            "render",
            "print",
            "Syntax"
          ],
          "variables": [
            "code",
            "syntax",
            "result"
          ],
          "start_line": 43,
          "end_line": 53
        },
        {
          "name": "test_python_render",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "Panel.fit",
            "repr",
            "Syntax",
            "render",
            "print"
          ],
          "variables": [
            "syntax",
            "rendered_syntax",
            "expected"
          ],
          "start_line": 56,
          "end_line": 72
        },
        {
          "name": "test_python_render_simple",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "repr",
            "render",
            "print",
            "Syntax"
          ],
          "variables": [
            "syntax",
            "rendered_syntax",
            "expected"
          ],
          "start_line": 75,
          "end_line": 87
        },
        {
          "name": "test_python_render_simple_passing_lexer_instance",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "repr",
            "Syntax",
            "PythonLexer",
            "render",
            "print"
          ],
          "variables": [
            "syntax",
            "rendered_syntax",
            "expected"
          ],
          "start_line": 90,
          "end_line": 102
        },
        {
          "name": "test_python_render_simple_indent_guides",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "repr",
            "render",
            "print",
            "Syntax"
          ],
          "variables": [
            "syntax",
            "rendered_syntax",
            "expected"
          ],
          "start_line": 106,
          "end_line": 119
        },
        {
          "name": "test_python_render_line_range_indent_guides",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "repr",
            "render",
            "print",
            "Syntax"
          ],
          "variables": [
            "syntax",
            "rendered_syntax",
            "expected"
          ],
          "start_line": 123,
          "end_line": 137
        },
        {
          "name": "test_python_render_indent_guides",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "Panel.fit",
            "repr",
            "Syntax",
            "render",
            "print"
          ],
          "variables": [
            "syntax",
            "rendered_syntax",
            "expected"
          ],
          "start_line": 140,
          "end_line": 157
        },
        {
          "name": "test_pygments_syntax_theme_non_str",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "PygmentsStyle",
            "PygmentsSyntaxTheme",
            "Color.parse",
            "style.get_background_style"
          ],
          "variables": [
            "style"
          ],
          "start_line": 160,
          "end_line": 164
        },
        {
          "name": "test_pygments_syntax_theme",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "Style.parse",
            "PygmentsSyntaxTheme",
            "style.get_style_for_token"
          ],
          "variables": [
            "style"
          ],
          "start_line": 167,
          "end_line": 169
        },
        {
          "name": "test_get_line_color_none",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "PygmentsSyntaxTheme",
            "syntax._get_line_numbers_color",
            "Syntax",
            "Color.default",
            "Style"
          ],
          "variables": [
            "style",
            "syntax"
          ],
          "start_line": 172,
          "end_line": 185
        },
        {
          "name": "test_highlight_background_color",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "syntax.highlight",
            "Style.parse",
            "Syntax"
          ],
          "variables": [
            "syntax"
          ],
          "start_line": 188,
          "end_line": 199
        },
        {
          "name": "test_get_number_styles",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "Console",
            "syntax._get_number_styles",
            "Style.parse",
            "Syntax"
          ],
          "variables": [
            "syntax",
            "console"
          ],
          "start_line": 202,
          "end_line": 209
        },
        {
          "name": "test_get_style_for_token",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "PygmentsSyntaxTheme",
            "syntax._get_line_numbers_color",
            "Syntax",
            "Color.default",
            "Style"
          ],
          "variables": [
            "style",
            "style_dict",
            "syntax"
          ],
          "start_line": 212,
          "end_line": 230
        },
        {
          "name": "test_option_no_wrap",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "repr",
            "render",
            "print",
            "Syntax"
          ],
          "variables": [
            "syntax",
            "rendered_syntax",
            "expected"
          ],
          "start_line": 233,
          "end_line": 247
        },
        {
          "name": "test_syntax_highlight_ranges",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "len",
            "repr",
            "Syntax",
            "syntax.stylize_range",
            "_SyntaxHighlightRange",
            "Style",
            "render",
            "print"
          ],
          "variables": [
            "syntax",
            "stylized_ranges",
            "rendered_syntax",
            "expected"
          ],
          "start_line": 250,
          "end_line": 302
        },
        {
          "name": "test_ansi_theme",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "theme.get_style_for_token",
            "theme.get_background_style",
            "Style",
            "ANSISyntaxTheme"
          ],
          "variables": [
            "style",
            "theme"
          ],
          "start_line": 305,
          "end_line": 309
        },
        {
          "name": "test_from_path",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "Syntax.from_path",
            "os.remove",
            "tempfile.mkstemp",
            "os.write"
          ],
          "variables": [
            "syntax"
          ],
          "start_line": 318,
          "end_line": 327
        },
        {
          "name": "test_from_path_unknown_lexer",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "Syntax.from_path",
            "os.remove",
            "tempfile.mkstemp",
            "os.write"
          ],
          "variables": [
            "syntax"
          ],
          "start_line": 331,
          "end_line": 339
        },
        {
          "name": "test_from_path_lexer_override",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "Syntax.from_path",
            "os.remove",
            "tempfile.mkstemp",
            "os.write"
          ],
          "variables": [
            "syntax"
          ],
          "start_line": 343,
          "end_line": 351
        },
        {
          "name": "test_from_path_lexer_override_invalid_lexer",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "Syntax.from_path",
            "os.remove",
            "tempfile.mkstemp",
            "os.write"
          ],
          "variables": [
            "syntax"
          ],
          "start_line": 355,
          "end_line": 363
        },
        {
          "name": "test_syntax_guess_lexer",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "Syntax.guess_lexer"
          ],
          "variables": [],
          "start_line": 366,
          "end_line": 371
        },
        {
          "name": "test_syntax_padding",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "console.export_text",
            "console.print",
            "Syntax",
            "Console",
            "io.StringIO"
          ],
          "variables": [
            "syntax",
            "console",
            "output"
          ],
          "start_line": 374,
          "end_line": 387
        },
        {
          "name": "test_syntax_measure",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "Console",
            "Measurement",
            "code.__rich_measure__",
            "Syntax"
          ],
          "variables": [
            "console",
            "code",
            "code",
            "code",
            "code"
          ],
          "start_line": 390,
          "end_line": 402
        },
        {
          "name": "test_background_color_override_includes_padding",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "repr",
            "render",
            "print",
            "Syntax"
          ],
          "variables": [
            "syntax",
            "result"
          ],
          "start_line": 405,
          "end_line": 419
        },
        {
          "name": "test_padding_plus_wrap",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "repr",
            "console.print",
            "Syntax",
            "console.file.getvalue",
            "Console",
            "print",
            "io.StringIO"
          ],
          "variables": [
            "console",
            "syntax",
            "output",
            "expected"
          ],
          "start_line": 422,
          "end_line": 435
        }
      ],
      "variables": [
        "PYGMENTS_VERSION",
        "OLD_PYGMENTS",
        "CODE",
        "code",
        "syntax",
        "result",
        "syntax",
        "rendered_syntax",
        "expected",
        "syntax",
        "rendered_syntax",
        "expected",
        "syntax",
        "rendered_syntax",
        "expected",
        "syntax",
        "rendered_syntax",
        "expected",
        "syntax",
        "rendered_syntax",
        "expected",
        "syntax",
        "rendered_syntax",
        "expected",
        "style",
        "style",
        "style",
        "syntax",
        "syntax",
        "syntax",
        "console",
        "style",
        "style_dict",
        "syntax",
        "syntax",
        "rendered_syntax",
        "expected",
        "syntax",
        "stylized_ranges",
        "rendered_syntax",
        "expected",
        "style",
        "theme",
        "skip_windows_permission_error",
        "syntax",
        "syntax",
        "syntax",
        "syntax",
        "syntax",
        "console",
        "output",
        "console",
        "code",
        "code",
        "code",
        "code",
        "syntax",
        "result",
        "console",
        "syntax",
        "output",
        "expected",
        "syntax",
        "rendered"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\tests\\test_table.py",
      "imports": [
        "import io",
        "from textwrap import dedent",
        "import pytest",
        "from rich import box, errors",
        "from rich.console import Console",
        "from rich.measure import Measurement",
        "from rich.style import Style",
        "from rich.table import Column, Table",
        "from rich.text import Text"
      ],
      "classes": [
        {
          "name": "Foo",
          "base_classes": null,
          "docstring": null,
          "methods": []
        }
      ],
      "functions": [
        {
          "name": "render_tables",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Measurement",
            "console.print",
            "table.add_row",
            "console.file.getvalue",
            "Table",
            "Console",
            "range",
            "Text",
            "table.add_column",
            "Measurement.get",
            "io.StringIO"
          ],
          "variables": [
            "console",
            "table"
          ],
          "start_line": 16,
          "end_line": 86
        },
        {
          "name": "test_render_table",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "render_tables",
            "repr",
            "print"
          ],
          "variables": [
            "expected",
            "result"
          ],
          "start_line": 89,
          "end_line": 93
        },
        {
          "name": "test_not_renderable",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "table.add_row",
            "pytest.raises",
            "Table",
            "Foo"
          ],
          "variables": [
            "table"
          ],
          "start_line": 96,
          "end_line": 102
        },
        {
          "name": "test_init_append_column",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "enumerate",
            "Table",
            "Column"
          ],
          "variables": [
            "header_names",
            "test_columns"
          ],
          "start_line": 105,
          "end_line": 114
        },
        {
          "name": "test_rich_measure",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Table(\"test_header\", width=-1).__rich_measure__",
            "Measurement",
            "Table",
            "Console",
            "Table(\"test_header\", width=None).__rich_measure__",
            "console.options.update_width"
          ],
          "variables": [
            "console"
          ],
          "start_line": 117,
          "end_line": 125
        },
        {
          "name": "test_min_width",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "len",
            "Measurement",
            "console.print",
            "table.add_row",
            "Table",
            "console.begin_capture",
            "Console",
            "console.end_capture",
            "table.__rich_measure__",
            "all",
            "console.options.update_width",
            "print",
            "output.splitlines"
          ],
          "variables": [
            "table",
            "console",
            "console",
            "output"
          ],
          "start_line": 128,
          "end_line": 140
        },
        {
          "name": "test_no_columns",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "repr",
            "console.print",
            "Table",
            "console.end_capture",
            "Console",
            "console.begin_capture",
            "print"
          ],
          "variables": [
            "console",
            "output"
          ],
          "start_line": 143,
          "end_line": 149
        },
        {
          "name": "test_get_row_style",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Style.parse",
            "table.add_row",
            "table.get_row_style",
            "Table",
            "Console"
          ],
          "variables": [
            "console",
            "table"
          ],
          "start_line": 152,
          "end_line": 158
        },
        {
          "name": "test_vertical_align_top",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "console.capture",
            "\"\\n\".join",
            "make_table",
            "repr",
            "console.print",
            "table.add_row",
            "Table",
            "Console",
            "capture.get",
            "table.add_column",
            "print"
          ],
          "variables": [
            "console",
            "table",
            "result",
            "expected"
          ],
          "start_line": 161,
          "end_line": 181
        },
        {
          "name": "make_table",
          "parameters": [
            {
              "name": "vertical_align",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "table.add_row",
            "\"\\n\".join",
            "table.add_column",
            "Table"
          ],
          "variables": [
            "table"
          ],
          "start_line": 164,
          "end_line": 169
        },
        {
          "name": "test_table_show_header_false_substitution",
          "parameters": [
            {
              "name": "box",
              "type": null
            },
            {
              "name": "result",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "console.export_text",
            "console.print",
            "table.add_row",
            "Table",
            "Console",
            "table.add_column"
          ],
          "variables": [
            "table",
            "console",
            "output"
          ],
          "start_line": 195,
          "end_line": 209
        },
        {
          "name": "test_section",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "console.export_text",
            "repr",
            "console.print",
            "table.add_row",
            "Table",
            "table.add_section",
            "Console",
            "print"
          ],
          "variables": [
            "table",
            "console",
            "output",
            "expected"
          ],
          "start_line": 212,
          "end_line": 235
        },
        {
          "name": "test_placement_table_box_elements",
          "parameters": [
            {
              "name": "show_header",
              "type": null
            },
            {
              "name": "show_footer",
              "type": null
            },
            {
              "name": "expected",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "console.export_text",
            "repr",
            "console.print",
            "table.add_row",
            "table.box.__dict__.update",
            "Table",
            "table.add_section",
            "Console",
            "table.add_column",
            "print"
          ],
          "variables": [
            "table",
            "console",
            "output"
          ],
          "start_line": 307,
          "end_line": 363
        },
        {
          "name": "test_columns_highlight_added_by_add_row",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "console.export_text",
            "repr",
            "console.print",
            "table.add_row",
            "Table",
            "Console",
            "print"
          ],
          "variables": [
            "table",
            "console",
            "output",
            "expected"
          ],
          "start_line": 366,
          "end_line": 382
        }
      ],
      "variables": [
        "console",
        "table",
        "expected",
        "result",
        "table",
        "header_names",
        "test_columns",
        "console",
        "table",
        "console",
        "console",
        "output",
        "console",
        "output",
        "console",
        "table",
        "console",
        "table",
        "result",
        "expected",
        "table",
        "console",
        "output",
        "table",
        "console",
        "output",
        "expected",
        "table",
        "console",
        "output",
        "table",
        "console",
        "output",
        "expected",
        "render"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\tests\\test_text.py",
      "imports": [
        "import re",
        "from io import StringIO",
        "from typing import List",
        "import pytest",
        "from rich.console import Console, Group",
        "from rich.measure import Measurement",
        "from rich.style import Style",
        "from rich.text import Span, Text"
      ],
      "classes": [],
      "functions": [
        {
          "name": "test_span",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Span",
            "repr",
            "bool"
          ],
          "variables": [
            "span"
          ],
          "start_line": 13,
          "end_line": 17
        },
        {
          "name": "test_span_split",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Span(5, 10, \"foo\").split",
            "Span(0, 10, \"foo\").split",
            "Span"
          ],
          "variables": [],
          "start_line": 20,
          "end_line": 23
        },
        {
          "name": "test_span_move",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Span(5, 10, \"foo\").move",
            "Span"
          ],
          "variables": [],
          "start_line": 26,
          "end_line": 27
        },
        {
          "name": "test_span_right_crop",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Span(5, 10, \"foo\").right_crop",
            "Span"
          ],
          "variables": [],
          "start_line": 30,
          "end_line": 32
        },
        {
          "name": "test_len",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "len",
            "Text"
          ],
          "variables": [],
          "start_line": 35,
          "end_line": 36
        },
        {
          "name": "test_cell_len",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Text"
          ],
          "variables": [],
          "start_line": 39,
          "end_line": 41
        },
        {
          "name": "test_bool",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Text"
          ],
          "variables": [],
          "start_line": 44,
          "end_line": 46
        },
        {
          "name": "test_str",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "str",
            "Text"
          ],
          "variables": [],
          "start_line": 49,
          "end_line": 50
        },
        {
          "name": "test_repr",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "isinstance",
            "repr",
            "Text"
          ],
          "variables": [],
          "start_line": 53,
          "end_line": 54
        },
        {
          "name": "test_add",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Text(\"foo\").__add__",
            "str",
            "Text"
          ],
          "variables": [
            "text"
          ],
          "start_line": 57,
          "end_line": 60
        },
        {
          "name": "test_eq",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Text(\"foo\").__eq__",
            "Text"
          ],
          "variables": [],
          "start_line": 63,
          "end_line": 66
        },
        {
          "name": "test_contain",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Text"
          ],
          "variables": [
            "text"
          ],
          "start_line": 69,
          "end_line": 74
        },
        {
          "name": "test_plain_property",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "text.append",
            "Text"
          ],
          "variables": [
            "text"
          ],
          "start_line": 77,
          "end_line": 81
        },
        {
          "name": "test_plain_property_setter",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "text.append",
            "str",
            "Text",
            "Span"
          ],
          "variables": [
            "text",
            "text"
          ],
          "start_line": 84,
          "end_line": 92
        },
        {
          "name": "test_from_markup",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Text.from_markup",
            "Span",
            "str"
          ],
          "variables": [
            "text"
          ],
          "start_line": 95,
          "end_line": 98
        },
        {
          "name": "test_from_ansi",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Style",
            "Span",
            "Text.from_ansi",
            "str"
          ],
          "variables": [
            "text",
            "text",
            "text",
            "text"
          ],
          "start_line": 101,
          "end_line": 116
        },
        {
          "name": "test_copy",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "text.append",
            "text.copy",
            "Text"
          ],
          "variables": [
            "text",
            "test_copy"
          ],
          "start_line": 119,
          "end_line": 126
        },
        {
          "name": "test_rstrip",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "text.rstrip",
            "str",
            "Text"
          ],
          "variables": [
            "text"
          ],
          "start_line": 129,
          "end_line": 132
        },
        {
          "name": "test_rstrip_end",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "text.rstrip_end",
            "str",
            "Text"
          ],
          "variables": [
            "text"
          ],
          "start_line": 135,
          "end_line": 138
        },
        {
          "name": "test_stylize",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Span",
            "text.stylize",
            "Text"
          ],
          "variables": [
            "text"
          ],
          "start_line": 141,
          "end_line": 146
        },
        {
          "name": "test_stylize_before",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "text.stylize_before",
            "text.stylize",
            "Text",
            "Span"
          ],
          "variables": [
            "text"
          ],
          "start_line": 149,
          "end_line": 153
        },
        {
          "name": "test_stylize_negative_index",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Span",
            "text.stylize",
            "Text"
          ],
          "variables": [
            "text"
          ],
          "start_line": 156,
          "end_line": 159
        },
        {
          "name": "test_highlight_regex",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "len",
            "sorted",
            "re.compile",
            "Text",
            "text.highlight_regex",
            "Span"
          ],
          "variables": [
            "text",
            "count",
            "count",
            "text",
            "count",
            "text",
            "count",
            "count",
            "text",
            "count"
          ],
          "start_line": 162,
          "end_line": 227
        },
        {
          "name": "test_highlight_regex_callable",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "len",
            "Style.parse",
            "re.compile",
            "Text",
            "text.highlight_regex",
            "text._spans.clear"
          ],
          "variables": [
            "text",
            "re_cve",
            "compiled_re_cve",
            "count",
            "count"
          ],
          "start_line": 230,
          "end_line": 263
        },
        {
          "name": "get_style",
          "parameters": [
            {
              "name": null,
              "type": "str"
            }
          ],
          "return_type": "Style",
          "docstring": null,
          "calls": [
            "Style.parse"
          ],
          "variables": [],
          "start_line": 235,
          "end_line": 238
        },
        {
          "name": "test_highlight_words",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "text.highlight_words",
            "sorted",
            "Text",
            "Span"
          ],
          "variables": [
            "text",
            "words",
            "count",
            "text",
            "words",
            "count",
            "text",
            "words",
            "count",
            "text",
            "count"
          ],
          "start_line": 266,
          "end_line": 294
        },
        {
          "name": "test_set_length",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "text.stylize",
            "expected.append",
            "Text",
            "text.set_length"
          ],
          "variables": [
            "text",
            "text",
            "text",
            "expected"
          ],
          "start_line": 297,
          "end_line": 313
        },
        {
          "name": "test_console_width",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Measurement",
            "Text(\" \" * 4).__rich_measure__",
            "Text(\" \\n  \\n   \").__rich_measure__",
            "Console",
            "text.__rich_measure__",
            "Text"
          ],
          "variables": [
            "console",
            "text"
          ],
          "start_line": 316,
          "end_line": 321
        },
        {
          "name": "test_join",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Text(\"bar\").join",
            "str",
            "Text",
            "Span"
          ],
          "variables": [
            "text"
          ],
          "start_line": 324,
          "end_line": 327
        },
        {
          "name": "test_trim_spans",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Span",
            "text._trim_spans",
            "Text"
          ],
          "variables": [
            "text"
          ],
          "start_line": 330,
          "end_line": 334
        },
        {
          "name": "test_pad_left",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "text.pad_left",
            "str",
            "Text"
          ],
          "variables": [
            "text"
          ],
          "start_line": 337,
          "end_line": 340
        },
        {
          "name": "test_pad_right",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "str",
            "Text",
            "text.pad_right"
          ],
          "variables": [
            "text"
          ],
          "start_line": 343,
          "end_line": 346
        },
        {
          "name": "test_append",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "text.append",
            "str",
            "Text",
            "Span",
            "pytest.raises"
          ],
          "variables": [
            "text"
          ],
          "start_line": 349,
          "end_line": 361
        },
        {
          "name": "test_append_text",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "text.append_text",
            "str",
            "Text",
            "Span"
          ],
          "variables": [
            "text"
          ],
          "start_line": 364,
          "end_line": 368
        },
        {
          "name": "test_end",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "StringIO",
            "Text.from_markup",
            "console.print",
            "console.file.getvalue",
            "Console",
            "Group"
          ],
          "variables": [
            "console",
            "text"
          ],
          "start_line": 371,
          "end_line": 375
        },
        {
          "name": "test_split",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "text.append",
            "line1.append",
            "line2.append",
            "len",
            "list",
            "Text",
            "Text(\"foo\").split",
            "text.split"
          ],
          "variables": [
            "text",
            "line1",
            "line2",
            "split"
          ],
          "start_line": 378,
          "end_line": 394
        },
        {
          "name": "test_split_spans",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Text.from_markup",
            "Span",
            "text.split"
          ],
          "variables": [
            "text",
            "lines"
          ],
          "start_line": 397,
          "end_line": 403
        },
        {
          "name": "test_divide",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "len",
            "text.append",
            "str",
            "text.divide",
            "Text(\"foo\").divide",
            "Text",
            "Span"
          ],
          "variables": [
            "lines",
            "text",
            "lines",
            "text",
            "lines",
            "lines"
          ],
          "start_line": 406,
          "end_line": 446
        },
        {
          "name": "test_right_crop",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "text.append",
            "str",
            "text.right_crop",
            "Text",
            "Span"
          ],
          "variables": [
            "text"
          ],
          "start_line": 449,
          "end_line": 454
        },
        {
          "name": "test_wrap_3",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "len",
            "repr",
            "text.wrap",
            "Console",
            "Text",
            "print"
          ],
          "variables": [
            "text",
            "lines"
          ],
          "start_line": 457,
          "end_line": 464
        },
        {
          "name": "test_wrap_4",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "text.wrap",
            "len",
            "Console",
            "Text"
          ],
          "variables": [
            "text",
            "lines"
          ],
          "start_line": 467,
          "end_line": 473
        },
        {
          "name": "test_wrap_wrapped_word_length_greater_than_available_width",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "text.wrap",
            "Console",
            "Text"
          ],
          "variables": [
            "text",
            "lines"
          ],
          "start_line": 476,
          "end_line": 483
        },
        {
          "name": "test_wrap_cjk",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "text.wrap",
            "Console",
            "Text"
          ],
          "variables": [
            "text",
            "lines"
          ],
          "start_line": 486,
          "end_line": 492
        },
        {
          "name": "test_wrap_cjk_width_mid_character",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "text.wrap",
            "Console",
            "Text"
          ],
          "variables": [
            "text",
            "lines"
          ],
          "start_line": 495,
          "end_line": 502
        },
        {
          "name": "test_wrap_cjk_mixed",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "console.capture",
            "console.print",
            "Console",
            "text.wrap",
            "Text",
            "capture.get"
          ],
          "variables": [
            "text",
            "console",
            "wrapped_lines"
          ],
          "start_line": 505,
          "end_line": 516
        },
        {
          "name": "test_wrap_long",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "text.wrap",
            "len",
            "Console",
            "Text"
          ],
          "variables": [
            "text",
            "lines"
          ],
          "start_line": 519,
          "end_line": 525
        },
        {
          "name": "test_wrap_overflow",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "text.wrap",
            "len",
            "Console",
            "Text"
          ],
          "variables": [
            "text",
            "lines"
          ],
          "start_line": 528,
          "end_line": 534
        },
        {
          "name": "test_wrap_overflow_long",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "text.wrap",
            "len",
            "Console",
            "Text"
          ],
          "variables": [
            "text",
            "lines"
          ],
          "start_line": 537,
          "end_line": 541
        },
        {
          "name": "test_wrap_long_words",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "text.wrap",
            "Console",
            "Text"
          ],
          "variables": [
            "text",
            "lines"
          ],
          "start_line": 544,
          "end_line": 553
        },
        {
          "name": "test_wrap_long_words_2",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "text.wrap",
            "Console",
            "Text"
          ],
          "variables": [
            "text",
            "lines"
          ],
          "start_line": 556,
          "end_line": 564
        },
        {
          "name": "test_wrap_long_words_followed_by_other_words",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "text.wrap",
            "Console",
            "Text"
          ],
          "variables": [
            "text",
            "lines"
          ],
          "start_line": 567,
          "end_line": 578
        },
        {
          "name": "test_wrap_long_word_preceeded_by_word_of_full_line_length",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "text.wrap",
            "Console",
            "Text"
          ],
          "variables": [
            "text",
            "lines"
          ],
          "start_line": 581,
          "end_line": 592
        },
        {
          "name": "test_wrap_multiple_consecutive_spaces",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "text.wrap",
            "Console",
            "Text"
          ],
          "variables": [
            "text",
            "lines"
          ],
          "start_line": 595,
          "end_line": 605
        },
        {
          "name": "test_wrap_long_words_justify_left",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "text.wrap",
            "len",
            "Console",
            "Text"
          ],
          "variables": [
            "text",
            "lines"
          ],
          "start_line": 608,
          "end_line": 616
        },
        {
          "name": "test_wrap_leading_and_trailing_whitespace",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "text.wrap",
            "Console",
            "Text"
          ],
          "variables": [
            "text",
            "lines"
          ],
          "start_line": 619,
          "end_line": 627
        },
        {
          "name": "test_no_wrap_no_crop",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "StringIO",
            "repr",
            "console.print",
            "console.file.getvalue",
            "Console",
            "Text",
            "print"
          ],
          "variables": [
            "text",
            "console"
          ],
          "start_line": 630,
          "end_line": 641
        },
        {
          "name": "test_fit",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "text.fit",
            "str",
            "Text"
          ],
          "variables": [
            "text",
            "lines"
          ],
          "start_line": 644,
          "end_line": 648
        },
        {
          "name": "test_wrap_tabs",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "len",
            "str",
            "text.wrap",
            "Console",
            "Text"
          ],
          "variables": [
            "text",
            "lines"
          ],
          "start_line": 651,
          "end_line": 656
        },
        {
          "name": "test_render",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Console",
            "Text.from_markup",
            "console.export_text",
            "console.print"
          ],
          "variables": [
            "console",
            "text",
            "output",
            "expected"
          ],
          "start_line": 659,
          "end_line": 667
        },
        {
          "name": "test_render_simple",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "console.print",
            "console.end_capture",
            "Console",
            "console.begin_capture",
            "Text"
          ],
          "variables": [
            "console",
            "result"
          ],
          "start_line": 670,
          "end_line": 675
        },
        {
          "name": "test_print",
          "parameters": [
            {
              "name": "print_text",
              "type": null
            },
            {
              "name": "result",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Console",
            "console.export_text",
            "console.print"
          ],
          "variables": [
            "console"
          ],
          "start_line": 686,
          "end_line": 689
        },
        {
          "name": "test_print_sep_end",
          "parameters": [
            {
              "name": "print_text",
              "type": null
            },
            {
              "name": "result",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Console",
            "StringIO",
            "console.file.getvalue",
            "console.print"
          ],
          "variables": [
            "console"
          ],
          "start_line": 700,
          "end_line": 703
        },
        {
          "name": "test_tabs_to_spaces",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "text.expand_tabs",
            "Text"
          ],
          "variables": [
            "text",
            "text",
            "text",
            "text",
            "text"
          ],
          "start_line": 706,
          "end_line": 726
        },
        {
          "name": "test_tabs_to_spaces_spans",
          "parameters": [
            {
              "name": null,
              "type": "str"
            },
            {
              "name": null,
              "type": "int"
            },
            {
              "name": null,
              "type": "str"
            },
            {
              "name": null,
              "type": "List[Span]"
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Text.from_markup",
            "text.expand_tabs",
            "print"
          ],
          "variables": [
            "text"
          ],
          "start_line": 805,
          "end_line": 813
        },
        {
          "name": "test_markup_switch",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Console",
            "StringIO",
            "console.file.getvalue",
            "console.print"
          ],
          "variables": [
            "console"
          ],
          "start_line": 816,
          "end_line": 820
        },
        {
          "name": "test_emoji",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Console",
            "StringIO",
            "console.file.getvalue",
            "console.print"
          ],
          "variables": [
            "console"
          ],
          "start_line": 823,
          "end_line": 827
        },
        {
          "name": "test_emoji_switch",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Console",
            "StringIO",
            "console.file.getvalue",
            "console.print"
          ],
          "variables": [
            "console"
          ],
          "start_line": 830,
          "end_line": 834
        },
        {
          "name": "test_assemble",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Span",
            "str",
            "Text.assemble"
          ],
          "variables": [
            "text"
          ],
          "start_line": 837,
          "end_line": 840
        },
        {
          "name": "test_assemble_meta",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "str",
            "Text.assemble",
            "Console",
            "text.get_style_at_offset",
            "Span",
            "Style"
          ],
          "variables": [
            "text",
            "spans",
            "expected",
            "console"
          ],
          "start_line": 843,
          "end_line": 853
        },
        {
          "name": "test_styled",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Span",
            "str",
            "Text.styled"
          ],
          "variables": [
            "text"
          ],
          "start_line": 856,
          "end_line": 860
        },
        {
          "name": "test_strip_control_codes",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "text.append",
            "str",
            "Text"
          ],
          "variables": [
            "text"
          ],
          "start_line": 863,
          "end_line": 867
        },
        {
          "name": "test_get_style_at_offset",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Console",
            "Text.from_markup",
            "Style",
            "text.get_style_at_offset"
          ],
          "variables": [
            "console",
            "text"
          ],
          "start_line": 870,
          "end_line": 874
        },
        {
          "name": "test_truncate_ellipsis",
          "parameters": [
            {
              "name": "input",
              "type": null
            },
            {
              "name": "count",
              "type": null
            },
            {
              "name": "expected",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "text.truncate",
            "Text"
          ],
          "variables": [
            "text"
          ],
          "start_line": 888,
          "end_line": 891
        },
        {
          "name": "test_truncate_ellipsis_pad",
          "parameters": [
            {
              "name": "input",
              "type": null
            },
            {
              "name": "count",
              "type": null
            },
            {
              "name": "expected",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "text.truncate",
            "Text"
          ],
          "variables": [
            "text"
          ],
          "start_line": 902,
          "end_line": 905
        },
        {
          "name": "test_pad",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "text.pad",
            "Text"
          ],
          "variables": [
            "text"
          ],
          "start_line": 908,
          "end_line": 911
        },
        {
          "name": "test_align_left",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Text",
            "text.align"
          ],
          "variables": [
            "text"
          ],
          "start_line": 914,
          "end_line": 917
        },
        {
          "name": "test_align_right",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Text",
            "text.align"
          ],
          "variables": [
            "text"
          ],
          "start_line": 920,
          "end_line": 923
        },
        {
          "name": "test_align_center",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Text",
            "text.align"
          ],
          "variables": [
            "text"
          ],
          "start_line": 926,
          "end_line": 929
        },
        {
          "name": "test_detect_indentation",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Text(\" \").detect_indentation",
            "Text(text).detect_indentation",
            "Text(\"\").detect_indentation",
            "Text"
          ],
          "variables": [
            "text",
            "text"
          ],
          "start_line": 932,
          "end_line": 945
        },
        {
          "name": "test_indentation_guides",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "repr",
            "print",
            "Text",
            "text.with_indent_guides"
          ],
          "variables": [
            "text",
            "result",
            "expected"
          ],
          "start_line": 948,
          "end_line": 967
        },
        {
          "name": "test_slice",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Text.from_markup",
            "Span",
            "pytest.raises",
            "Text"
          ],
          "variables": [
            "text"
          ],
          "start_line": 970,
          "end_line": 981
        },
        {
          "name": "test_wrap_invalid_style",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Console",
            "console.print"
          ],
          "variables": [
            "console",
            "a"
          ],
          "start_line": 984,
          "end_line": 988
        },
        {
          "name": "test_apply_meta",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Console",
            "text.apply_meta",
            "Text",
            "text.get_style_at_offset"
          ],
          "variables": [
            "text",
            "console"
          ],
          "start_line": 991,
          "end_line": 999
        },
        {
          "name": "test_on",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Console",
            "text.on",
            "Text",
            "text.get_style_at_offset"
          ],
          "variables": [
            "console",
            "text",
            "expected"
          ],
          "start_line": 1002,
          "end_line": 1009
        },
        {
          "name": "test_markup_property",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Text.from_markup",
            "Text"
          ],
          "variables": [],
          "start_line": 1012,
          "end_line": 1025
        },
        {
          "name": "test_extend_style",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Text.from_markup",
            "text.extend_style",
            "Span"
          ],
          "variables": [
            "text"
          ],
          "start_line": 1028,
          "end_line": 1041
        },
        {
          "name": "test_append_tokens",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "console.capture",
            "repr",
            "Text().append_tokens",
            "console.print",
            "Console",
            "Text",
            "capture.get",
            "print"
          ],
          "variables": [
            "console",
            "t",
            "output"
          ],
          "start_line": 1044,
          "end_line": 1061
        },
        {
          "name": "test_append_loop_regression",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "b.append_text",
            "a.append",
            "Text"
          ],
          "variables": [
            "a",
            "b"
          ],
          "start_line": 1064,
          "end_line": 1072
        }
      ],
      "variables": [
        "span",
        "text",
        "text",
        "text",
        "text",
        "text",
        "text",
        "text",
        "text",
        "text",
        "text",
        "text",
        "test_copy",
        "text",
        "text",
        "text",
        "text",
        "text",
        "text",
        "count",
        "count",
        "text",
        "count",
        "text",
        "count",
        "count",
        "text",
        "count",
        "text",
        "re_cve",
        "compiled_re_cve",
        "count",
        "count",
        "text",
        "words",
        "count",
        "text",
        "words",
        "count",
        "text",
        "words",
        "count",
        "text",
        "count",
        "text",
        "text",
        "text",
        "expected",
        "console",
        "text",
        "text",
        "text",
        "text",
        "text",
        "text",
        "text",
        "console",
        "text",
        "text",
        "line1",
        "line2",
        "split",
        "text",
        "lines",
        "lines",
        "text",
        "lines",
        "text",
        "lines",
        "lines",
        "text",
        "text",
        "lines",
        "text",
        "lines",
        "text",
        "lines",
        "text",
        "lines",
        "text",
        "lines",
        "text",
        "console",
        "wrapped_lines",
        "text",
        "lines",
        "text",
        "lines",
        "text",
        "lines",
        "text",
        "lines",
        "text",
        "lines",
        "text",
        "lines",
        "text",
        "lines",
        "text",
        "lines",
        "text",
        "lines",
        "text",
        "lines",
        "text",
        "console",
        "text",
        "lines",
        "text",
        "lines",
        "console",
        "text",
        "output",
        "expected",
        "console",
        "result",
        "console",
        "console",
        "text",
        "text",
        "text",
        "text",
        "text",
        "text",
        "console",
        "console",
        "console",
        "text",
        "text",
        "spans",
        "expected",
        "console",
        "text",
        "text",
        "console",
        "text",
        "text",
        "text",
        "text",
        "text",
        "text",
        "text",
        "text",
        "text",
        "text",
        "result",
        "expected",
        "text",
        "console",
        "a",
        "text",
        "console",
        "console",
        "text",
        "expected",
        "text",
        "console",
        "t",
        "output",
        "a",
        "b"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\tests\\test_theme.py",
      "imports": [
        "import io",
        "import os",
        "import tempfile",
        "import pytest",
        "from rich.style import Style",
        "from rich.theme import Theme, ThemeStack, ThemeStackError"
      ],
      "classes": [],
      "functions": [
        {
          "name": "test_inherit",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Theme",
            "Style"
          ],
          "variables": [
            "theme"
          ],
          "start_line": 11,
          "end_line": 14
        },
        {
          "name": "test_config",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Theme"
          ],
          "variables": [
            "theme",
            "config"
          ],
          "start_line": 17,
          "end_line": 20
        },
        {
          "name": "test_from_file",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Theme",
            "text_file.write",
            "text_file.seek",
            "Theme.from_file",
            "io.StringIO"
          ],
          "variables": [
            "theme",
            "text_file",
            "load_theme"
          ],
          "start_line": 23,
          "end_line": 30
        },
        {
          "name": "test_read",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Theme",
            "tempfile.TemporaryDirectory",
            "write_theme.write",
            "Theme.read",
            "open",
            "os.path.join"
          ],
          "variables": [
            "theme",
            "filename",
            "load_theme"
          ],
          "start_line": 33,
          "end_line": 40
        },
        {
          "name": "test_theme_stack",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Theme",
            "stack.get",
            "Style.parse",
            "ThemeStack",
            "stack.pop_theme",
            "pytest.raises",
            "stack.push_theme"
          ],
          "variables": [
            "theme",
            "stack",
            "new_theme"
          ],
          "start_line": 43,
          "end_line": 53
        }
      ],
      "variables": [
        "theme",
        "theme",
        "config",
        "theme",
        "text_file",
        "load_theme",
        "theme",
        "filename",
        "load_theme",
        "theme",
        "stack",
        "new_theme"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\tests\\test_tools.py",
      "imports": [
        "from rich._loop import loop_first, loop_last, loop_first_last",
        "from rich._ratio import ratio_distribute"
      ],
      "classes": [],
      "functions": [
        {
          "name": "test_loop_first",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "list",
            "next",
            "loop_first"
          ],
          "variables": [
            "iterable"
          ],
          "start_line": 5,
          "end_line": 11
        },
        {
          "name": "test_loop_last",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "list",
            "loop_last",
            "next"
          ],
          "variables": [
            "iterable"
          ],
          "start_line": 14,
          "end_line": 20
        },
        {
          "name": "test_loop_first_last",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "list",
            "loop_first_last",
            "next"
          ],
          "variables": [
            "iterable"
          ],
          "start_line": 23,
          "end_line": 29
        },
        {
          "name": "test_ratio_distribute",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "ratio_distribute"
          ],
          "variables": [],
          "start_line": 32,
          "end_line": 38
        }
      ],
      "variables": [
        "iterable",
        "iterable",
        "iterable"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\tests\\test_traceback.py",
      "imports": [
        "import io",
        "import re",
        "import sys",
        "from typing import List",
        "import pytest",
        "from rich.console import Console",
        "from rich.theme import Theme",
        "from rich.traceback import Traceback, install"
      ],
      "classes": [
        {
          "name": "BrokenStr",
          "base_classes": "(Exception)",
          "docstring": null,
          "methods": []
        }
      ],
      "functions": [
        {
          "name": "test_handler",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "len",
            "repr",
            "install",
            "re.finditer",
            "pytest.fail",
            "sys.excepthook",
            "console.file.getvalue",
            "level2",
            "Console",
            "level1",
            "sys.exc_info",
            "frame_start.start",
            "print",
            "io.StringIO"
          ],
          "variables": [
            "console",
            "expected_old_handler",
            "old_handler",
            "rendered_exception",
            "frame_blank_line_possible_preambles",
            "frame_start_index"
          ],
          "start_line": 13,
          "end_line": 60
        },
        {
          "name": "level1",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "level2"
          ],
          "variables": [],
          "start_line": 17,
          "end_line": 18
        },
        {
          "name": "level2",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 20,
          "end_line": 21
        },
        {
          "name": "test_capture",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Traceback"
          ],
          "variables": [
            "tb"
          ],
          "start_line": 63,
          "end_line": 68
        },
        {
          "name": "test_no_exception",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Traceback",
            "pytest.raises"
          ],
          "variables": [
            "tb"
          ],
          "start_line": 71,
          "end_line": 73
        },
        {
          "name": "get_exception",
          "parameters": [],
          "return_type": "Traceback",
          "docstring": null,
          "calls": [
            "Traceback",
            "bar",
            "print",
            "foo"
          ],
          "variables": [
            "tb"
          ],
          "start_line": 76,
          "end_line": 90
        },
        {
          "name": "bar",
          "parameters": [
            {
              "name": "a",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "print"
          ],
          "variables": [],
          "start_line": 77,
          "end_line": 78
        },
        {
          "name": "foo",
          "parameters": [
            {
              "name": "a",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "bar"
          ],
          "variables": [],
          "start_line": 80,
          "end_line": 81
        },
        {
          "name": "test_print_exception",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Console",
            "console.print_exception",
            "console.file.getvalue",
            "io.StringIO"
          ],
          "variables": [
            "console",
            "exception_text"
          ],
          "start_line": 93,
          "end_line": 100
        },
        {
          "name": "test_print_exception_no_msg",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Console",
            "console.print_exception",
            "console.file.getvalue",
            "io.StringIO"
          ],
          "variables": [
            "console",
            "exception_text"
          ],
          "start_line": 103,
          "end_line": 111
        },
        {
          "name": "test_print_exception_locals",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "console.print_exception",
            "console.file.getvalue",
            "Console",
            "print",
            "io.StringIO"
          ],
          "variables": [
            "console",
            "exception_text"
          ],
          "start_line": 114,
          "end_line": 124
        },
        {
          "name": "test_syntax_error",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "eval",
            "console.print_exception",
            "console.file.getvalue",
            "Console",
            "io.StringIO"
          ],
          "variables": [
            "console",
            "exception_text"
          ],
          "start_line": 127,
          "end_line": 135
        },
        {
          "name": "test_nested_exception",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "console.print_exception",
            "console.file.getvalue",
            "Console",
            "exception_text.find",
            "ValueError",
            "io.StringIO"
          ],
          "variables": [
            "console",
            "value_error_message",
            "exception_text",
            "text_should_contain"
          ],
          "start_line": 138,
          "end_line": 162
        },
        {
          "name": "test_caused_exception",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "console.print_exception",
            "console.file.getvalue",
            "Console",
            "exception_text.find",
            "ValueError",
            "io.StringIO"
          ],
          "variables": [
            "console",
            "value_error_message",
            "exception_text",
            "text_should_contain"
          ],
          "start_line": 165,
          "end_line": 189
        },
        {
          "name": "test_filename_with_bracket",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "console.print_exception",
            "compile",
            "console.file.getvalue",
            "Console",
            "exec",
            "io.StringIO"
          ],
          "variables": [
            "console",
            "exception_text"
          ],
          "start_line": 192,
          "end_line": 199
        },
        {
          "name": "test_filename_not_a_file",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "console.print_exception",
            "compile",
            "console.file.getvalue",
            "Console",
            "exec",
            "io.StringIO"
          ],
          "variables": [
            "console",
            "exception_text"
          ],
          "start_line": 202,
          "end_line": 209
        },
        {
          "name": "test_traceback_console_theme_applies",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Theme",
            "repr",
            "console.print_exception",
            "console.end_capture",
            "Console",
            "console.begin_capture"
          ],
          "variables": [
            "console",
            "result"
          ],
          "start_line": 213,
          "end_line": 233
        },
        {
          "name": "test_broken_str",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "BrokenStr",
            "console.print_exception",
            "console.file.getvalue",
            "Console",
            "print",
            "io.StringIO"
          ],
          "variables": [
            "console",
            "result"
          ],
          "start_line": 236,
          "end_line": 248
        },
        {
          "name": "__str__",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 238,
          "end_line": 239
        },
        {
          "name": "test_guess_lexer",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Traceback._guess_lexer"
          ],
          "variables": [
            "code_python"
          ],
          "start_line": 251,
          "end_line": 255
        },
        {
          "name": "test_guess_lexer_yaml_j2",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Traceback._guess_lexer"
          ],
          "variables": [
            "code"
          ],
          "start_line": 258,
          "end_line": 265
        },
        {
          "name": "test_recursive",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "bar",
            "foo",
            "console.print_exception",
            "console.file.getvalue",
            "Console",
            "result.count",
            "print",
            "io.StringIO"
          ],
          "variables": [
            "console",
            "result"
          ],
          "start_line": 268,
          "end_line": 283
        },
        {
          "name": "foo",
          "parameters": [
            {
              "name": "n",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "bar"
          ],
          "variables": [],
          "start_line": 269,
          "end_line": 270
        },
        {
          "name": "bar",
          "parameters": [
            {
              "name": "n",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "foo"
          ],
          "variables": [],
          "start_line": 272,
          "end_line": 273
        },
        {
          "name": "test_suppress",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Traceback",
            "len"
          ],
          "variables": [
            "traceback"
          ],
          "start_line": 286,
          "end_line": 293
        },
        {
          "name": "test_rich_traceback_omit_optional_local_flag",
          "parameters": [
            {
              "name": null,
              "type": "bool"
            },
            {
              "name": null,
              "type": "int"
            },
            {
              "name": null,
              "type": "List[str]"
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "len",
            "level3",
            "level1",
            "Traceback.from_exception",
            "level2",
            "sys.exc_info"
          ],
          "variables": [
            "_rich_traceback_omit",
            "trace",
            "frames",
            "frame_names"
          ],
          "start_line": 305,
          "end_line": 329
        },
        {
          "name": "level1",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "level2"
          ],
          "variables": [],
          "start_line": 310,
          "end_line": 311
        },
        {
          "name": "level2",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "level3"
          ],
          "variables": [
            "_rich_traceback_omit"
          ],
          "start_line": 313,
          "end_line": 316
        },
        {
          "name": "level3",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 318,
          "end_line": 319
        },
        {
          "name": "test_traceback_finely_grained_missing",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "Traceback"
          ],
          "variables": [
            "traceback",
            "last_instruction"
          ],
          "start_line": 335,
          "end_line": 342
        },
        {
          "name": "test_traceback_finely_grained",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "Traceback",
            "isinstance",
            "len",
            "print"
          ],
          "variables": [
            "traceback",
            "last_instruction"
          ],
          "start_line": 348,
          "end_line": 360
        },
        {
          "name": "test_notes",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "error.add_note",
            "Traceback"
          ],
          "variables": [
            "traceback"
          ],
          "start_line": 366,
          "end_line": 375
        },
        {
          "name": "test_recursive_exception",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "RuntimeError",
            "bar",
            "foo",
            "console.print_exception",
            "Console"
          ],
          "variables": [
            "console"
          ],
          "start_line": 378,
          "end_line": 399
        },
        {
          "name": "foo",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "RuntimeError"
          ],
          "variables": [],
          "start_line": 386,
          "end_line": 390
        },
        {
          "name": "bar",
          "parameters": [],
          "return_type": "None",
          "docstring": null,
          "calls": [
            "console.print_exception",
            "foo"
          ],
          "variables": [],
          "start_line": 392,
          "end_line": 397
        }
      ],
      "variables": [
        "console",
        "expected_old_handler",
        "old_handler",
        "rendered_exception",
        "frame_blank_line_possible_preambles",
        "frame_start_index",
        "tb",
        "tb",
        "tb",
        "console",
        "exception_text",
        "console",
        "exception_text",
        "console",
        "exception_text",
        "console",
        "exception_text",
        "console",
        "value_error_message",
        "exception_text",
        "text_should_contain",
        "console",
        "value_error_message",
        "exception_text",
        "text_should_contain",
        "console",
        "exception_text",
        "console",
        "exception_text",
        "console",
        "result",
        "console",
        "result",
        "code_python",
        "code",
        "console",
        "result",
        "traceback",
        "_rich_traceback_omit",
        "trace",
        "frames",
        "frame_names",
        "traceback",
        "last_instruction",
        "traceback",
        "last_instruction",
        "traceback",
        "console"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\tests\\test_tree.py",
      "imports": [
        "import sys",
        "import pytest",
        "from rich.console import Console",
        "from rich.measure import Measurement",
        "from rich.tree import Tree"
      ],
      "classes": [
        {
          "name": "AsciiConsole",
          "base_classes": "(Console)",
          "docstring": null,
          "methods": []
        }
      ],
      "functions": [
        {
          "name": "test_render_single_node",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "console.print",
            "Tree",
            "console.end_capture",
            "Console",
            "console.begin_capture"
          ],
          "variables": [
            "tree",
            "console"
          ],
          "start_line": 10,
          "end_line": 15
        },
        {
          "name": "test_render_single_branch",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "repr",
            "console.print",
            "tree.add",
            "Tree",
            "console.begin_capture",
            "Console",
            "console.end_capture",
            "print"
          ],
          "variables": [
            "tree",
            "console",
            "result",
            "expected"
          ],
          "start_line": 18,
          "end_line": 27
        },
        {
          "name": "test_render_double_branch",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "repr",
            "console.print",
            "tree.add",
            "Tree",
            "console.begin_capture",
            "Console",
            "console.end_capture",
            "print"
          ],
          "variables": [
            "tree",
            "console",
            "result",
            "expected"
          ],
          "start_line": 30,
          "end_line": 40
        },
        {
          "name": "test_render_ascii",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "console.print",
            "tree.add",
            "Tree",
            "console.begin_capture",
            "console.end_capture",
            "AsciiConsole"
          ],
          "variables": [
            "tree",
            "console",
            "result",
            "expected"
          ],
          "start_line": 43,
          "end_line": 58
        },
        {
          "name": "encoding",
          "parameters": [
            {
              "name": "self",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 50,
          "end_line": 51
        },
        {
          "name": "test_render_tree_non_win32",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "repr",
            "baz_tree.add",
            "console.print",
            "tree.add",
            "Tree",
            "console.begin_capture",
            "Console",
            "console.end_capture",
            "print"
          ],
          "variables": [
            "tree",
            "baz_tree",
            "console",
            "result",
            "expected"
          ],
          "start_line": 62,
          "end_line": 78
        },
        {
          "name": "test_render_tree_win32",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "repr",
            "baz_tree.add",
            "console.print",
            "tree.add",
            "Tree",
            "console.begin_capture",
            "Console",
            "console.end_capture",
            "print"
          ],
          "variables": [
            "tree",
            "baz_tree",
            "console",
            "result",
            "expected"
          ],
          "start_line": 82,
          "end_line": 98
        },
        {
          "name": "test_render_tree_hide_root_non_win32",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "repr",
            "baz_tree.add",
            "console.print",
            "tree.add",
            "Tree",
            "console.begin_capture",
            "Console",
            "console.end_capture",
            "print"
          ],
          "variables": [
            "tree",
            "baz_tree",
            "console",
            "result",
            "expected"
          ],
          "start_line": 102,
          "end_line": 118
        },
        {
          "name": "test_render_tree_hide_root_win32",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "repr",
            "baz_tree.add",
            "console.print",
            "tree.add",
            "Tree",
            "console.begin_capture",
            "Console",
            "console.end_capture",
            "print"
          ],
          "variables": [
            "tree",
            "baz_tree",
            "console",
            "result",
            "expected"
          ],
          "start_line": 122,
          "end_line": 136
        },
        {
          "name": "test_tree_measure",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "Measurement",
            "tree.add",
            "Tree",
            "Console",
            "Measurement.get"
          ],
          "variables": [
            "tree",
            "console",
            "measurement"
          ],
          "start_line": 139,
          "end_line": 145
        }
      ],
      "variables": [
        "tree",
        "console",
        "tree",
        "console",
        "result",
        "expected",
        "tree",
        "console",
        "result",
        "expected",
        "tree",
        "console",
        "result",
        "expected",
        "tree",
        "baz_tree",
        "console",
        "result",
        "expected",
        "tree",
        "baz_tree",
        "console",
        "result",
        "expected",
        "tree",
        "baz_tree",
        "console",
        "result",
        "expected",
        "tree",
        "baz_tree",
        "console",
        "result",
        "expected",
        "tree",
        "console",
        "measurement"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\tests\\test_win32_console.py",
      "imports": [
        "import dataclasses",
        "import sys",
        "from unittest import mock",
        "from unittest.mock import patch",
        "import pytest",
        "from rich.style import Style",
        "from rich import _win32_console",
        "from rich._win32_console import COORD, LegacyWindowsTerm, WindowsCoordinates"
      ],
      "classes": [
        {
          "name": "StubScreenBufferInfo",
          "base_classes": null,
          "docstring": null,
          "methods": []
        }
      ],
      "functions": [
        {
          "name": "test_windows_coordinates_to_ctype",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "WindowsCoordinates.from_param",
            "WindowsCoordinates"
          ],
          "variables": [
            "coord"
          ],
          "start_line": 30,
          "end_line": 33
        },
        {
          "name": "win32_handle",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "mock.patch.object"
          ],
          "variables": [
            "handle"
          ],
          "start_line": 36,
          "end_line": 39
        },
        {
          "name": "win32_console_getters",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "mock.patch.object"
          ],
          "variables": [],
          "start_line": 42,
          "end_line": 57
        },
        {
          "name": "stub_console_cursor_info",
          "parameters": [
            {
              "name": "std_handle",
              "type": null
            },
            {
              "name": "cursor_info",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [],
          "variables": [],
          "start_line": 43,
          "end_line": 45
        },
        {
          "name": "test_cursor_position",
          "parameters": [
            {
              "name": "win32_console_getters",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "WindowsCoordinates",
            "LegacyWindowsTerm"
          ],
          "variables": [
            "term"
          ],
          "start_line": 59,
          "end_line": 61
        },
        {
          "name": "test_screen_size",
          "parameters": [
            {
              "name": "win32_console_getters",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "WindowsCoordinates",
            "LegacyWindowsTerm"
          ],
          "variables": [
            "term"
          ],
          "start_line": 63,
          "end_line": 67
        },
        {
          "name": "test_write_text",
          "parameters": [
            {
              "name": "win32_console_getters",
              "type": null
            },
            {
              "name": "win32_handle",
              "type": null
            },
            {
              "name": "capsys",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "term.write_text",
            "capsys.readouterr",
            "LegacyWindowsTerm"
          ],
          "variables": [
            "text",
            "term",
            "captured"
          ],
          "start_line": 69,
          "end_line": 76
        },
        {
          "name": "test_write_styled",
          "parameters": [
            {
              "name": "SetConsoleTextAttribute",
              "type": null
            },
            {
              "name": "win32_console_getters",
              "type": null
            },
            {
              "name": "win32_handle",
              "type": null
            },
            {
              "name": "capsys",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "len",
            "capsys.readouterr",
            "Style.parse",
            "term.write_styled",
            "LegacyWindowsTerm"
          ],
          "variables": [
            "style",
            "text",
            "term",
            "captured",
            "call_args"
          ],
          "start_line": 79,
          "end_line": 103
        },
        {
          "name": "test_write_styled_bold",
          "parameters": [
            {
              "name": "SetConsoleTextAttribute",
              "type": null
            },
            {
              "name": "win32_console_getters",
              "type": null
            },
            {
              "name": "win32_handle",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "LegacyWindowsTerm",
            "term.write_styled",
            "Style.parse"
          ],
          "variables": [
            "style",
            "text",
            "term",
            "call_args",
            "expected_attr"
          ],
          "start_line": 106,
          "end_line": 120
        },
        {
          "name": "test_write_styled_reverse",
          "parameters": [
            {
              "name": "SetConsoleTextAttribute",
              "type": null
            },
            {
              "name": "win32_console_getters",
              "type": null
            },
            {
              "name": "win32_handle",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "LegacyWindowsTerm",
            "term.write_styled",
            "Style.parse"
          ],
          "variables": [
            "style",
            "text",
            "term",
            "call_args",
            "expected_attr"
          ],
          "start_line": 123,
          "end_line": 137
        },
        {
          "name": "test_write_styled_reverse",
          "parameters": [
            {
              "name": "SetConsoleTextAttribute",
              "type": null
            },
            {
              "name": "win32_console_getters",
              "type": null
            },
            {
              "name": "win32_handle",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "LegacyWindowsTerm",
            "term.write_styled",
            "Style.parse"
          ],
          "variables": [
            "style",
            "text",
            "term",
            "call_args",
            "expected_attr"
          ],
          "start_line": 140,
          "end_line": 154
        },
        {
          "name": "test_write_styled_no_foreground_color",
          "parameters": [
            {
              "name": "SetConsoleTextAttribute",
              "type": null
            },
            {
              "name": "win32_console_getters",
              "type": null
            },
            {
              "name": "win32_handle",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "LegacyWindowsTerm",
            "term.write_styled",
            "Style.parse"
          ],
          "variables": [
            "style",
            "text",
            "term",
            "call_args",
            "expected_attr"
          ],
          "start_line": 157,
          "end_line": 171
        },
        {
          "name": "test_write_styled_no_background_color",
          "parameters": [
            {
              "name": "SetConsoleTextAttribute",
              "type": null
            },
            {
              "name": "win32_console_getters",
              "type": null
            },
            {
              "name": "win32_handle",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "LegacyWindowsTerm",
            "term.write_styled",
            "Style.parse"
          ],
          "variables": [
            "style",
            "text",
            "term",
            "call_args",
            "expected_attr"
          ],
          "start_line": 174,
          "end_line": 190
        },
        {
          "name": "test_erase_line",
          "parameters": [
            {
              "name": "FillConsoleOutputAttribute",
              "type": null
            },
            {
              "name": "FillConsoleOutputCharacter",
              "type": null
            },
            {
              "name": "win32_console_getters",
              "type": null
            },
            {
              "name": "win32_handle",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "FillConsoleOutputCharacter.assert_called_once_with",
            "term.erase_line",
            "FillConsoleOutputAttribute.assert_called_once_with",
            "WindowsCoordinates",
            "LegacyWindowsTerm"
          ],
          "variables": [
            "term",
            "start"
          ],
          "start_line": 194,
          "end_line": 208
        },
        {
          "name": "test_erase_end_of_line",
          "parameters": [
            {
              "name": "FillConsoleOutputAttribute",
              "type": null
            },
            {
              "name": "FillConsoleOutputCharacter",
              "type": null
            },
            {
              "name": "win32_console_getters",
              "type": null
            },
            {
              "name": "win32_handle",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "term.erase_end_of_line",
            "FillConsoleOutputAttribute.assert_called_once_with",
            "FillConsoleOutputCharacter.assert_called_once_with",
            "LegacyWindowsTerm"
          ],
          "variables": [
            "term"
          ],
          "start_line": 212,
          "end_line": 229
        },
        {
          "name": "test_erase_start_of_line",
          "parameters": [
            {
              "name": "FillConsoleOutputAttribute",
              "type": null
            },
            {
              "name": "FillConsoleOutputCharacter",
              "type": null
            },
            {
              "name": "win32_console_getters",
              "type": null
            },
            {
              "name": "win32_handle",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "term.erase_start_of_line",
            "FillConsoleOutputCharacter.assert_called_once_with",
            "FillConsoleOutputAttribute.assert_called_once_with",
            "WindowsCoordinates",
            "LegacyWindowsTerm"
          ],
          "variables": [
            "term",
            "start"
          ],
          "start_line": 233,
          "end_line": 249
        },
        {
          "name": "test_move_cursor_to",
          "parameters": [
            {
              "name": "SetConsoleCursorPosition",
              "type": null
            },
            {
              "name": "win32_console_getters",
              "type": null
            },
            {
              "name": "win32_handle",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "term.move_cursor_to",
            "LegacyWindowsTerm",
            "SetConsoleCursorPosition.assert_called_once_with",
            "WindowsCoordinates"
          ],
          "variables": [
            "coords",
            "term"
          ],
          "start_line": 252,
          "end_line": 260
        },
        {
          "name": "test_move_cursor_to_out_of_bounds_row",
          "parameters": [
            {
              "name": "SetConsoleCursorPosition",
              "type": null
            },
            {
              "name": "win32_console_getters",
              "type": null
            },
            {
              "name": "win32_handle",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "term.move_cursor_to",
            "LegacyWindowsTerm",
            "WindowsCoordinates"
          ],
          "variables": [
            "coords",
            "term"
          ],
          "start_line": 263,
          "end_line": 271
        },
        {
          "name": "test_move_cursor_to_out_of_bounds_col",
          "parameters": [
            {
              "name": "SetConsoleCursorPosition",
              "type": null
            },
            {
              "name": "win32_console_getters",
              "type": null
            },
            {
              "name": "win32_handle",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "term.move_cursor_to",
            "LegacyWindowsTerm",
            "WindowsCoordinates"
          ],
          "variables": [
            "coords",
            "term"
          ],
          "start_line": 274,
          "end_line": 282
        },
        {
          "name": "test_move_cursor_up",
          "parameters": [
            {
              "name": "SetConsoleCursorPosition",
              "type": null
            },
            {
              "name": "win32_console_getters",
              "type": null
            },
            {
              "name": "win32_handle",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "term.move_cursor_up",
            "SetConsoleCursorPosition.assert_called_once_with",
            "WindowsCoordinates",
            "LegacyWindowsTerm"
          ],
          "variables": [
            "term"
          ],
          "start_line": 285,
          "end_line": 294
        },
        {
          "name": "test_move_cursor_down",
          "parameters": [
            {
              "name": "SetConsoleCursorPosition",
              "type": null
            },
            {
              "name": "win32_console_getters",
              "type": null
            },
            {
              "name": "win32_handle",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "term.move_cursor_down",
            "SetConsoleCursorPosition.assert_called_once_with",
            "WindowsCoordinates",
            "LegacyWindowsTerm"
          ],
          "variables": [
            "term"
          ],
          "start_line": 297,
          "end_line": 306
        },
        {
          "name": "test_move_cursor_forward",
          "parameters": [
            {
              "name": "SetConsoleCursorPosition",
              "type": null
            },
            {
              "name": "win32_console_getters",
              "type": null
            },
            {
              "name": "win32_handle",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "SetConsoleCursorPosition.assert_called_once_with",
            "WindowsCoordinates",
            "LegacyWindowsTerm",
            "term.move_cursor_forward"
          ],
          "variables": [
            "term"
          ],
          "start_line": 309,
          "end_line": 318
        },
        {
          "name": "test_move_cursor_forward_newline_wrap",
          "parameters": [
            {
              "name": "SetConsoleCursorPosition",
              "type": null
            },
            {
              "name": "win32_console_getters",
              "type": null
            },
            {
              "name": "win32_handle",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "StubScreenBufferInfo",
            "term.move_cursor_forward",
            "COORD",
            "LegacyWindowsTerm",
            "WindowsCoordinates",
            "SetConsoleCursorPosition.assert_called_once_with"
          ],
          "variables": [
            "cursor_at_end_of_line",
            "term"
          ],
          "start_line": 321,
          "end_line": 335
        },
        {
          "name": "test_move_cursor_to_column",
          "parameters": [
            {
              "name": "SetConsoleCursorPosition",
              "type": null
            },
            {
              "name": "win32_console_getters",
              "type": null
            },
            {
              "name": "win32_handle",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "SetConsoleCursorPosition.assert_called_once_with",
            "WindowsCoordinates",
            "term.move_cursor_to_column",
            "LegacyWindowsTerm"
          ],
          "variables": [
            "term"
          ],
          "start_line": 338,
          "end_line": 345
        },
        {
          "name": "test_move_cursor_backward",
          "parameters": [
            {
              "name": "SetConsoleCursorPosition",
              "type": null
            },
            {
              "name": "win32_console_getters",
              "type": null
            },
            {
              "name": "win32_handle",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "SetConsoleCursorPosition.assert_called_once_with",
            "term.move_cursor_backward",
            "WindowsCoordinates",
            "LegacyWindowsTerm"
          ],
          "variables": [
            "term"
          ],
          "start_line": 348,
          "end_line": 355
        },
        {
          "name": "test_move_cursor_backward_prev_line_wrap",
          "parameters": [
            {
              "name": "SetConsoleCursorPosition",
              "type": null
            },
            {
              "name": "win32_console_getters",
              "type": null
            },
            {
              "name": "win32_handle",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "StubScreenBufferInfo",
            "COORD",
            "LegacyWindowsTerm",
            "WindowsCoordinates",
            "SetConsoleCursorPosition.assert_called_once_with",
            "term.move_cursor_backward"
          ],
          "variables": [
            "cursor_at_start_of_line",
            "term"
          ],
          "start_line": 358,
          "end_line": 372
        },
        {
          "name": "test_hide_cursor",
          "parameters": [
            {
              "name": "SetConsoleCursorInfo",
              "type": null
            },
            {
              "name": "win32_console_getters",
              "type": null
            },
            {
              "name": "win32_handle",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "len",
            "term.hide_cursor",
            "LegacyWindowsTerm"
          ],
          "variables": [
            "term",
            "call_args"
          ],
          "start_line": 375,
          "end_line": 385
        },
        {
          "name": "test_show_cursor",
          "parameters": [
            {
              "name": "SetConsoleCursorInfo",
              "type": null
            },
            {
              "name": "win32_console_getters",
              "type": null
            },
            {
              "name": "win32_handle",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "term.show_cursor",
            "len",
            "LegacyWindowsTerm"
          ],
          "variables": [
            "term",
            "call_args"
          ],
          "start_line": 388,
          "end_line": 398
        },
        {
          "name": "test_set_title",
          "parameters": [
            {
              "name": "SetConsoleTitle",
              "type": null
            },
            {
              "name": "win32_console_getters",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "SetConsoleTitle.assert_called_once_with",
            "term.set_title",
            "LegacyWindowsTerm"
          ],
          "variables": [
            "term"
          ],
          "start_line": 401,
          "end_line": 405
        },
        {
          "name": "test_set_title_too_long",
          "parameters": [
            {
              "name": "_",
              "type": null
            },
            {
              "name": "win32_console_getters",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "pytest.raises",
            "term.set_title",
            "LegacyWindowsTerm"
          ],
          "variables": [
            "term"
          ],
          "start_line": 408,
          "end_line": 412
        }
      ],
      "variables": [
        "CURSOR_X",
        "CURSOR_Y",
        "CURSOR_POSITION",
        "SCREEN_WIDTH",
        "SCREEN_HEIGHT",
        "DEFAULT_STYLE_ATTRIBUTE",
        "CURSOR_SIZE",
        "dwCursorPosition",
        "dwSize",
        "wAttributes",
        "pytestmark",
        "coord",
        "handle",
        "term",
        "term",
        "text",
        "term",
        "captured",
        "style",
        "text",
        "term",
        "captured",
        "call_args",
        "style",
        "text",
        "term",
        "call_args",
        "expected_attr",
        "style",
        "text",
        "term",
        "call_args",
        "expected_attr",
        "style",
        "text",
        "term",
        "call_args",
        "expected_attr",
        "style",
        "text",
        "term",
        "call_args",
        "expected_attr",
        "style",
        "text",
        "term",
        "call_args",
        "expected_attr",
        "term",
        "start",
        "term",
        "term",
        "start",
        "coords",
        "term",
        "coords",
        "term",
        "coords",
        "term",
        "term",
        "term",
        "term",
        "cursor_at_end_of_line",
        "term",
        "term",
        "term",
        "cursor_at_start_of_line",
        "term",
        "term",
        "call_args",
        "term",
        "call_args",
        "term",
        "term"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\tests\\test_windows_renderer.py",
      "imports": [
        "import sys",
        "from unittest.mock import call, create_autospec",
        "import pytest",
        "from rich._win32_console import LegacyWindowsTerm, WindowsCoordinates",
        "from rich._windows_renderer import legacy_windows_render",
        "from rich.segment import ControlType, Segment",
        "from rich.style import Style"
      ],
      "classes": [],
      "functions": [
        {
          "name": "legacy_term_mock",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "create_autospec"
          ],
          "variables": [],
          "start_line": 19,
          "end_line": 20
        },
        {
          "name": "test_text_only",
          "parameters": [
            {
              "name": "legacy_term_mock",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "legacy_windows_render",
            "Segment",
            "legacy_term_mock.write_text.assert_called_once_with"
          ],
          "variables": [
            "text",
            "buffer"
          ],
          "start_line": 23,
          "end_line": 28
        },
        {
          "name": "test_text_multiple_segments",
          "parameters": [
            {
              "name": "legacy_term_mock",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "legacy_windows_render",
            "Segment",
            "call"
          ],
          "variables": [
            "buffer"
          ],
          "start_line": 31,
          "end_line": 38
        },
        {
          "name": "test_text_with_style",
          "parameters": [
            {
              "name": "legacy_term_mock",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "legacy_term_mock.write_styled.assert_called_once_with",
            "legacy_windows_render",
            "Segment",
            "Style.parse"
          ],
          "variables": [
            "text",
            "style",
            "buffer"
          ],
          "start_line": 41,
          "end_line": 48
        },
        {
          "name": "test_control_cursor_move_to",
          "parameters": [
            {
              "name": "legacy_term_mock",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "legacy_term_mock.move_cursor_to.assert_called_once_with",
            "legacy_windows_render",
            "Segment",
            "WindowsCoordinates"
          ],
          "variables": [
            "buffer"
          ],
          "start_line": 51,
          "end_line": 58
        },
        {
          "name": "test_control_carriage_return",
          "parameters": [
            {
              "name": "legacy_term_mock",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "legacy_windows_render",
            "Segment",
            "legacy_term_mock.write_text.assert_called_once_with"
          ],
          "variables": [
            "buffer"
          ],
          "start_line": 61,
          "end_line": 66
        },
        {
          "name": "test_control_home",
          "parameters": [
            {
              "name": "legacy_term_mock",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "legacy_term_mock.move_cursor_to.assert_called_once_with",
            "legacy_windows_render",
            "Segment",
            "WindowsCoordinates"
          ],
          "variables": [
            "buffer"
          ],
          "start_line": 69,
          "end_line": 74
        },
        {
          "name": "test_control_cursor_single_cell_movement",
          "parameters": [
            {
              "name": "legacy_term_mock",
              "type": null
            },
            {
              "name": "control_type",
              "type": null
            },
            {
              "name": "method_name",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "getattr(legacy_term_mock, method_name).assert_called_once_with",
            "getattr",
            "legacy_windows_render",
            "Segment"
          ],
          "variables": [
            "buffer"
          ],
          "start_line": 86,
          "end_line": 93
        },
        {
          "name": "test_control_erase_line",
          "parameters": [
            {
              "name": "legacy_term_mock",
              "type": null
            },
            {
              "name": "erase_mode",
              "type": null
            },
            {
              "name": "method_name",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "getattr(legacy_term_mock, method_name).assert_called_once_with",
            "getattr",
            "legacy_windows_render",
            "Segment"
          ],
          "variables": [
            "buffer"
          ],
          "start_line": 104,
          "end_line": 109
        },
        {
          "name": "test_control_show_cursor",
          "parameters": [
            {
              "name": "legacy_term_mock",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "legacy_term_mock.show_cursor.assert_called_once_with",
            "legacy_windows_render",
            "Segment"
          ],
          "variables": [
            "buffer"
          ],
          "start_line": 112,
          "end_line": 117
        },
        {
          "name": "test_control_hide_cursor",
          "parameters": [
            {
              "name": "legacy_term_mock",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "legacy_term_mock.hide_cursor.assert_called_once_with",
            "legacy_windows_render",
            "Segment"
          ],
          "variables": [
            "buffer"
          ],
          "start_line": 120,
          "end_line": 125
        },
        {
          "name": "test_control_cursor_move_to_column",
          "parameters": [
            {
              "name": "legacy_term_mock",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "legacy_windows_render",
            "Segment",
            "legacy_term_mock.move_cursor_to_column.assert_called_once_with"
          ],
          "variables": [
            "buffer"
          ],
          "start_line": 128,
          "end_line": 133
        },
        {
          "name": "test_control_set_terminal_window_title",
          "parameters": [
            {
              "name": "legacy_term_mock",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "legacy_windows_render",
            "Segment",
            "legacy_term_mock.set_title.assert_called_once_with"
          ],
          "variables": [
            "buffer"
          ],
          "start_line": 136,
          "end_line": 141
        }
      ],
      "variables": [
        "pytestmark",
        "text",
        "buffer",
        "buffer",
        "text",
        "style",
        "buffer",
        "buffer",
        "buffer",
        "buffer",
        "buffer",
        "buffer",
        "buffer",
        "buffer",
        "buffer",
        "buffer"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\tests\\_card_render.py",
      "imports": [],
      "classes": [],
      "functions": [],
      "variables": [
        "expected"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\tests\\__init__.py",
      "imports": [],
      "classes": [],
      "functions": [],
      "variables": []
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\tools\\make_emoji.py",
      "imports": [
        "import emoji",
        "from emoji.unicode_codes import EMOJI_ALIAS_UNICODE"
      ],
      "classes": [],
      "functions": [],
      "variables": [
        "emoji"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\tools\\make_terminal_widths.py",
      "imports": [
        "import subprocess",
        "from typing import List, Tuple",
        "import sys",
        "from rich.progress import Progress",
        "from wcwidth import wcwidth"
      ],
      "classes": [],
      "functions": [
        {
          "name": "make_widths_table",
          "parameters": [],
          "return_type": "List[Tuple[int, int, int]]",
          "docstring": null,
          "calls": [
            "len",
            "progress.add_task",
            "iter",
            "append",
            "chr",
            "progress.track",
            "range",
            "next",
            "wcwidth"
          ],
          "variables": [
            "table",
            "append",
            "make_table_task",
            "widths",
            "_widths",
            "iter_widths",
            "start_codepoint",
            "end_codepoint",
            "start_codepoint",
            "end_codepoint",
            "group_cell_size",
            "end_codepoint"
          ],
          "start_line": 13,
          "end_line": 39
        },
        {
          "name": "get_cell_size",
          "parameters": [
            {
              "name": null,
              "type": "List[Tuple[int, int, int]]"
            },
            {
              "name": null,
              "type": "str"
            }
          ],
          "return_type": "int",
          "docstring": null,
          "calls": [
            "len",
            "ord"
          ],
          "variables": [
            "codepoint",
            "lower_bound",
            "upper_bound",
            "index",
            "upper_bound",
            "lower_bound",
            "index"
          ],
          "start_line": 42,
          "end_line": 58
        },
        {
          "name": "test",
          "parameters": [
            {
              "name": "widths_table",
              "type": null
            }
          ],
          "return_type": null,
          "docstring": null,
          "calls": [
            "chr",
            "progress.track",
            "range",
            "get_cell_size",
            "wcwidth",
            "print"
          ],
          "variables": [
            "character",
            "width1",
            "width2"
          ],
          "start_line": 61,
          "end_line": 70
        },
        {
          "name": "run",
          "parameters": [],
          "return_type": null,
          "docstring": null,
          "calls": [
            "make_widths_table",
            "open",
            "subprocess.run",
            "test",
            "fh.write"
          ],
          "variables": [
            "widths_table",
            "table_file"
          ],
          "start_line": 73,
          "end_line": 85
        }
      ],
      "variables": [
        "progress",
        "table",
        "append",
        "make_table_task",
        "widths",
        "_widths",
        "iter_widths",
        "start_codepoint",
        "end_codepoint",
        "end_codepoint",
        "start_codepoint",
        "end_codepoint",
        "end_codepoint",
        "group_cell_size",
        "end_codepoint",
        "codepoint",
        "lower_bound",
        "upper_bound",
        "index",
        "upper_bound",
        "lower_bound",
        "index",
        "character",
        "width1",
        "width2",
        "widths_table",
        "table_file"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\tools\\profile_divide.py",
      "imports": [
        "from rich.segment import Segment",
        "from time import perf_counter"
      ],
      "classes": [],
      "functions": [],
      "variables": [
        "text",
        "segments",
        "start"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\tools\\profile_pretty.py",
      "imports": [
        "import json",
        "import io",
        "from time import time",
        "from rich.console import Console",
        "from rich.pretty import Pretty"
      ],
      "classes": [],
      "functions": [],
      "variables": [
        "console",
        "cats",
        "start",
        "pretty",
        "result",
        "taken"
      ]
    },
    {
      "path": "C:\\CODEIQNEW\\backend\\data\\rich\\tools\\stress_test_pretty.py",
      "imports": [
        "from rich.console import Console",
        "from rich.panel import Panel",
        "from rich.pretty import Pretty",
        "from rich._timer import timer"
      ],
      "classes": [],
      "functions": [],
      "variables": [
        "DATA",
        "console"
      ]
    }
  ]
}