{
  "path": "C:\\CODEIQNEW\\backend\\data\\rich\\rich\\syntax.py",
  "imports": [
    "import os.path",
    "import re",
    "import sys",
    "import textwrap",
    "from abc import ABC, abstractmethod",
    "from pathlib import Path",
    "from typing import (\n    Any,\n    Dict,\n    Iterable,\n    List,\n    NamedTuple,\n    Optional,\n    Sequence,\n    Set,\n    Tuple,\n    Type,\n    Union,\n)",
    "from pygments.lexer import Lexer",
    "from pygments.lexers import get_lexer_by_name, guess_lexer_for_filename",
    "from pygments.style import Style as PygmentsStyle",
    "from pygments.styles import get_style_by_name",
    "from pygments.token import (\n    Comment,\n    Error,\n    Generic,\n    Keyword,\n    Name,\n    Number,\n    Operator,\n    String,\n    Token,\n    Whitespace,\n)",
    "from pygments.util import ClassNotFound",
    "from rich.containers import Lines",
    "from rich.padding import Padding, PaddingDimensions",
    "from ._loop import loop_first",
    "from .cells import cell_len",
    "from .color import Color, blend_rgb",
    "from .console import Console, ConsoleOptions, JustifyMethod, RenderResult",
    "from .jupyter import JupyterMixin",
    "from .measure import Measurement",
    "from .segment import Segment, Segments",
    "from .style import Style, StyleType",
    "from .text import Text",
    "import argparse",
    "import sys",
    "from rich.console import Console"
  ],
  "classes": [
    {
      "name": "SyntaxTheme",
      "base_classes": "(ABC)",
      "docstring": null,
      "methods": []
    },
    {
      "name": "PygmentsSyntaxTheme",
      "base_classes": "(SyntaxTheme)",
      "docstring": null,
      "methods": []
    },
    {
      "name": "ANSISyntaxTheme",
      "base_classes": "(SyntaxTheme)",
      "docstring": null,
      "methods": []
    },
    {
      "name": "_SyntaxHighlightRange",
      "base_classes": "(NamedTuple)",
      "docstring": null,
      "methods": []
    },
    {
      "name": "PaddingProperty",
      "base_classes": null,
      "docstring": null,
      "methods": []
    },
    {
      "name": "Syntax",
      "base_classes": "(JupyterMixin)",
      "docstring": null,
      "methods": []
    }
  ],
  "functions": [
    {
      "name": "get_style_for_token",
      "parameters": [
        {
          "name": "self",
          "type": null
        },
        {
          "name": null,
          "type": "TokenType"
        }
      ],
      "return_type": "Style",
      "docstring": null,
      "calls": [],
      "variables": [],
      "start_line": 128,
      "end_line": 130
    },
    {
      "name": "get_background_style",
      "parameters": [
        {
          "name": "self",
          "type": null
        }
      ],
      "return_type": "Style",
      "docstring": null,
      "calls": [],
      "variables": [],
      "start_line": 133,
      "end_line": 135
    },
    {
      "name": "__init__",
      "parameters": [
        {
          "name": "self",
          "type": null
        },
        {
          "name": null,
          "type": "Union[str, Type[PygmentsStyle]]"
        }
      ],
      "return_type": "None",
      "docstring": null,
      "calls": [
        "isinstance",
        "get_style_by_name",
        "Style"
      ],
      "variables": [],
      "start_line": 141,
      "end_line": 152
    },
    {
      "name": "get_style_for_token",
      "parameters": [
        {
          "name": "self",
          "type": null
        },
        {
          "name": null,
          "type": "TokenType"
        }
      ],
      "return_type": "Style",
      "docstring": null,
      "calls": [
        "Style.null",
        "Style",
        "self._pygments_style_class.style_for_token"
      ],
      "variables": [
        "pygments_style",
        "style",
        "color",
        "bgcolor",
        "style"
      ],
      "start_line": 154,
      "end_line": 174
    },
    {
      "name": "get_background_style",
      "parameters": [
        {
          "name": "self",
          "type": null
        }
      ],
      "return_type": "Style",
      "docstring": null,
      "calls": [],
      "variables": [],
      "start_line": 176,
      "end_line": 177
    },
    {
      "name": "__init__",
      "parameters": [
        {
          "name": "self",
          "type": null
        },
        {
          "name": null,
          "type": "Dict[TokenType, Style]"
        }
      ],
      "return_type": "None",
      "docstring": null,
      "calls": [
        "Style.null"
      ],
      "variables": [],
      "start_line": 183,
      "end_line": 187
    },
    {
      "name": "get_style_for_token",
      "parameters": [
        {
          "name": "self",
          "type": null
        },
        {
          "name": null,
          "type": "TokenType"
        }
      ],
      "return_type": "Style",
      "docstring": null,
      "calls": [
        "get_style",
        "tuple"
      ],
      "variables": [
        "get_style",
        "token",
        "style",
        "_style",
        "style",
        "token"
      ],
      "start_line": 189,
      "end_line": 207
    },
    {
      "name": "get_background_style",
      "parameters": [
        {
          "name": "self",
          "type": null
        }
      ],
      "return_type": "Style",
      "docstring": null,
      "calls": [],
      "variables": [],
      "start_line": 209,
      "end_line": 210
    },
    {
      "name": "__get__",
      "parameters": [
        {
          "name": "self",
          "type": null
        },
        {
          "name": null,
          "type": "Syntax"
        },
        {
          "name": null,
          "type": "Type[Syntax]"
        }
      ],
      "return_type": "Tuple[int, int, int, int]",
      "docstring": null,
      "calls": [],
      "variables": [],
      "start_line": 232,
      "end_line": 234
    },
    {
      "name": "__set__",
      "parameters": [
        {
          "name": "self",
          "type": null
        },
        {
          "name": null,
          "type": "Syntax"
        },
        {
          "name": null,
          "type": "PaddingDimensions"
        }
      ],
      "return_type": "None",
      "docstring": null,
      "calls": [
        "Padding.unpack"
      ],
      "variables": [],
      "start_line": 236,
      "end_line": 237
    },
    {
      "name": "get_theme",
      "parameters": [
        {
          "name": "cls",
          "type": null
        },
        {
          "name": null,
          "type": "Union[str, SyntaxTheme]"
        }
      ],
      "return_type": "SyntaxTheme",
      "docstring": null,
      "calls": [
        "isinstance",
        "PygmentsSyntaxTheme",
        "ANSISyntaxTheme"
      ],
      "variables": [
        "theme",
        "theme",
        "theme"
      ],
      "start_line": 265,
      "end_line": 274
    },
    {
      "name": "__init__",
      "parameters": [
        {
          "name": "self",
          "type": null
        },
        {
          "name": null,
          "type": "str"
        },
        {
          "name": null,
          "type": "Union[Lexer, str]"
        }
      ],
      "return_type": "None",
      "docstring": null,
      "calls": [
        "set",
        "Style",
        "self.get_theme",
        "Padding.unpack"
      ],
      "variables": [],
      "start_line": 276,
      "end_line": 312
    },
    {
      "name": "from_path",
      "parameters": [
        {
          "name": "cls",
          "type": null
        },
        {
          "name": null,
          "type": "str"
        }
      ],
      "return_type": "\"Syntax\"",
      "docstring": null,
      "calls": [
        "cls",
        "cls.guess_lexer",
        "Path",
        "Path(path).read_text"
      ],
      "variables": [
        "code",
        "lexer"
      ],
      "start_line": 317,
      "end_line": 377
    },
    {
      "name": "guess_lexer",
      "parameters": [
        {
          "name": "cls",
          "type": null
        },
        {
          "name": null,
          "type": "str"
        }
      ],
      "return_type": "str",
      "docstring": null,
      "calls": [
        "get_lexer_by_name",
        "os.path.splitext",
        "ext.lstrip",
        "guess_lexer_for_filename",
        "ext.lstrip(\".\").lower"
      ],
      "variables": [
        "lexer",
        "lexer_name",
        "lexer",
        "extension",
        "lexer",
        "lexer_name",
        "lexer_name"
      ],
      "start_line": 380,
      "end_line": 419
    },
    {
      "name": "_get_base_style",
      "parameters": [
        {
          "name": "self",
          "type": null
        }
      ],
      "return_type": "Style",
      "docstring": null,
      "calls": [
        "self._theme.get_background_style"
      ],
      "variables": [
        "default_style"
      ],
      "start_line": 421,
      "end_line": 424
    },
    {
      "name": "_get_token_color",
      "parameters": [
        {
          "name": "self",
          "type": null
        },
        {
          "name": null,
          "type": "TokenType"
        }
      ],
      "return_type": "Optional[Color]",
      "docstring": null,
      "calls": [
        "self._theme.get_style_for_token"
      ],
      "variables": [
        "style"
      ],
      "start_line": 426,
      "end_line": 436
    },
    {
      "name": "lexer",
      "parameters": [
        {
          "name": "self",
          "type": null
        }
      ],
      "return_type": "Optional[Lexer]",
      "docstring": null,
      "calls": [
        "isinstance",
        "get_lexer_by_name"
      ],
      "variables": [],
      "start_line": 439,
      "end_line": 455
    },
    {
      "name": "default_lexer",
      "parameters": [
        {
          "name": "self",
          "type": null
        }
      ],
      "return_type": "Lexer",
      "docstring": null,
      "calls": [
        "get_lexer_by_name"
      ],
      "variables": [],
      "start_line": 458,
      "end_line": 465
    },
    {
      "name": "highlight",
      "parameters": [
        {
          "name": "self",
          "type": null
        },
        {
          "name": null,
          "type": "str"
        }
      ],
      "return_type": "Text",
      "docstring": null,
      "calls": [
        "next",
        "iter",
        "self._get_base_style",
        "Text",
        "token.endswith",
        "text.append_tokens",
        "tokens_to_spans",
        "token.partition",
        "text.append",
        "self._apply_stylized_ranges",
        "lexer.get_tokens",
        "_get_theme_style",
        "line_tokenize",
        "text.stylize"
      ],
      "variables": [
        "base_style",
        "justify",
        "text",
        "_get_theme_style",
        "lexer",
        "tokens",
        "line_no",
        "_line_start"
      ],
      "start_line": 467,
      "end_line": 550
    },
    {
      "name": "line_tokenize",
      "parameters": [],
      "return_type": "Iterable[Tuple[Any, str]]",
      "docstring": null,
      "calls": [
        "token.partition",
        "lexer.get_tokens"
      ],
      "variables": [],
      "start_line": 505,
      "end_line": 512
    },
    {
      "name": "tokens_to_spans",
      "parameters": [],
      "return_type": "Iterable[Tuple[str, Optional[Style]]]",
      "docstring": null,
      "calls": [
        "next",
        "iter",
        "token.endswith",
        "_get_theme_style",
        "line_tokenize"
      ],
      "variables": [
        "tokens",
        "line_no",
        "_line_start"
      ],
      "start_line": 514,
      "end_line": 535
    },
    {
      "name": "stylize_range",
      "parameters": [
        {
          "name": "self",
          "type": null
        },
        {
          "name": null,
          "type": "StyleType"
        },
        {
          "name": null,
          "type": "SyntaxPosition"
        },
        {
          "name": null,
          "type": "SyntaxPosition"
        }
      ],
      "return_type": "None",
      "docstring": null,
      "calls": [
        "_SyntaxHighlightRange",
        "self._stylized_ranges.append"
      ],
      "variables": [],
      "start_line": 552,
      "end_line": 571
    },
    {
      "name": "_get_line_numbers_color",
      "parameters": [
        {
          "name": "self",
          "type": null
        }
      ],
      "return_type": "Color",
      "docstring": null,
      "calls": [
        "Color.default",
        "background_color.get_truecolor",
        "Color.from_triplet",
        "blend_rgb",
        "foreground_color.get_truecolor",
        "self._get_token_color",
        "self._theme.get_background_style"
      ],
      "variables": [
        "background_style",
        "background_color",
        "foreground_color",
        "new_color"
      ],
      "start_line": 573,
      "end_line": 586
    },
    {
      "name": "_numbers_column_width",
      "parameters": [
        {
          "name": "self",
          "type": null
        }
      ],
      "return_type": "int",
      "docstring": null,
      "calls": [
        "len",
        "str",
        "self.code.count"
      ],
      "variables": [
        "column_width",
        "column_width"
      ],
      "start_line": 589,
      "end_line": 597
    },
    {
      "name": "_get_number_styles",
      "parameters": [
        {
          "name": "self",
          "type": null
        },
        {
          "name": null,
          "type": "Console"
        }
      ],
      "return_type": "Tuple[Style, Style, Style]",
      "docstring": null,
      "calls": [
        "self._get_line_numbers_color",
        "self._get_base_style",
        "self._theme.get_style_for_token",
        "Style",
        "Style.null",
        "Style.chain"
      ],
      "variables": [
        "background_style",
        "number_style",
        "highlight_number_style",
        "number_style",
        "highlight_number_style"
      ],
      "start_line": 599,
      "end_line": 620
    },
    {
      "name": "__rich_measure__",
      "parameters": [
        {
          "name": "self",
          "type": null
        },
        {
          "name": null,
          "type": "\"Console\""
        },
        {
          "name": null,
          "type": "\"ConsoleOptions\""
        }
      ],
      "return_type": "\"Measurement\"",
      "docstring": null,
      "calls": [
        "max",
        "cell_len",
        "Measurement",
        "self.code.splitlines"
      ],
      "variables": [
        "padding",
        "width",
        "lines",
        "width"
      ],
      "start_line": 622,
      "end_line": 638
    },
    {
      "name": "__rich_console__",
      "parameters": [
        {
          "name": "self",
          "type": null
        },
        {
          "name": null,
          "type": "Console"
        },
        {
          "name": null,
          "type": "ConsoleOptions"
        }
      ],
      "return_type": "RenderResult",
      "docstring": null,
      "calls": [
        "any",
        "self._get_syntax",
        "self._get_base_style",
        "Padding",
        "Segments"
      ],
      "variables": [
        "segments"
      ],
      "start_line": 640,
      "end_line": 647
    },
    {
      "name": "_get_syntax",
      "parameters": [
        {
          "name": "self",
          "type": null
        },
        {
          "name": null,
          "type": "Console"
        },
        {
          "name": null,
          "type": "ConsoleOptions"
        }
      ],
      "return_type": "Iterable[Segment]",
      "docstring": null,
      "calls": [
        "self.highlight",
        "Text(\"\\n\")\n                .join(lines)\n                .with_indent_guides(self.tab_size, style=style + Style(italic=False))\n                .split",
        "Text(\"\\n\")\n                .join(lines)\n                .with_indent_guides",
        "self._get_number_styles",
        "options.update",
        "text.remove_suffix",
        "str(line_no).rjust",
        "len",
        "enumerate",
        "loop_first",
        "list",
        "str",
        "max",
        "render_options.update",
        "console.render_lines",
        "Text",
        "Style",
        "text.with_indent_guides",
        "self._process_code",
        "text.split",
        "_Segment",
        "self._get_base_style",
        "self._theme.get_style_for_token",
        "Text(\"\\n\")\n                .join",
        "line.render",
        "highlight_line",
        "_Segment.adjust_line_length",
        "console.render"
      ],
      "variables": [
        "transparent_background",
        "horizontal_padding",
        "code_width",
        "code_width",
        "text",
        "style",
        "text",
        "syntax_lines",
        "line_offset",
        "line_offset",
        "lines",
        "lines",
        "style",
        "lines",
        "numbers_column_width",
        "render_options",
        "highlight_line",
        "_Segment",
        "new_line",
        "line_pointer",
        "wrapped_lines",
        "segments",
        "wrapped_lines",
        "wrapped_lines",
        "wrapped_line_left_pad",
        "line_column"
      ],
      "start_line": 649,
      "end_line": 785
    },
    {
      "name": "_apply_stylized_ranges",
      "parameters": [
        {
          "name": "self",
          "type": null
        },
        {
          "name": null,
          "type": "Text"
        }
      ],
      "return_type": "None",
      "docstring": null,
      "calls": [
        "_get_code_index_for_syntax_position",
        "text.stylize_before",
        "re.finditer",
        "len",
        "match.start",
        "text.stylize"
      ],
      "variables": [
        "code",
        "newlines_offsets",
        "start",
        "end"
      ],
      "start_line": 787,
      "end_line": 818
    },
    {
      "name": "_process_code",
      "parameters": [
        {
          "name": "self",
          "type": null
        },
        {
          "name": null,
          "type": "str"
        }
      ],
      "return_type": "Tuple[bool, str]",
      "docstring": null,
      "calls": [
        "processed_code.expandtabs",
        "code.endswith",
        "textwrap.dedent"
      ],
      "variables": [
        "ends_on_nl",
        "processed_code",
        "processed_code",
        "processed_code"
      ],
      "start_line": 820,
      "end_line": 838
    },
    {
      "name": "_get_code_index_for_syntax_position",
      "parameters": [
        {
          "name": null,
          "type": "Sequence[int]"
        },
        {
          "name": null,
          "type": "SyntaxPosition"
        }
      ],
      "return_type": "Optional[int]",
      "docstring": null,
      "calls": [
        "len",
        "min"
      ],
      "variables": [
        "lines_count",
        "line_index",
        "line_length",
        "column_index"
      ],
      "start_line": 841,
      "end_line": 865
    }
  ],
  "variables": [
    "TokenType",
    "WINDOWS",
    "DEFAULT_THEME",
    "ANSI_LIGHT",
    "ANSI_DARK",
    "RICH_SYNTAX_THEMES",
    "NUMBERS_COLUMN_DEFAULT_PADDING",
    "pygments_style",
    "style",
    "color",
    "bgcolor",
    "style",
    "get_style",
    "token",
    "style",
    "_style",
    "style",
    "token",
    "SyntaxPosition",
    "style",
    "start",
    "end",
    "style_before",
    "_pygments_style_class",
    "_theme",
    "theme",
    "theme",
    "theme",
    "padding",
    "code",
    "lexer",
    "lexer",
    "lexer_name",
    "lexer",
    "extension",
    "lexer",
    "lexer_name",
    "lexer_name",
    "default_style",
    "style",
    "base_style",
    "justify",
    "text",
    "_get_theme_style",
    "lexer",
    "tokens",
    "line_no",
    "_line_start",
    "background_style",
    "background_color",
    "foreground_color",
    "new_color",
    "column_width",
    "column_width",
    "background_style",
    "number_style",
    "highlight_number_style",
    "number_style",
    "highlight_number_style",
    "padding",
    "width",
    "lines",
    "width",
    "segments",
    "transparent_background",
    "horizontal_padding",
    "code_width",
    "code_width",
    "text",
    "style",
    "text",
    "syntax_lines",
    "line_offset",
    "line_offset",
    "lines",
    "lines",
    "style",
    "lines",
    "numbers_column_width",
    "render_options",
    "highlight_line",
    "_Segment",
    "new_line",
    "line_pointer",
    "wrapped_lines",
    "segments",
    "wrapped_lines",
    "wrapped_lines",
    "wrapped_line_left_pad",
    "line_column",
    "code",
    "newlines_offsets",
    "start",
    "end",
    "ends_on_nl",
    "processed_code",
    "processed_code",
    "processed_code",
    "lines_count",
    "line_index",
    "line_length",
    "column_index",
    "parser",
    "args",
    "console",
    "code",
    "syntax",
    "syntax"
  ]
}